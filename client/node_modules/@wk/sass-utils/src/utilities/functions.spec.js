'use strict';

let path = require('path');
let Sassaby = require('sassaby');

describe('units related functions', () => {
    let fn;
    let file = path.resolve('src/utilities/_functions.scss');
    let sb = new Sassaby(file, {
        variables: {
            'wk-rem-base': '16px',
            'wk-rem-px-only': false,
            'wk-state-success-text-color': '#000',
            'wk-state-success-link-color': '$wk-state-success-text-color'
        },
        dependencies: [
            'node_modules/modularscale-sass/stylesheets/_modular-scale.scss',
            'src/utilities/_functions.scss',
            'src/utilities/_variables.scss',
            'src/utilities/_colors.variables.scss'
        ]
    });

    describe('wk-str-replace', () =>  {
        beforeEach(() => fn = sb.func('wk-str-replace'));

        it('should replace a part of a string', () => fn
            .calledWithArgs('wk-css', 'css', 'sass')
            .equals('wk-sass')
        );
    });

    describe('wk-strip-units', () =>  {
        beforeEach(() => fn = sb.func('wk-strip-units'));

        it('should remove em units', () => fn
            .calledWithArgs('10em')
            .equals(10)
        );

        it('should remove px units', () => fn
            .calledWithArgs('10px')
            .equals(10)
        );

        it('should remove rem units', () => fn
            .calledWithArgs('10rem')
            .equals(10)
        );
    });

    describe('wk-rem-convert', () =>  {
        beforeEach(() => fn = sb.func('wk-rem-convert'));

        it('should convert px to rem', () => fn
            .calledWithArgs('rem', '16px')
            .equals('1rem')
        );

        it('should convert rem to px', () => fn
            .calledWithArgs('px', '1rem')
            .equals('16px')
        );

        it('should convert px to rem using a list', () => fn
            .calledWithArgs('rem', '16px 16px 16px #CCC')
            .equals('1rem 1rem 1rem #CCC')
        );

        it('should convert rem to px using a list', () => fn
            .calledWithArgs('px', '1rem 1rem 1rem #CCC')
            .equals('16px 16px 16px #CCC')
        );
    });

    describe('wk-rem', () =>  {
        let fn = sb.func('wk-rem');

        it('should convert px to rem', () => fn
            .calledWithArgs('16px 16px #eee')
            .equals('1rem 1rem #eee')
        );
    });

    describe('wk-rem-value', () =>  {
        beforeEach(() => fn = sb.func('wk-rem-value'));

        it('should append unit to a pixel value', () => fn
            .calledWithArgs(16)
            .equals('1rem')
        );

        it('should strip pixel units', () => fn
            .calledWithArgs('16px')
            .equals('1rem')
        );

        it('should accept a different base', () => fn
            .calledWithArgs(16, 8)
            .equals('2rem')
        );

        it('should strip base units', () => fn
            .calledWithArgs(16, '8px')
            .equals('2rem')
        );
    });

    describe('wk-em-value', () =>  {
        beforeEach(() => fn = sb.func('wk-em-value'));

        it('should append unit to a pixel value', () => fn
            .calledWithArgs(16)
            .equals('1em')
        );

        it('should strip pixel units', () => fn
            .calledWithArgs('16px')
            .equals('1em')
        );

        it('should accept a different base', () => fn
            .calledWithArgs(16, 8)
            .equals('2em')
        );

        it('should strip base units', () => fn
            .calledWithArgs(16, '8px')
            .equals('2em')
        );
    });

    describe('wk-primary-color', () =>  {
        beforeEach(() => fn = sb.func('wk-primary-color'));

        it('should return hex primary brand color', () => fn
            .calledWithArgs('wkWhite')
            .equals('#fff')
        );

        it('should return hex primary brand color tint', () => fn
            .calledWithArgs('wkGray', 'tint1')
            .equals('#757575')
        );

        it('should return hex primary brand color shade', () => fn
            .calledWithArgs('wkBlue', 'shade1')
            .equals('#005b92')
        );
    });

    describe('wk-secondary-color', () =>  {
        beforeEach(() => fn = sb.func('wk-secondary-color'));

        it('should return hex secondary brand color', () => fn
            .calledWithArgs('wkOrange')
            .equals('#ea8f00')
        );

        it('should return hex secondary brand color tint', () => fn
            .calledWithArgs('wkOrange', 'tint1')
            .equals('#efab40')
        );
    });

    describe('wk-logo-color', () =>  {
        let fn = sb.func('wk-logo-color');

        it('should replace logo color in SVG string', () => fn
            .calledWithArgs('"asd%23474747asd"', '#444')
            .equals('"asd%23444asd"')
        );
    });

    describe('wk-brand-color', () =>  {
        beforeEach(() => fn = sb.func('wk-brand-color'));

        it('should return primary color base variation by default', () => fn
            .calledWithArgs('wkBlue')
            .equals('#007ac3')
        );

        it('should return primary color provided variation', () => fn
            .calledWithArgs('wkBlue', 'tint1')
            .equals('#409bd2')
        );

        it('should return secondary color base variation', () => fn
            .calledWithArgs('wkPurple', 'base', true)
            .equals('#940c72')
        );

        it('should return secondary color provided variation', () => fn
            .calledWithArgs('wkPurple', 'tint2', true)
            .equals('#ca86b9')
        );
    });

    describe('wk-get-color-variation', () =>  {
        beforeEach(() => fn = sb.func('wk-get-color-variation'));

        it('should return hex color base variation', () => fn
            .calledWithArgs('map-get($wk-primary-colors, wkBlue)', 'base')
            .equals('#007ac3')
        );

        it('should return hex color provided variation', () => fn
            .calledWithArgs('map-get($wk-primary-colors, wkBlue)', 'tint1')
            .equals('#409bd2')
        );

        it('should return hex color provided variation', () => fn
            .calledWithArgs('map-get($wk-primary-colors, wkBlue)', 'shade1')
            .equals('#005b92')
        );
    });

    describe('wk-background-gradient', () =>  {
        beforeEach(() => fn = sb.func('wk-background-gradient'));

        it('should return linear gradient with default color white', () => fn
            .calledWithArgs('right')
            .equals('linear-gradient(to right,#fff,rgba(255,255,255,0)) 0 0')
        );

        it('should return linear gradient with provided color', () => fn
            .calledWithArgs('right', '#000')
            .equals('linear-gradient(to right,#000,transparent) 0 0')
        );
    });
});
