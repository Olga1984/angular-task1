////
/// @group wk-sass-utils.mixins
/// @author [GPO](https://gpo.wolterskluwer.com/)
/// @since 0.3.0
/// @access public

/// 50% + 50% layout on breakpoints larger than mobile
///
/// @param {String} $child ['.wk-layout-item'] - A selector which will serve as the column name. `.wk-layout-item` is default selector. For this variable you may use either a base element e.g.  `div` or a class e.g. `.column`.
///
/// @require {Mixin} susy/container - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/last - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/span - which comes from Susy library http://susy.oddbird.net/
///
/// @example scss - Usage
///   .my-layout {
///       @include wk-layout-50-50('.my-column');
///   }
///
/// @example css - Output
///   .my-layout {
///       max-width: 75rem;
///       margin-left: auto;
///       margin-right: auto;
///   }
///   .my-layout:after {
///       content: " ";
///       display: block;
///       clear: both;
///   }
///   @media (min-width: 37.5rem) {
///       .my-layout > .my-column {
///           width: 49.15254%;
///           float: left;
///           margin-right: 1.69492%;
///       }
///       .my-layout > .my-column:nth-child(2n) {
///           float: right;
///           margin-right: 0;
///       }
///   }
@mixin wk-layout-50-50($child: '.wk-layout-item') {
    @include container;

    @include breakpoint($wk-target-tablet-desktop) {
        > #{$child} {
            @include span($wk-global-columns / 2 of $wk-global-columns);

            &:nth-child(2n) {
                @include last;
            }
        }
    }
}

/// 50% + 50% layout on all breakpoints
///
/// @param {String} $child ['.wk-layout-item'] - A selector which will serve as the column name. `.wk-layout-item` is default selector. For this variable you may use either a base element e.g.  `div` or a class e.g. `.column`.
///
/// @require {Mixin} susy/container - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/last - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/span - which comes from Susy library http://susy.oddbird.net/
///
/// @example scss - Usage
///   .my-layout {
///       @include wk-layout-50-50-persist('.my-column');
///   }
///
/// @example css - Output
///    .my-layout {
///        max-width: 75rem;
///        margin-left: auto;
///        margin-right: auto;
///    }
///    .my-layout:after {
///        content: " ";
///        display: block;
///        clear: both;
///    }
///    .my-layout > .my-column {
///        width: 49.15254%;
///        float: left;
///        margin-right: 1.69492%;
///    }
///    .my-layout > .my-column:nth-child(2n) {
///        float: right;
///        margin-right: 0;
///    }

@mixin wk-layout-50-50-persist($child: '.wk-layout-item') {
    @include container;

    > #{$child} {
        @include span($wk-global-columns / 2 of $wk-global-columns);

        &:nth-child(2n) {
            @include last;
        }
    }
}

/// 33% + 66% layout on breakpoints larger than mobile
///
/// @param {String} $child ['.wk-layout-item'] - A selector which will serve as the column name. `.wk-layout-item` is default selector. For this variable you may use either a base element e.g.  `div` or a class e.g. `.column`.
///
/// @require {Mixin} susy/container - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/last - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/span - which comes from Susy library http://susy.oddbird.net/
///
///
/// @example scss - Usage
///   .my-layout {
///       @include wk-layout-33-66('.my-column');
///   }
///
/// @example css - Output
///   .my-layout {
///       max-width: 75rem;
///       margin-left: auto;
///       margin-right: auto;
///   }
///   .my-layout:after {
///       content: " ";
///       display: block;
///       clear: both;
///   }
///   @media (min-width: 37.5rem) {
///       .my-layout > .my-column {
///           width: 32.20339%;
///           float: left;
///           margin-right: 1.69492%;
///       }
///
///       .my-layout > .my-column:nth-child(2n) {
///           width: 66.10169%;
///           float: left;
///           margin-right: 1.69492%;
///           float: right;
///           margin-right: 0;
///       }
///   }
@mixin wk-layout-33-66($child: '.wk-layout-item') {
    @include container;

    @include breakpoint($wk-target-tablet-desktop) {
        > #{$child} {
            @include span($wk-global-columns / 3 of $wk-global-columns);

            &:nth-child(2n) {
                @include span($wk-global-columns / 3 * 2 of $wk-global-columns);
                @include last;
            }
        }
    }
}

/// 33% + 66% layout on all breakpoints
///
/// @param {String} $child ['.wk-layout-item'] - A selector which will serve as the column name. `.wk-layout-item` is default selector. For this variable you may use either a base element e.g.  `div` or a class e.g. `.column`.
///
/// @require {Mixin} susy/container - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/last - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/span - which comes from Susy library http://susy.oddbird.net/
///
/// @example scss - Usage
///   .my-layout {
///       @include wk-layout-33-66-persist('.my-column');
///   }
///
/// @example css - Output
///   .my-layout {
///       max-width: 75rem;
///       margin-left: auto;
///       margin-right: auto;
///   }
///   .my-layout:after {
///       content: " ";
///       display: block;
///       clear: both;
///   }
///   .my-layout > .my-column {
///       width: 32.20339%;
///       float: left;
///       margin-right: 1.69492%;
///   }
///
///   .my-layout > .my-column:nth-child(2n) {
///       width: 66.10169%;
///       float: left;
///       margin-right: 1.69492%;
///       float: right;
///       margin-right: 0;
///   }
@mixin wk-layout-33-66-persist($child: '.wk-layout-item') {
    @include container;

    > #{$child} {
        @include span($wk-global-columns / 3 of $wk-global-columns);

        &:nth-child(2n) {
            @include span($wk-global-columns / 3 * 2 of $wk-global-columns);
            @include last;
        }
    }
}

/// 66% + 33% layout on breakpoints larger than mobile
///
/// @param {String} $child ['.wk-layout-item'] - A selector which will serve as the column name. `.wk-layout-item` is default selector. For this variable you may use either a base element e.g.  `div` or a class e.g. `.column`.
///
/// @require {Mixin} susy/container - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/last - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/span - which comes from Susy library http://susy.oddbird.net/
///
/// @example scss - Usage
///   .my-layout {
///       @include wk-layout-66-33('.my-column');
///   }
///
/// @example css - Output
///   .my-layout {
///       max-width: 75rem;
///       margin-left: auto;
///       margin-right: auto;
///   }
///   .my-layout:after {
///       content: " ";
///       display: block;
///       clear: both;
///   }
///   @media (min-width: 37.5rem) {
///       .my-layout > .my-column {
///           width: 66.10169%;
///           float: left;
///           margin-right: 1.69492%;
///       }
///
///       .my-layout > .my-column:nth-child(2n) {
///           width: 32.20339%;
///           float: left;
///           margin-right: 1.69492%;
///           float: right;
///           margin-right: 0;
///       }
///   }
@mixin wk-layout-66-33($child: '.wk-layout-item') {
    @include container;

    @include breakpoint($wk-target-tablet-desktop) {
        > #{$child} {
            @include span($wk-global-columns / 3 * 2 of $wk-global-columns);

            &:nth-child(2n) {
                @include span($wk-global-columns / 3 of $wk-global-columns);
                @include last;
            }
        }
    }
}

/// 66% + 33% layout on all breakpoints
///
/// @param {String} $child ['.wk-layout-item'] - A selector which will serve as the column name. `.wk-layout-item` is default selector. For this variable you may use either a base element e.g.  `div` or a class e.g. `.column`.
/// @require {Mixin} susy/container - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/last - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/span - which comes from Susy library http://susy.oddbird.net/
///
/// @example scss - Usage
///   .my-layout {
///       @include wk-layout-66-33-persist('.my-column');
///   }
///
/// @example css - Output
///   .my-layout {
///       max-width: 75rem;
///       margin-left: auto;
///       margin-right: auto;
///   }
///   .my-layout:after {
///       content: " ";
///       display: block;
///       clear: both;
///   }
///   .my-layout > .my-column {
///       width: 66.10169%;
///       float: left;
///       margin-right: 1.69492%;
///   }
///
///   .my-layout > .my-column:nth-child(2n) {
///       width: 32.20339%;
///       float: left;
///       margin-right: 1.69492%;
///       float: right;
///       margin-right: 0;
///   }
@mixin wk-layout-66-33-persist($child: '.wk-layout-item') {
    @include container;

    > #{$child} {
        @include span($wk-global-columns / 3 * 2 of $wk-global-columns);

        &:nth-child(2n) {
            @include span($wk-global-columns / 3 of $wk-global-columns);
            @include last;
        }
    }
}

/// 25% + 75% layout on breakpoints larger than mobile
///
/// @param {String} $child ['.wk-layout-item'] - A selector which will serve as the column name. `.wk-layout-item` is default selector. For this variable you may use either a base element e.g.  `div` or a class e.g. `.column`.
///
/// @require {Mixin} susy/container - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/last - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/span - which comes from Susy library http://susy.oddbird.net/
///
/// @example scss - Usage
///   .my-layout {
///       @include wk-layout-25-75('.my-column');
///   }
///
/// @example css - Output
///   .my-layout {
///       max-width: 75rem;
///       margin-left: auto;
///       margin-right: auto;
///   }
///   .my-layout:after {
///       content: " ";
///       display: block;
///       clear: both;
///   }
///   @media (min-width: 37.5rem) {
///       .my-layout > .my-column {
///           width: 23.72881%;
///           float: left;
///           margin-right: 1.69492%;
///       }
///
///       .my-layout > .my-column:nth-child(2n) {
///           width: 74.57627%;
///           float: left;
///           margin-right: 1.69492%;
///           float: right;
///           margin-right: 0;
///       }
///   }
@mixin wk-layout-25-75($child: '.wk-layout-item') {
    @include container;

    @include breakpoint($wk-target-tablet-desktop) {
        > #{$child} {
            @include span($wk-global-columns / 4 of $wk-global-columns);

            &:nth-child(2n) {
                @include span($wk-global-columns / 4 * 3 of $wk-global-columns);
                @include last;
            }
        }
    }
}

/// 25% + 75% layout on all breakpoints
///
/// @param {String} $child ['.wk-layout-item'] - A selector which will serve as the column name. `.wk-layout-item` is default selector. For this variable you may use either a base element e.g.  `div` or a class e.g. `.column`.
///
/// @require {Mixin} susy/container - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/last - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/span - which comes from Susy library http://susy.oddbird.net/
///
/// @example scss - Usage
///   .my-layout {
///       @include wk-layout-25-75-persist('.my-column');
///   }
///
/// @example css - Output
///   .my-layout {
///       max-width: 75rem;
///       margin-left: auto;
///       margin-right: auto;
///   }
///   .my-layout:after {
///       content: " ";
///       display: block;
///       clear: both;
///   }
///   .my-layout > .my-column {
///       width: 23.72881%;
///       float: left;
///       margin-right: 1.69492%;
///   }
///
///   .my-layout > .my-column:nth-child(2n) {
///       width: 74.57627%;
///       float: left;
///       margin-right: 1.69492%;
///       float: right;
///       margin-right: 0;
///   }
@mixin wk-layout-25-75-persist($child: '.wk-layout-item') {
    @include container;

    > #{$child} {
        @include span($wk-global-columns / 4 of $wk-global-columns);

        &:nth-child(2n) {
            @include span($wk-global-columns / 4 * 3 of $wk-global-columns);
            @include last;
        }
    }
}

/// 75% + 25% layout on breakpoints larger than mobile
///
/// @param {String} $child ['.wk-layout-item'] - A selector which will serve as the column name. `.wk-layout-item` is default selector. For this variable you may use either a base element e.g.  `div` or a class e.g. `.column`.
///
/// @require {Mixin} susy/container - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/last - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/span - which comes from Susy library http://susy.oddbird.net/
///
/// @example scss - Usage
///   .my-layout {
///       @include wk-layout-75-25('.my-column');
///   }
///
/// @example css - Output
///   .my-layout {
///       max-width: 75rem;
///       margin-left: auto;
///       margin-right: auto;
///   }
///   .my-layout:after {
///       content: " ";
///       display: block;
///       clear: both;
///   }
///   @media (min-width: 37.5rem) {
///       .my-layout > .my-column {
///           width: 74.57627%;
///           float: left;
///           margin-right: 1.69492%;
///       }
///
///       .my-layout > .my-column:nth-child(2n) {
///           width: 23.72881%;
///           float: left;
///           margin-right: 1.69492%;
///           float: right;
///           margin-right: 0;
///       }
///   }
@mixin wk-layout-75-25($child: '.wk-layout-item') {
    @include container;

    @include breakpoint($wk-target-tablet-desktop) {
        > #{$child} {
            @include span($wk-global-columns / 4 * 3 of $wk-global-columns);

            &:nth-child(2n) {
                @include span($wk-global-columns / 4 of $wk-global-columns);
                @include last;
            }
        }
    }
}

/// 75% + 25% layout on all breakpoints
///
/// @param {String} $child ['.wk-layout-item'] - A selector which will serve as the column name. `.wk-layout-item` is default selector. For this variable you may use either a base element e.g.  `div` or a class e.g. `.column`.
///
/// @require {Mixin} susy/container - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/last - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/span - which comes from Susy library http://susy.oddbird.net/
///
/// @example scss - Usage
///   .my-layout {
///       @include wk-layout-75-25-persist('.my-column');
///   }
///
/// @example css - Output
///   .my-layout {
///       max-width: 75rem;
///       margin-left: auto;
///       margin-right: auto;
///   }
///   .my-layout:after {
///       content: " ";
///       display: block;
///       clear: both;
///   }
///   .my-layout > .my-column {
///       width: 74.57627%;
///       float: left;
///       margin-right: 1.69492%;
///   }
///
///   .my-layout > .my-column:nth-child(2n) {
///       width: 23.72881%;
///       float: left;
///       margin-right: 1.69492%;
///       float: right;
///       margin-right: 0;
///   }
@mixin wk-layout-75-25-persist($child: '.wk-layout-item') {
    @include container;

    > #{$child} {
        @include span($wk-global-columns / 4 * 3 of $wk-global-columns);

        &:nth-child(2n) {
            @include span($wk-global-columns / 4 of $wk-global-columns);
            @include last;
        }
    }
}

/// 33% + 33% + 33% layout on breakpoints larger than mobile
///
/// @param {String} $child ['.wk-layout-item'] - A selector which will serve as the column name. `.wk-layout-item` is default selector. For this variable you may use either a base element e.g.  `div` or a class e.g. `.column`.
///
/// @require {Mixin} susy/container - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/last - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/span - which comes from Susy library http://susy.oddbird.net/
///
/// @example scss - Usage
///   .my-layout {
///       @include wk-layout-33-33-33('.my-column');
///   }
///
/// @example css - Output
///   .my-layout {
///       max-width: 75rem;
///       margin-left: auto;
///       margin-right: auto;
///   }
///   .my-layout:after {
///       content: " ";
///       display: block;
///       clear: both;
///   }
///   @media (min-width: 37.5rem) {
///       .my-layout > .my-column {
///           width: 32.20339%;
///           float: left;
///           margin-right: 1.69492%;
///       }
///
///       .my-layout > .my-column:nth-child(3n) {
///           float: right;
///           margin-right: 0;
///       }
///   }
@mixin wk-layout-33-33-33($child: '.wk-layout-item') {
    @include container;

    @include breakpoint($wk-target-tablet-desktop) {
        > #{$child} {
            @include span($wk-global-columns / 3 of $wk-global-columns);

            &:nth-child(3n) {
                @include last;
            }
        }
    }
}

/// 33% + 33% + 33% layout on all breakpoints
///
/// @param {String} $child ['.wk-layout-item'] - A selector which will serve as the column name. `.wk-layout-item` is default selector. For this variable you may use either a base element e.g.  `div` or a class e.g. `.column`.
///
/// @require {Mixin} susy/container - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/last - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/span - which comes from Susy library http://susy.oddbird.net/
///
/// @example scss - Usage
///   .my-layout {
///       @include wk-layout-33-33-33-persist('.my-column');
///   }
///
/// @example css - Output
///   .my-layout {
///       max-width: 75rem;
///       margin-left: auto;
///       margin-right: auto;
///   }
///   .my-layout:after {
///       content: " ";
///       display: block;
///       clear: both;
///   }
///   .my-layout > .my-column {
///       width: 32.20339%;
///       float: left;
///       margin-right: 1.69492%;
///   }
///
///   .my-layout > .my-column:nth-child(3n) {
///       float: right;
///       margin-right: 0;
///   }
@mixin wk-layout-33-33-33-persist($child: '.wk-layout-item') {
    @include container;

    > #{$child} {
        @include span($wk-global-columns / 3 of $wk-global-columns);

        &:nth-child(3n) {
            @include last;
        }
    }
}

/// 25% + 25% + 25% + 25% layout on breakpoints larger than mobile
///
/// @param {String} $child ['.wk-layout-item'] - A selector which will serve as the column name. `.wk-layout-item` is default selector. For this variable you may use either a base element e.g.  `div` or a class e.g. `.column`.
///
/// @require {Mixin} susy/container - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/last - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/span - which comes from Susy library http://susy.oddbird.net/
///
/// @example scss - Usage
///   .my-layout {
///       @include wk-layout-25-25-25-25('.my-column');
///   }
///
/// @example css - Output
///   .my-layout {
///       max-width: 75rem;
///       margin-left: auto;
///       margin-right: auto;
///   }
///   .my-layout:after {
///       content: " ";
///       display: block;
///       clear: both;
///   }
///   @media (min-width: 37.5rem) {
///       .my-layout > .my-column {
///           width: 23.72881%;
///           float: left;
///           margin-right: 1.69492%;
///       }
///
///       .my-layout > .my-column:nth-child(4n) {
///           float: right;
///           margin-right: 0;
///       }
///   }
@mixin wk-layout-25-25-25-25($child: '.wk-layout-item') {
    @include container;

    @include breakpoint($wk-target-tablet-desktop) {
        > #{$child} {
            @include span($wk-global-columns / 4 of $wk-global-columns);

            &:nth-child(4n) {
                @include last;
            }
        }
    }
}

/// 25% + 25% + 25% + 25% layout on all breakpoints
///
/// @param {String} $child ['.wk-layout-item'] - A selector which will serve as the column name. `.wk-layout-item` is default selector. For this variable you may use either a base element e.g.  `div` or a class e.g. `.column`.
///
/// @require {Mixin} susy/container - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/last - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} susy/span - which comes from Susy library http://susy.oddbird.net/
///
/// @example scss - Usage
///   .my-layout {
///       @include wk-layout-25-25-25-25-persist('.my-column');
///   }
///
/// @example css - Output
///   .my-layout {
///       max-width: 75rem;
///       margin-left: auto;
///       margin-right: auto;
///   }
///   .my-layout:after {
///       content: " ";
///       display: block;
///       clear: both;
///   }
///   .my-layout > .my-column {
///       width: 23.72881%;
///       float: left;
///       margin-right: 1.69492%;
///   }
///
///   .my-layout > .my-column:nth-child(4n) {
///       float: right;
///       margin-right: 0;
///   }
@mixin wk-layout-25-25-25-25-persist($child: '.wk-layout-item') {
    @include container;

    > #{$child} {
        @include span($wk-global-columns / 4 of $wk-global-columns);

        &:nth-child(4n) {
            @include last;
        }
    }
}

/// Pushes element to 25% from the left
///
/// @require {Mixin} susy/push - which comes from Susy library http://susy.oddbird.net/
///
/// @example scss - Usage
///   @include wk-layout-push-25;
@mixin wk-layout-push-25 {
    @include push($wk-global-columns / 4);
}

/// Pushes element to 33% from the left
///
/// @require {Mixin} susy/push - which comes from Susy library http://susy.oddbird.net/
///
/// @example scss - Usage
///   @include wk-layout-push-33;
@mixin wk-layout-push-33 {
    @include push($wk-global-columns / 3);
}

/// Small Centered Layout
///
/// @param {Unit} $mobile-max-breakpoint [$wk-mobile-max-breakpoint] - the smallest measurement for the tablet breakpoint for this layout, of which the layout width will be 75%.
///
/// @require {Mixin} susy/container - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} breakpoint-sass/breakpoint - from breakpoint-sass
///
/// @example scss - Usage
///   .my-section {
///     @include wk-layout-centered-small;
///   }
///
/// @example css - Output
///   .my-section {
///       max-width: 75rem;
///       margin-left: auto;
///       margin-right: auto;
///   }
///
///   .my-section:after {
///       content: " ";
///       display: block;
///       clear: both;
///   }
///
///   @media (min-width: 37.5rem) {
///       .my-section {
///           max-width: 28.125rem;
///       }
///   }
///

@mixin wk-layout-centered-small($mobile-max-breakpoint: $wk-mobile-max-breakpoint) {
    @include container;

    @include breakpoint($mobile-max-breakpoint) {
        max-width: $mobile-max-breakpoint * 3 / 4;
    }
}


/// Medium Centered Layout
///
/// @param {Unit} $mobile-max-breakpoint [$wk-mobile-max-breakpoint] - the smallest measurement for the tablet breakpoint for this layout, the form will be this width.
///
/// @require {Mixin} susy/container - which comes from Susy library http://susy.oddbird.net/
///
/// @example scss - Usage
///   .my-section {
///     @include wk-layout-centered-medium;
///   }
///
/// @example css - Output
///   .my-section {
///       max-width: 75rem;
///       margin-left: auto;
///       margin-right: auto;
///       max-width: 37.5rem;
///   }
///
///   .my-section:after {
///       content: " ";
///       display: block;
///       clear: both;
///   }
///

@mixin wk-layout-centered-medium($mobile-max-breakpoint: $wk-mobile-max-breakpoint) {
    @include container;

    max-width: $mobile-max-breakpoint;
}

/// Large Centered Layout
///
/// @param {Unit} $tablet-width [$wk-mobile-max-breakpoint] - the tablet width of this layout at the tablet breakpoint.
/// @param {List} $target-tablet [$wk-target-tablet] - the breakpoint query to target the tablet size.
/// @param {Unit} $desktop-width [$wk-tablet-max-breakpoint] - the desktop width of this layout at the tablet breakpoint.
/// @param {List} $target-desktop [$wk-target-desktop] - the breakpoint query to target the tablet size.
///
/// @require {Mixin} susy/container - which comes from Susy library http://susy.oddbird.net/
/// @require {Mixin} breakpoint-sass/breakpoint - from breakpoint-sass
///
/// @example scss - Usage
///   .my-section {
///     @include wk-layout-centered-large;
///   }
///
/// @example css - Output
///   .my-section {
///       max-width: 75rem;
///       margin-left: auto;
///       margin-right: auto;
///   }
///   .my-section:after {
///       content: " ";
///       display: block;
///       clear: both;
///   }
///   @media (min-width: 37.5rem) and (max-width: 65rem) {
///       .my-section {
///           max-width: 37.5rem;
///       }
///   }
///   @media (min-width: 65rem) {
///       .my-section {
///           max-width: 65rem;
///       }
///   }
@mixin wk-layout-centered-large($tablet-width: $wk-mobile-max-breakpoint, $target-tablet: $wk-target-tablet, $desktop-width: $wk-tablet-max-breakpoint, $target-desktop: $wk-target-desktop) {
    @include container;

    @include breakpoint($target-tablet) {
        max-width: $tablet-width;
    }

    @include breakpoint($target-desktop) {
        max-width: $desktop-width;
    }
}

/// Select children each `$num`.
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
/// @param {number} $num - id of the child
/// @author [Family.scss](https://lukyvj.github.io/family.scss/)
@mixin wk-each($num) {
    &:nth-child(#{$num}n) {
        @content;
    }
}

/// Creates a responsive grid for different breakpoints
/// @param {String} $args.child - Selector for grid items
/// @param {Number} $args.mobile-count [1] - Number of grid items for small screens
/// @param {Number} $args.tablet-count - Number of grid items for medium screens
/// @param {Number} $args.desktop-count - Number of grid items for large screens
/// @param {Boolean} $args.flex [true] - Use flexbox
/// @param {Number} $args.gutters [$susy.gutters] - Gutter size
/// @param {Unit} $args.target-mobile [$wk-target-mobile] - mobile breakpoint range
/// @param {Unit} $args.target-tablet [$wk-target-tablet] - tablet breakpoint range
/// @param {Unit} $args.target-desktop [$wk-target-desktop] -  desktop breakpoint range
/// @param {Unit} $args.total-columns [$wk-global-columns] - number of total columns in a row
@mixin wk-responsive-grid($args) {

    //defaults
    $flex: true;
    $gutters: map-get($susy, gutters); //global susy gutter by default
    $mobile-count: 1; //mobile is 1 column by default
    $target-mobile: $wk-target-mobile;
    $target-tablet: $wk-target-tablet;
    $target-desktop: $wk-target-desktop;
    $total-columns: $wk-global-columns;

    @if not(map-has-key($args, child)) {
        @error 'you must declare a `child` key selector in wk-responsive-grid()';
    }

    @if not(map-has-key($args, tablet-count)) {
        @error 'you must declare a `tablet-count` key for the number of columns on a medium screens (tablet) in wk-responsive-grid()';
    }

    @if not(map-has-key($args, desktop-count)) {
        @error 'you must declare a `desktop-count` key for the number of columns on a large screens (desktop) in wk-responsive-grid()';
    }

    //if no errors, set these local vars
    $child: map-get($args, child);
    $tablet-count: map-get($args, tablet-count);
    $desktop-count: map-get($args, desktop-count);

    //set optional overrides
    @if map-has-key($args, flex) {
        $flex: map-get($args, flex);
    }
    @if map-has-key($args, gutters) {
        $gutters: map-get($args, gutters);
    }
    @if map-has-key($args, total-columns) {
        $total-columns: map-get($args, total-columns);
    }
    @if map-has-key($args, mobile-count) {
        $mobile-count: map-get($args, mobile-count);
    }
    @if map-has-key($args, target-mobile) {
        $target-mobile: map-get($args, target-mobile);
    }
    @if map-has-key($args, target-tablet) {
        $target-tablet: map-get($args, target-tablet);
    }
    @if map-has-key($args, target-desktop) {
        $target-desktop: map-get($args, target-desktop);
    }

    $layout: (
        columns: $total-columns,
        gutters: $gutters
    );

    @if $flex {
        display: flex;
        flex-wrap: wrap;
    } @else {
        @include wk-clearfix;
    }

    > #{$child} {
        @if $flex {
            flex: 0 1 auto;
        }

        @include breakpoint($target-mobile) {
            @include span($total-columns / $mobile-count of $layout);

            @include wk-each($mobile-count) {
                margin-right: 0;
            }
        }

        @include breakpoint($target-tablet) {
            @include span($total-columns / $tablet-count of $layout);

            @include wk-each($tablet-count) {
                margin-right: 0;
            }
        }

        @include breakpoint($target-desktop) {
            @include span($total-columns / $desktop-count of $layout);

            @include wk-each($desktop-count) {
                margin-right: 0;
            }
        }
    }
}

/// Creates a min-height fallback where flexbox is not available for the wk-responsive-grid for different breakpoints
/// @param {String} $args.parent - Selector for parent group
/// @param {String} $args.child - Selector for grid items
/// @param {Number} $args.mobile-min-height - Min-height for the item on mobile
/// @param {Number} $args.tablet-min-height - Min-height for the item on tablet
/// @param {Number} $args.desktop-min-height - Min-height for the item on desktop
/// @param {Unit} $args.target-mobile [$wk-target-mobile] - mobile breakpoint range
/// @param {Unit} $args.target-tablet [$wk-target-tablet] - tablet breakpoint range
/// @param {Unit} $args.target-desktop [$wk-target-desktop] - desktop breakpoint range
@mixin wk-responsive-grid-fallback($args) {
    //defaults
    $target-mobile: $wk-target-mobile;
    $target-tablet: $wk-target-tablet;
    $target-desktop: $wk-target-desktop;
    $mobile-min-height: -1;

    @if not(map-has-key($args, parent)) {
        @error 'you must declare a `parent` key selector in wk-responsive-grid-fallback()';
    }
    @if not(map-has-key($args, child)) {
        @error 'you must declare a `child` key selector in wk-responsive-grid-fallback()';
    }
    @if not(map-has-key($args, tablet-min-height)) {
        @error 'you must declare a `tablet-min-height` key selector in wk-responsive-grid-fallback()';
    }
    @if not(map-has-key($args, desktop-min-height)) {
        @error 'you must declare a `desktop-min-height` key selector in wk-responsive-grid-fallback()';
    }

    //if no errors, set these local vars
    $child: map-get($args, child);
    $parent: map-get($args, parent);
    $tablet-min-height: map-get($args, tablet-min-height);
    $desktop-min-height: map-get($args, desktop-min-height);

    //optional overrides
    @if map-has-key($args, target-mobile) {
        $target-mobile: map-get($args, target-mobile);
    }
    @if map-has-key($args, target-tablet) {
        $target-tablet: map-get($args, target-tablet);
    }
    @if map-has-key($args, target-desktop) {
        $target-desktop: map-get($args, target-desktop);
    }
    @if map-has-key($args, mobile-min-height) {
        $mobile-min-height: map-get($args, mobile-min-height);
    }

    html {
        &.ie9 #{$parent},
        &.no-flexbox #{$parent},
        &.flexbox #{$parent}.wk-force-no-flexbox {
            @include wk-clearfix;

            display: block; //undo display:flex

            > #{$child} {
                flex: none;

                @if $mobile-min-height > -1 {
                    @include breakpoint($target-mobile) {
                        min-height: $mobile-min-height;
                    }
                }

                @include breakpoint($target-tablet) {
                    min-height: $tablet-min-height;
                }

                @include breakpoint($target-desktop) {
                    min-height: $desktop-min-height;
                }
            }
        }
    }

}

/// Give a block container horizontal padding only when smaller than the defined width as to not touch the window’s viewport edges
///
/// @param {Unit} $width [$wk-desktop-max-width]
/// @param {Unit} $padding [$wk-page-content-padding]
///
/// @require {Mixin} susy/container - from susy
/// @require {Mixin} breakpoint-sass/breakpoint - from breakpoint of course
/// @require {Variable} $wk-page-content-padding
/// @require {Variable} $wk-desktop-max-width
///
/// @example scss - Usage
///   .my-div {
///     @include wk-viewport-insulate(wk-rem-value(300px));
///   }
@mixin wk-viewport-insulate($width: $wk-desktop-max-width, $padding: $wk-page-content-padding) {
    @include container($width);

    padding-left: $padding;
    padding-right: $padding;

    @include breakpoint($width + (2 * $padding)) {
        padding-left: 0;
        padding-right: 0;
    }
}



/// Give a block container horizontal padding only when smaller than the maximum desktop breakpoint width. Use wk-viewport-insulate instead.
///
/// @param {Bool} $deprecated-transition [false]
/// @deprecated
///
/// @example scss - Usage
///   .my-div {
///     @include wk-page-content;
///   }
@mixin wk-page-content($deprecated-transition: false) {
    @include wk-viewport-insulate;
}

/// Convenient way to use a susy span with the default super grid layout
/// @param {Number} $cols - Number of columns to span
@mixin wk-span($cols, $total-cols: $wk-global-columns) {
    @include span($cols of (
            columns: $total-cols,
            gutters: 0
    ));
}

/// Convenient way to center an element that aligns with the super grid
/// @param {Number} $cols - Number of columns to span
@mixin wk-center-span ($cols) {
    margin-left: auto;
    margin-right: auto;
    max-width: $wk-global-max-width / ($wk-global-columns / $cols);
    width: span($cols of $wk-global-layout);
}


/// Convenient way to add static gutters to a layout item
@mixin wk-gutters {
    @include gutters($wk-global-gutters inside);
}

/// Super Grid - Creates a responsive grid with static gutters and optional breakpoints
/// @param {String} $args.child - Selector for grid items
/// @param {String} $args.grandchild - Selector for the children of the grid items
/// @param {Number} $args.mobile-count [1] - Number of grid items for small screens
/// @param {Number} $args.tablet-count [0] - Number of grid items for medium screens
/// @param {Number} $args.desktop-count [0] - Number of grid items for large screens
/// @param {Boolean} $args.flex [true] - Use flexbox
/// @param {Number} $args.gutters [$wk-global-gutters] - Gutter size to pass to susy gutters as padding (inside)
/// @param {Unit} $args.container-max-width [$wk-global-max-width] - Max width to pass to the susy container on the parent
/// @param {Unit} $args.target-mobile [$wk-target-mobile] - mobile breakpoint range
/// @param {Unit} $args.target-tablet [$wk-target-tablet] - tablet breakpoint range
/// @param {Unit} $args.target-desktop [$wk-target-desktop] -  desktop breakpoint range
/// @param {Unit} $args.total-columns [$wk-global-columns] - number of total columns in a row
@mixin wk-super-grid($args) {
    //defaults
    $flex: true;
    $container: true;
    $grandchild: false;
    $gutters: $wk-global-gutters; //32px
    $total-columns: $wk-global-columns; //12
    $target-mobile: $wk-target-mobile;
    $target-tablet: $wk-target-tablet;
    $target-desktop: $wk-target-desktop;
    $container-max-width: $wk-global-max-width; //1200px;
    $mobile-count: 1;
    $tablet-count: 0; //disabled tablet and desktop breakpoints by default
    $desktop-count: 0; //disabled tablet and desktop breakpoints by default

    @if not(map-has-key($args, child)) {
        @error 'you must declare a `child` key selector in new-nested-responsive-grid()';
    }

    //if no errors, set these local vars
    $child: map-get($args, child);

    //set optional overrides
    @if map-has-key($args, container) {
        $container: map-get($args, container);
    }
    @if map-has-key($args, grandchild) {
        $grandchild: map-get($args, grandchild);
    }
    @if map-has-key($args, flex) {
        $flex: map-get($args, flex);
    }
    @if map-has-key($args, container-max-width) {
        $container-max-width: map-get($args, container-max-width);
    }
    @if map-has-key($args, gutters) {
        $gutters: map-get($args, gutters);
    }
    @if map-has-key($args, total-columns) {
        $total-columns: map-get($args, total-columns);
    }
    @if map-has-key($args, mobile-count) {
        $mobile-count: map-get($args, mobile-count);
    }
    @if map-has-key($args, tablet-count) {
        $tablet-count: map-get($args, tablet-count);
    }
    @if map-has-key($args, desktop-count) {
        $desktop-count: map-get($args, desktop-count);
    }
    @if map-has-key($args, target-mobile) {
        $target-mobile: map-get($args, target-mobile);
    }
    @if map-has-key($args, target-tablet) {
        $target-tablet: map-get($args, target-tablet);
    }
    @if map-has-key($args, target-desktop) {
        $target-desktop: map-get($args, target-desktop);
    }

    $layout: (
        columns: $total-columns,
        gutters: 0 //columns have nothing between them!
    );

    @if $flex {
        display: flex;
        flex-wrap: wrap;
    } @else {
        @include wk-clearfix;
    }

    @if $container {
        @include container($container-max-width);
    } @else {
        @include wk-clearfix;
    }

    > #{$child} {
        @if $flex {
            flex: 0 1 auto;

            @if $grandchild {
                display: flex;
                flex-wrap: wrap;
                width: 100%;
            }
        } @else {
            @include wk-clearfix;
        }

        @if ($gutters > 0) {
            @include gutters($gutters inside); //split the 32px gutter to 16px horizontally
        }

        //if user has specified how many per the default breakpoints, add those breakpoints
        @if ($tablet-count > 0 and $desktop-count > 0) {
            @include breakpoint($target-mobile) {
                @include span($total-columns / $mobile-count of $layout);
            }

            @include breakpoint($target-tablet) {
                @include span($total-columns / $tablet-count of $layout);
            }

            @include breakpoint($target-desktop) {
                @include span($total-columns / $desktop-count of $layout);
            }
        }

        @if $grandchild {
            > #{$grandchild} {
                @if not($tablet-count > 0 and $desktop-count > 0) {
                    width: 100%;
                }

                @if $flex {
                    flex: 0 1 auto;
                }
            }
        }
    }
}

/// Compensate for nested gutter padding with a negative margin
/// @param {Number} $multiplier [1] - Number of nested gutters to bust out from
/// @param {Unit} $half-gutter [$wk-global-gutters/2] - Measurement of a gutter to make as negative margin
@mixin wk-break-gutter($multiplier: 1, $half-gutter: $wk-global-gutters / 2) {
    margin-left: $half-gutter * $multiplier * -1;
    margin-right: $half-gutter * $multiplier * -1;
}

