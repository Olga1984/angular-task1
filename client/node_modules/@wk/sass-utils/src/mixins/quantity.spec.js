'use strict';

let path = require('path');
let Sassaby = require('sassaby');

describe('general mixins', () => {
    let mixin;
    let file = path.resolve('src/mixins/_quantity.scss');
    let sb = new Sassaby(file);

    describe('wk-quantity-query', () =>  {
        describe('equal', () =>  {
            beforeEach(() => mixin = sb.standaloneMixin('wk-quantity-query').calledWithBlockAndArgs('color: red;', 3, 'equal'));

            it('nth', () => mixin.createsSelector(':nth-last-child(3):first-child'));
            it('sibling', () => mixin.createsSelector(':nth-last-child(3):first-child ~ *'));
        });

        describe('greater', () =>  {
            beforeEach(() => mixin = sb.standaloneMixin('wk-quantity-query').calledWithBlockAndArgs('color: red;', 3, 'greater'));

            it('nth', () => mixin.createsSelector(':nth-last-child(n+3):first-child'));
            it('sibling', () => mixin.createsSelector(':nth-last-child(n+3):first-child ~ *'));
        });

        describe('less', () =>  {
            beforeEach(() => mixin = sb.standaloneMixin('wk-quantity-query').calledWithBlockAndArgs('color: red;', 3, 'less'));

            it('nth', () => mixin.createsSelector(':nth-last-child(-n+3):first-child'));
            it('sibling', () => mixin.createsSelector(':nth-last-child(-n+3):first-child ~ *'));
        });
    });

    describe('wk-quantity-query aliases', () =>  {
        describe('equal', () =>  {
            beforeEach(() => mixin = sb.standaloneMixin('wk-qq-equal').calledWithBlockAndArgs('color: red;', 3));

            it('nth', () => mixin.createsSelector(':nth-last-child(3):first-child'));
            it('sibling', () => mixin.createsSelector(':nth-last-child(3):first-child ~ *'));
        });

        describe('greater', () =>  {
            beforeEach(() => mixin = sb.standaloneMixin('wk-qq-greater').calledWithBlockAndArgs('color: red;', 3));

            it('nth', () => mixin.createsSelector(':nth-last-child(n+3):first-child'));
            it('sibling', () => mixin.createsSelector(':nth-last-child(n+3):first-child ~ *'));
        });

        describe('less', () =>  {
            beforeEach(() => mixin = sb.standaloneMixin('wk-qq-less').calledWithBlockAndArgs('color: red;', 3));

            it('nth', () => mixin.createsSelector(':nth-last-child(-n+3):first-child'));
            it('sibling', () => mixin.createsSelector(':nth-last-child(-n+3):first-child ~ *'));
        });
    });

    describe('row selectors', () =>  {
        describe('wk-first-row', () =>  {
            beforeEach(() => mixin = sb.standaloneMixin('wk-first-row').calledWithBlockAndArgs('color: red;', 3));

            it('nth', () => mixin.createsSelector(':nth-child(-n+3)'));
        });

        describe('wk-last-full-row', () =>  {
            beforeEach(() => mixin = sb.standaloneMixin('wk-last-full-row').calledWithBlockAndArgs('color: red;', 3));

            it('nth', () => mixin.createsSelector(':nth-last-child(-n+3)'));
        });

        describe('wk-last-row', () =>  {
            beforeEach(() => mixin = sb.standaloneMixin('wk-last-row').calledWithBlockAndArgs('color: red;', 3, 'li'));

            it('nth', () => mixin.createsSelector(':nth-child(3n+1):nth-last-child(-n+3)'));
            it('sibling', () => mixin.createsSelector(':nth-child(3n+1):nth-last-child(-n+3) ~ li'));
        });
    });
});
