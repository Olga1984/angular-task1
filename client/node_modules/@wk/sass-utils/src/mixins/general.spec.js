'use strict';

let path = require('path');
let Sassaby = require('sassaby');

describe('general mixins', () => {
    let mixin;
    let file = path.resolve('src/mixins/_general.scss');
    let sb = new Sassaby(file, {
        variables: {
            'minor-second': 1,
            'wk-rem-fallback': true,
            'wk-rem-px-only': true,
            'wk-transition-property': 'background',
            'wk-transition-function': 'ease',
            'wk-transition-duration': '1s'
        }
    });

    describe('wk-shown', () =>  {
        beforeEach(() => mixin = sb.includedMixin('wk-shown'));

        describe('declares property', () =>  {
            it('display', () => mixin
            .called()
            .declares('display', 'block'));
        });
    });


    describe('wk-hidden', () =>  {
        beforeEach(() => mixin = sb.includedMixin('wk-hidden'));

        describe('declares property', () =>  {
            it('display', () => mixin
            .called()
            .declares('display', 'none'));
        });
    });

    describe('wk-text-overflow', () =>  {
        let mixin = sb.includedMixin('wk-text-overflow').called();

        describe('declares property', () =>  {
            it('display', () => mixin.declares('display', 'block'));
            it('text-overflow', () => mixin.declares('text-overflow', 'ellipsis'));
            it('white-space', () => mixin.declares('white-space', 'nowrap'));
            it('overflow', () => mixin.declares('overflow', 'hidden'));
        });
    });

    describe('wk-hide-text', () =>  {
        let mixin = sb.includedMixin('wk-hide-text').called();

        describe('declares property', () =>  {
            it('background-color', () => mixin.declares('background-color', 'transparent'));
            it('border', () => mixin.declares('border', '0'));
            it('color', () => mixin.declares('color', 'transparent'));
            it('font', () => mixin.declares('font', '0 / 0 a'));
            it('text-shadow', () => mixin.declares('text-shadow', 'none'));
        });
    });

    describe('wk-clearfix', () =>  {
        describe('declares property', () =>  {
            let mixin = sb.includedMixin('wk-clearfix').called();

            it('clear', () => mixin.declares('clear', 'both'));
            it('content', () => mixin.declares('content', ' '));
            it('display', () => mixin.declares('display', 'table'));
        });

        describe('creates selector', () =>  {
            let mixin = sb.standaloneMixin('wk-clearfix').called();
            it('::after', () => mixin.createsSelector('::after'));
        });
    });

    describe('wk-inputs', () =>  {
        beforeEach(() => mixin = sb.standaloneMixin('wk-inputs'));

        describe('outputs given content', () =>  {
            it('.wk-input', () => mixin
            .calledWithBlock('.test { color: red;}')
            .declares('color', 'red'));
        });

        describe('creates selector', () =>  {
            it('.wk-input', () => mixin
                .calledWithBlock('.test { color: red;}')
                .createsSelector('.wk-input .test'));

            it('input:not', () => mixin
                .calledWithBlock('.test { color: red;}')
                .createsSelector('input:not([type=\'radio\']):not([type=\'checkbox\']) .test'));
        });
    });

    describe('wk-radio-checkbox', () =>  {
        let mixin = sb.standaloneMixin('wk-radio-checkbox').calledWithBlock('.test { color: red;}');

        describe('outputs given content', () =>  {
            it('.wk-input', () => mixin.declares('color', 'red'));
        });

        describe('creates selector', () =>  {
            it('type radio', () => mixin.createsSelector('input[type=\'radio\'] .test'));
            it('type checkbox', () => mixin.createsSelector('input[type=\'checkbox\'] .test'));
            it('.wk-radio', () => mixin.createsSelector('.wk-radio .test'));
            it('.wk-checkbox', () => mixin.createsSelector('.wk-checkbox .test'));
        });
    });


    describe('wk-unstyle-list', () =>  {
        let mixin = sb.includedMixin('wk-unstyle-list').called();

        describe('declares property', () =>  {
            it('list-style', () => mixin.declares('list-style', 'none'));
            it('margin', () => mixin.declares('margin', 0));
            it('padding', () => mixin.declares('padding', 0));
            it('display', () => sb.includedMixin('wk-unstyle-list')
                .calledWithArgs(true)
                .declares('display', 'block')
            );
        });
    });

    describe('wk-transition', () =>  {
        describe('declares property', () =>  {
        beforeEach(() => mixin = sb.includedMixin('wk-transition'));

            it('transition', () => mixin
                .called()
                .declares('transition', 'background 1s ease')
            );

            it('transition, called with custom arguments', () => mixin
                .calledWithArgs('height', '2s', 'linear')
                .declares('transition', 'height 2s linear')
            );
        });
    });

});
