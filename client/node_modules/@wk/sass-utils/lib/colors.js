const rgba = require('hex-rgba');
const colorsVars = require('./../vars/colors.common');
const flatten = require('lodash.flatten');
const colorable = require('colorable');
const { keys, assign } = Object;

function extract(set, type) {
    return flatten(keys(set).map(color =>
        keys(set[color]).map(variation => getVariationDetails({set, type, color, variation}))
    ));
}

/**
 * Returns primary color variations
 * @returns {Array <Object>} Variations
 */
function getPrimary() {
    return extract(colorsVars.wkPrimaryColors, 'primary');
}

/**
 * Returns secondary color variations
 * @returns {Array <Object>} Variations
 */
function getSecondary() {
    return extract(colorsVars.wkSecondaryColors, 'secondary');
}

/**
 * Returns highlight colors
 * @returns {Array <Object>} Variations
 */
function getHighlight() {
    return extract(colorsVars.wkHighlightColors, 'highlight');
}

/**
 * Returns base colors
 * @returns {Array <Object>} Variations
 */
function getBaseColors() {
    return [].concat(getPrimary(), getSecondary())
        .filter(color => color.variation === 'base');
}

function getColorName (type, color, variation) {
    const variationName = (variation === 'base') ? '' : `-${variation}`;
    return `${type}-${color.slice(2).toLowerCase()}${variationName}`;
}

function getVariationDetails({set, type, color, variation}) {
    const name = getColorName(type, color, variation);
    const hex = normalizeHex(set[color][variation]);
    return {
        color,
        rgba: rgba(hex),
        variation,
        hex,
        variable: `$wk-${name}`,
        name
    }
}

/**
 * Groups variations by color name
 * @param {Array<Objects>} arr Array of color variations
 */
function groupByColor(arr) {
    return arr.reduce((acc, variation) => {
        const color = variation.color.slice(2).toLowerCase();
        if (!acc[color]) {
            acc[color] = [];
        }
        acc[color].push(variation);
        return acc;
    }, {});
}

function getA11YCombitations(...colors) {
    const allColorVariations  = [].concat(...colors);
    const hexValues = allColorVariations.map(x => x.hex);
    const options = {
        compact: true,
        threshold: 4.5 // target only AAA and AA compatibility
    }

    const colorsCombinations = colorable(hexValues, options);
    const hexMap = getHexMap(getPrimary(), getSecondary(), getHighlight());

    colorsCombinations.map(x => {
        x.combinations.map(c => assign(c, hexMap.get(c.hex)))
        return x;
    });

    return (hex) => flatten(colorsCombinations
        .filter(x => x.hex === hex)
        .reduce((arr, x) => {
            arr.push(x.combinations)
            return arr;
        }, []))
}

function normalizeHex(hex) {
    const value = (hex.length === 4) ? `#${hex.replace('#', '').split('').map((item) => item.repeat(2)).join('')}` : hex;
    return value.toUpperCase();
}

function getHexMap(...colors) {
    const map = new Map();
    [].concat(...colors).forEach(v => {
        map.set(normalizeHex(v.hex), v)
    });
    return map;
}

const getCombo = getA11YCombitations(getPrimary(), getSecondary(), getHighlight());

function getCombinations(variation) {
    variation.combinations = getCombo(variation.hex);
    return variation;
}

function getColorVars(){
    return {
        primaryColors: groupByColor(getPrimary().map(getCombinations)),
        secondaryColors: groupByColor(getSecondary().map(getCombinations)),
        highlightColors: groupByColor(getHighlight().map(getCombinations)),
        baseColors: groupByColor(getBaseColors())
    }
}

module.exports = {
    getPrimary: () => getPrimary().map(getCombinations),
    getSecondary: () => getSecondary().map(getCombinations),
    getHighlight: () => getHighlight().map(getCombinations),
    getBaseColors,
    groupByColor,
    getColorVars
}
