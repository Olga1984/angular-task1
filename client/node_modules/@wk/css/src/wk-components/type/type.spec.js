'use strict';

let path = require('path');
let Sassaby = require('sassaby');
let sassUtilsDependencies = require('@wk/sass-utils/config').dependencyMap;

describe('type mixin', () => {
    let mixin;
    let file = path.resolve('src/wk-components/type/_type.mixins.scss');
    let sb = new Sassaby(file, {
        variables: {
            'minor-second': 1,
            'wk-state-info-link-color': '#CCC',
            'wk-state-success-text-color': '#CCC',
            'wk-state-danger-link-color': '#CCC'
        },
        dependencies: sassUtilsDependencies.concat([
            'src/wk-components/type/_type.variables.scss'
        ])
    });

    describe('mixin wk-selection', () =>  {
        describe('declares property', () =>  {
            let mixin = sb.includedMixin('wk-selection').calledWithBlock('background-color: red');

            it('two properties', () => mixin.hasNumDeclarations(2));
            it('background-color', () => mixin.declares('background-color', 'red'));
        });

        describe('creates selector', () =>  {
            let mixin = sb.standaloneMixin('wk-selection').calledWithBlock('background-color: red');

            it('::-moz-selection', () => mixin.createsSelector('::-moz-selection'));
            it('::selection', () => mixin.createsSelector('::selection'));
        });
    });

    describe('wk-link', () =>  {
        let mixin = sb.includedMixin('wk-link').called();

        describe('declares property', () =>  {
            it('two properties', () => mixin.hasNumDeclarations(4));
            it('cursor', () => mixin.declares('cursor', 'pointer'));
            it('text-decoration', () => mixin.declares('text-decoration', 'none'));
            it('color', () => mixin.declares('color', '#007ac3'));
        });
    });

    describe('wk-headings', () =>  {
        let mixin = sb.standaloneMixin('wk-headings').calledWithBlock('color: red;');

        describe('declares property', () =>  {
            it('two properties', () => mixin.hasNumDeclarations(1));
        });

        describe('creates selector', () =>  {
            Array(6)
                .fill(0)
                .forEach((n, i) => {
                    let x = i + 1;

                    it('h' + x, () => mixin.createsSelector('h' + x));
                    it('.wk-h' + x, () => mixin.createsSelector('h' + x));
                });
        });
    });
});
