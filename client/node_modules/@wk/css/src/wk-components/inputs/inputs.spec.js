'use strict';

let path = require('path');
let Sassaby = require('sassaby');
let sassUtilsDependencies = require('@wk/sass-utils/config').dependencyMap;

describe('input mixins', () => {
    let file = path.resolve('src/wk-components/inputs/_inputs.mixins.scss');
    let sb = new Sassaby(file, {
        variables: {
            'minor-second': 1,
            'wk-font-scale': '(base: 16px)',
            'wk-state-info-link-color': '#CCC',
            'wk-state-success-text-color': '#CCC',
            'wk-state-danger-link-color': '#CCC'
        },
        dependencies: sassUtilsDependencies.concat([
            'src/wk-components/inputs/_inputs.variables.scss'
        ])
    });

    describe('wk-text-input-base', () => {
        describe('declares property', () =>  {
            let mixin = sb.includedMixin('wk-text-input-base').called();

            it('16 properties', () => mixin.hasNumDeclarations(18));
            it('appearance', () => mixin.declares('appearance', 'none'));
            it('background-color', () => mixin.declares('background-color', '#fff'));
            it('border', () => mixin.declares('border', '1px solid #dadada'));
            it('border-radius', () => mixin.declares('border-radius', 0));
            it('color', () => mixin.declares('color', '#474747'));
            it('font-family', () => mixin.declares('font-family', 'Helvetica Neue,Helvetica,Roboto,Arial,sans-serif'));
            it('font-size', () => mixin.declares('font-size', '16px'));
            it('height', () => mixin.declares('height', '3rem'));
            it('line-height', () => mixin.declares('line-height', '1.5'));
            it('padding', () => mixin.declares('padding', '.6875rem 1rem'));
            it('width', () => mixin.declares('width', '100%'));
        });

        describe('creates selector', () =>  {
            let mixin = sb.standaloneMixin('wk-text-input-base').called();

            it(':hover', () => mixin.createsSelector(':hover'));
            it(':focus', () => mixin.createsSelector(':focus'));
            it(':hover:focus', () => mixin.createsSelector(':hover:focus'));
        });
    });

    describe('wk-input-placeholder', () => {
        let mixin = sb.standaloneMixin('wk-input-placeholder').calledWithBlock('color: red;');

        describe('declares property', () =>  {
            it('by given content', () => mixin.declares('color', 'red'));
        });

        describe('creates selector', () =>  {
            it(':-moz-placeholder', () => mixin.createsSelector(':-moz-placeholder'));
            it('::-moz-placeholder', () => mixin.createsSelector('::-moz-placeholder'));
            it(':-ms-input-placeholder', () => mixin.createsSelector(':-ms-input-placeholder'));
            it(':-ms-input-placeholder', () => mixin.createsSelector(':-ms-input-placeholder'));
            it('::-webkit-input-placeholder', () => mixin.createsSelector('::-webkit-input-placeholder'));
        });
    });
});
