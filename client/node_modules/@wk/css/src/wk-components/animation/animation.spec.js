'use strict';

let path = require('path');
let Sassaby = require('sassaby');
let sassUtilsDependencies = require('@wk/sass-utils/config').dependencyMap;

describe('animations', () => {
    let mixin;
    let file = path.resolve('src/wk-components/animation/_animation.mixins.scss');
    let sb = new Sassaby(file, {
        variables: {
            'minor-second': 1,
            'wk-alert-link-color': '#000',
        },
        dependencies: sassUtilsDependencies.concat([
            'src/wk-components/type/_type.mixins.scss',
            'src/wk-lib/_variables.scss'
        ])
    });

    describe('mixin wk-spin', () =>  {
        beforeEach(() => mixin = sb.includedMixin('wk-spin'));

        describe('declares', () =>  {
            it('two properties when $include-keyframs is false', () => mixin
                .calledWithArgs()
                .hasNumDeclarations(2)
            );
        });

        describe('calls mixin', () =>  {
            it('wk-keyframes when $include-keyframes is true', () => mixin
                .calledWithArgs(true)
                .calls('wk-keyframes-spin')
            );

            it('wk-keyframes unless $include-keyframes is false', () => mixin
                .calledWithArgs()
                .doesNotCall('wk-keyframes-spin')
            );
        });
    });

    describe('mixin wk-keyframes-spin', () =>  {
        let mixin = sb.includedMixin('wk-keyframes-spin');

        describe('calls mixin', () =>  {
            it('wk-keyframes', () => mixin.called().calls('wk-keyframes(spin)'));
        });
    });

    describe('mixin wk-keyframes', () =>  {
        let mixin = sb.includedMixin('wk-keyframes').calledWithArgs('spin');

        describe('calls mixin', () =>  {
            it('wk-exports', () => mixin.calls('wk-exports("keyframes-spin")'));
        });
    });
});
