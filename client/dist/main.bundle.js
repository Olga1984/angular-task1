!function o(a,s,u){function c(t,e){if(!s[t]){if(!a[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var i=s[t]={exports:{}};a[t][0].call(i.exports,function(e){return c(a[t][1][e]||e)},i,i.exports,o,a,s,u)}return s[t].exports}for(var l="function"==typeof require&&require,e=0;e<u.length;e++)c(u[e]);return c}({1:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("templates",[]).run(["$templateCache",function(e){e.put("index.html",'<!DOCTYPE html>\n\x3c!--[if lt IE 9]><html class="ie" lang="en" ng-app="core"><![endif]--\x3e\x3c!--[if IE 9]><html class="ie ie9" lang="en" ng-app="core"><![endif]--\x3e\x3c!--[if (gt IE 9)|!(IE)]>\x3c!--\x3e\n<html lang="en" ng-app="core">\n\x3c!--<![endif]--\x3e\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <meta http-equiv="X-UA-Compatible" content="ie=edge">\n    <base href="/">\n    <title>Angular Task</title>\n    \x3c!-- inject:css --\x3e\n    \x3c!-- endinject --\x3e\n    \x3c!-- inject:js --\x3e\n    \x3c!-- endinject --\x3e\n</head>\n<body>\n    <swt-app></swt-app>\n</body>\n</html>\n'),e.put("app.html",'<div class="app">\n    <swt-header></swt-header>\n    <div class="content-view">\n        <ui-view></ui-view>\n    </div>\n    <swt-footer></swt-footer>\n</div>\n'),e.put("home.html",'<div class="homepage">\n    <swt-searchbar></swt-searchbar>\n    <swt-popular-documents></swt-popular-documents>\n</div>\n'),e.put("searchPage.html",'<div class="search-page">\n    <div class="filter-wrapper">\n        <swt-filter-panel></swt-filter-panel>\n    </div>\n    <div class="search-content">\n        <swt-searchbar></swt-searchbar>\n        <h4 translate="TOTAL_RESULTS" class="search-count"></h4>\n        <swt-search-results></swt-search-results>\n    </div>\n</div>\n'),e.put("translate.html",'<div>\n    <button  ng-class="{ button__active: translateCtrl.selectedLanguage === \'en\' }"  ng-click="translateCtrl.changeLanguage(\'en\')" translate="BUTTON_LANG_EN">english</button>\n    <button ng-class="{ button__active: translateCtrl.selectedLanguage === \'de\' }"  ng-click="translateCtrl.changeLanguage(\'de\')" translate="BUTTON_LANG_DE">german</button>\n    <button ng-class="{ button__active: translateCtrl.selectedLanguage === \'es\' }"  ng-click="translateCtrl.changeLanguage(\'es\')" translate="BUTTON_LANG_ES">spanish</button>\n</div>\n\n'),e.put("homeRoute.html","<swt-home></swt-home>\n"),e.put("searchRoute.html","<swt-search-page></swt-search-page>\n"),e.put("popularDocuments.html",'<div class="popular">\n    <header class="popular-header">\n        <h2>Most popular documents</h2>\n    </header>\n    <div class="popular-docs">\n        <div class="popular-article" ng-repeat="item in popular.documents">\n            <swt-document document="item" headline="false"></swt-document>\n        </div>\n    </div>\n</div>\n'),e.put("document.html",'<section class="document">\n    <header class="document-header" ng-class="{ none: showHeadline == \'false\' }">\n        <h3>\n            {{ document.value.headline }}\n        </h3>\n    </header>\n    <article class="document-text">\n        {{ document.value.text }}\n    </article>\n</section>\n\n'),e.put("footer.html",'<footer class="page-footer">\n    <div class="footer-copyright"> Â©\n        <a href="" target="_blank">copyright</a>.\n    </div>\n    <div class="footer-container">\n        <div class=""></div>\n    </div>\n</footer>\n'),e.put("header.html",'<header class="header">\n    <div class="logo-language-section">\n        <img class="logo" src="" alt="logo">\n        <swt-translate></swt-translate>\n    </div>\n    <swt-hamburger-menu></swt-hamburger-menu>\n</header>\n'),e.put("searchbar.html",'<form class="search-bar" ng-submit="searchbar.submitForm($event)" >\n    <input class="site-search"\n            ng-model="searchbar.input"\n            type="text" \n            id="site-search" \n            placeholder="Search through site content">\n    <button class="search-btn" type="submit">\n        <svg  height="30" version="1.1" viewBox="0 0 22 22" width="30"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path></svg>\n    </button>\n</form> '),e.put("filterPanel.html",'<ul class="filter">\n    <li ng-repeat="item in filter.filteredArticles" class="filter-item">\n     {{item.filteredCategoryName }} ({{ item.filteredGroup.length }})\n    </li>\n</ul>\n'),e.put("searchResults.html",'<div>\n    <div ng-repeat="item in search.results">\n        <swt-document document="item"></swt-document>\n    </div>\n    <div class="page-buttons">\n        <button \n            class="page-button"\n            ng-class="{ button__active: search.results === value }" \n            ng-repeat="(key, value) in search.paginatedDocuments" \n            ng-click="search.changePage(key)"\n        >\n            {{ key + 1 }}\n        </button>\n    </div>\n</div>\n'),e.put("hamburgerMenu.html",'<div class="hamburger">\n    <div class="icon-container" ng-click="hamburger.toggleMenu()">\n        <span class="icon" ng-class="{ close: hamburger.isActive == true }"></span>\n    </div>\n    <div class="menu" ng-class="{ folded: hamburger.isActive == true }">\n        <nav class="navigation-list">\n            <ul>\n                <li ng-repeat="link in hamburger.navList">\n                    <a class="nav-link" ui-sref="{{link.state}}" ng-click="hamburger.toggleMenu()">{{ link.text }}</a>\n                </li>\n            </ul>\n        </nav>\n    </div>\n</div>\n')}]);n.default=i},{angular:87}],2:[function(e,t,n){var r,i;r=this,i=function(t,e,S){"use strict";var n=angular,x=e&&e.module?e:n;function r(){var n=null;return function(e,t){return n=n||S.services.$injector.get("$templateFactory"),[new E(e,t,n)]}}var s=function(e,n){return e.reduce(function(e,t){return e||S.isDefined(n[t])},!1)};function i(r){if(!r.parent)return{};var i=["component","bindings","componentProvider"],o=["templateProvider","templateUrl","template","notify","async"].concat(["controller","controllerProvider","controllerAs","resolveAs"]),e=i.concat(o);if(S.isDefined(r.views)&&s(e,r))throw new Error("State '"+r.name+"' has a 'views' object. It cannot also have \"view properties\" at the state level.  Move the following properties into a view (in the 'views' object):  "+e.filter(function(e){return S.isDefined(r[e])}).join(", "));var a={},t=r.views||{$default:S.pick(r,e)};return S.forEach(t,function(e,t){if(t=t||"$default",S.isString(e)&&(e={component:e}),e=S.extend({},e),s(i,e)&&s(o,e))throw new Error("Cannot combine: "+i.join("|")+" with: "+o.join("|")+" in stateview: '"+t+"@"+r.name+"'");e.resolveAs=e.resolveAs||"$resolve",e.$type="ng1",e.$context=r,e.$name=t;var n=S.ViewService.normalizeUIViewTarget(e.$context,e.$name);e.$uiViewName=n.uiViewName,e.$uiViewContextAnchor=n.uiViewContextAnchor,a[t]=e}),a}var o=0,E=function(){function e(e,t,n){var r=this;this.path=e,this.viewDecl=t,this.factory=n,this.$id=o++,this.loaded=!1,this.getTemplate=function(e,t){return r.component?r.factory.makeComponentTemplate(e,t,r.component,r.viewDecl.bindings):r.template}}return e.prototype.load=function(){var t=this,e=S.services.$q,n=new S.ResolveContext(this.path),r=this.path.reduce(function(e,t){return S.extend(e,t.paramValues)},{}),i={template:e.when(this.factory.fromConfig(this.viewDecl,r,n)),controller:e.when(this.getController(n))};return e.all(i).then(function(e){return S.trace.traceViewServiceEvent("Loaded",t),t.controller=e.controller,S.extend(t,e.template),t})},e.prototype.getController=function(e){var t=this.viewDecl.controllerProvider;if(!S.isInjectable(t))return this.viewDecl.controller;var n=S.services.$injector.annotate(t),r=S.isArray(t)?S.tail(t):t;return new S.Resolvable("",r,n).get(e)},e}(),a=function(){function e(){var r=this;this._useHttp=x.version.minor<3,this.$get=["$http","$templateCache","$injector",function(e,t,n){return r.$templateRequest=n.has&&n.has("$templateRequest")&&n.get("$templateRequest"),r.$http=e,r.$templateCache=t,r}]}return e.prototype.useHttpService=function(e){this._useHttp=e},e.prototype.fromConfig=function(e,t,n){var r=function(e){return S.services.$q.when(e).then(function(e){return{template:e}})},i=function(e){return S.services.$q.when(e).then(function(e){return{component:e}})};return S.isDefined(e.template)?r(this.fromString(e.template,t)):S.isDefined(e.templateUrl)?r(this.fromUrl(e.templateUrl,t)):S.isDefined(e.templateProvider)?r(this.fromProvider(e.templateProvider,t,n)):S.isDefined(e.component)?i(e.component):S.isDefined(e.componentProvider)?i(this.fromComponentProvider(e.componentProvider,t,n)):r("<ui-view></ui-view>")},e.prototype.fromString=function(e,t){return S.isFunction(e)?e(t):e},e.prototype.fromUrl=function(e,t){return S.isFunction(e)&&(e=e(t)),null==e?null:this._useHttp?this.$http.get(e,{cache:this.$templateCache,headers:{Accept:"text/html"}}).then(function(e){return e.data}):this.$templateRequest(e)},e.prototype.fromProvider=function(e,t,n){var r=S.services.$injector.annotate(e),i=S.isArray(e)?S.tail(e):e;return new S.Resolvable("",i,r).get(n)},e.prototype.fromComponentProvider=function(e,t,n){var r=S.services.$injector.annotate(e),i=S.isArray(e)?S.tail(e):e;return new S.Resolvable("",i,r).get(n)},e.prototype.makeComponentTemplate=function(u,c,e,l){l=l||{};var f=3<=x.version.minor?"::":"",p=function(e){var t=S.kebobString(e);return/^(x|data)-/.exec(t)?"x-"+t:t},t=function(e){var t=S.services.$injector.get(e+"Directive");if(!t||!t.length)throw new Error("Unable to find component named '"+e+"'");return t.map(h).reduce(S.unnestR,[])}(e).map(function(e){var t=e.name,n=e.type,r=p(t);if(u.attr(r)&&!l[t])return r+"='"+u.attr(r)+"'";var i=l[t]||t;if("@"===n)return r+"='{{"+f+"$resolve."+i+"}}'";if("&"!==n)return r+"='"+f+"$resolve."+i+"'";var o=c.getResolvable(i),a=o&&o.data,s=a&&S.services.$injector.annotate(a)||[];return r+"='$resolve."+i+(S.isArray(a)?"["+(a.length-1)+"]":"")+"("+s.join(",")+")'"}).join(" "),n=p(e);return"<"+n+" "+t+"></"+n+">"},e}();var h=function(e){return S.isObject(e.bindToController)?u(e.bindToController):u(e.scope)},u=function(t){return Object.keys(t||{}).map(function(e){return[e,/^([=<@&])[?]?(.*)/.exec(t[e])]}).filter(function(e){return S.isDefined(e)&&S.isArray(e[1])}).map(function(e){return{name:e[1][2]||e[0],type:e[1][1]}})},c=function(){function n(e,t){this.stateRegistry=e,this.stateService=t,S.createProxyFunctions(S.val(n.prototype),this,S.val(this))}return n.prototype.decorator=function(e,t){return this.stateRegistry.decorator(e,t)||this},n.prototype.state=function(e,t){return S.isObject(e)?t=e:t.name=e,this.stateRegistry.register(t),this},n.prototype.onInvalid=function(e){return this.stateService.onInvalid(e)},n}(),l=function(n){return function(e,t){var i=e[n],o="onExit"===n?"from":"to";return i?function(e,t){var n=new S.ResolveContext(e.treeChanges(o)).subContext(t.$$state()),r=S.extend(R(n),{$state$:t,$transition$:e});return S.services.$injector.invoke(i,this,r)}:void 0}},f=function(){function e(e){this._urlListeners=[],this.$locationProvider=e;var t=S.val(e);S.createProxyFunctions(t,this,t,["hashPrefix"])}return e.monkeyPatchPathParameterType=function(e){var t=e.urlMatcherFactory.type("path");t.encode=function(e){return null!=e?e.toString().replace(/(~|\/)/g,function(e){return{"~":"~~","/":"~2F"}[e]}):e},t.decode=function(e){return null!=e?e.toString().replace(/(~~|~2F)/g,function(e){return{"~~":"~","~2F":"/"}[e]}):e}},e.prototype.dispose=function(){},e.prototype.onChange=function(e){var t=this;return this._urlListeners.push(e),function(){return S.removeFrom(t._urlListeners)(e)}},e.prototype.html5Mode=function(){var e=this.$locationProvider.html5Mode();return(e=S.isObject(e)?e.enabled:e)&&this.$sniffer.history},e.prototype.baseHref=function(){return this._baseHref||(this._baseHref=this.$browser.baseHref()||this.$window.location.pathname)},e.prototype.url=function(e,t,n){return void 0===t&&(t=!1),S.isDefined(e)&&this.$location.url(e),t&&this.$location.replace(),n&&this.$location.state(n),this.$location.url()},e.prototype._runtimeServices=function(e,t,n,r,i){var o=this;this.$location=t,this.$sniffer=n,this.$browser=r,this.$window=i,e.$on("$locationChangeSuccess",function(t){return o._urlListeners.forEach(function(e){return e(t)})});var a=S.val(t);S.createProxyFunctions(a,this,a,["replace","path","search","hash"]),S.createProxyFunctions(a,this,a,["port","protocol","host"])},e}(),p=function(){function n(e){this.router=e}return n.injectableHandler=function(t,n){return function(e){return S.services.$injector.invoke(n,null,{$match:e,$stateParams:t.globals.params})}},n.prototype.$get=function(){var e=this.router.urlService;return this.router.urlRouter.update(!0),e.interceptDeferred||e.listen(),this.router.urlRouter},n.prototype.rule=function(e){var t=this;if(!S.isFunction(e))throw new Error("'rule' must be a function");var n=new S.BaseUrlRule(function(){return e(S.services.$injector,t.router.locationService)},S.identity);return this.router.urlService.rules.rule(n),this},n.prototype.otherwise=function(e){var t=this,n=this.router.urlService.rules;if(S.isString(e))n.otherwise(e);else{if(!S.isFunction(e))throw new Error("'rule' must be a string or function");n.otherwise(function(){return e(S.services.$injector,t.router.locationService)})}return this},n.prototype.when=function(e,t){return(S.isArray(t)||S.isFunction(t))&&(t=n.injectableHandler(this.router,t)),this.router.urlService.rules.when(e,t),this},n.prototype.deferIntercept=function(e){this.router.urlService.deferIntercept(e)},n}();x.module("ui.router.angular1",[]);var d=x.module("ui.router.init",["ng"]),m=x.module("ui.router.util",["ui.router.init"]),v=x.module("ui.router.router",["ui.router.util"]),g=x.module("ui.router.state",["ui.router.router","ui.router.util","ui.router.angular1"]),$=x.module("ui.router",["ui.router.init","ui.router.state","ui.router.angular1"]),y=(x.module("ui.router.compat",["ui.router"]),null);function b(e){(y=this.router=new S.UIRouter).stateProvider=new c(y.stateRegistry,y.stateService),y.stateRegistry.decorator("views",i),y.stateRegistry.decorator("onExit",l("onExit")),y.stateRegistry.decorator("onRetain",l("onRetain")),y.stateRegistry.decorator("onEnter",l("onEnter")),y.viewService._pluginapi._viewConfigFactory("ng1",r());var s=y.locationService=y.locationConfig=new f(e);function t(e,t,n,r,i,o,a){return s._runtimeServices(i,e,r,t,n),delete y.router,delete y.$get,y}return f.monkeyPatchPathParameterType(y),((y.router=y).$get=t).$inject=["$location","$browser","$window","$sniffer","$rootScope","$http","$templateCache"],y}b.$inject=["$locationProvider"];var w=function(n){return["$uiRouterProvider",function(e){var t=e.router[n];return t.$get=function(){return t},t}]};function _(t,e,n){if(S.services.$injector=t,S.services.$q=e,!t.hasOwnProperty("strictDi"))try{t.invoke(function(e){})}catch(e){t.strictDi=!!/strict mode/.exec(e&&e.toString())}n.stateRegistry.get().map(function(e){return e.$$state().resolvables}).reduce(S.unnestR,[]).filter(function(e){return"deferred"===e.deps}).forEach(function(e){return e.deps=t.annotate(e.resolveFn,t.strictDi)})}_.$inject=["$injector","$q","$uiRouter"];function C(e){e.$watch(function(){S.trace.approximateDigests++})}C.$inject=["$rootScope"],d.provider("$uiRouter",b),v.provider("$urlRouter",["$uiRouterProvider",function(e){return e.urlRouterProvider=new p(e)}]),m.provider("$urlService",w("urlService")),m.provider("$urlMatcherFactory",["$uiRouterProvider",function(){return y.urlMatcherFactory}]),m.provider("$templateFactory",function(){return new a}),g.provider("$stateRegistry",w("stateRegistry")),g.provider("$uiRouterGlobals",w("globals")),g.provider("$transitions",w("transitionService")),g.provider("$state",["$uiRouterProvider",function(){return S.extend(y.stateProvider,{$get:function(){return y.stateService}})}]),g.factory("$stateParams",["$uiRouter",function(e){return e.globals.params}]),$.factory("$view",function(){return y.viewService}),$.service("$trace",function(){return S.trace}),$.run(C),m.run(["$urlMatcherFactory",function(e){}]),g.run(["$state",function(e){}]),v.run(["$urlRouter",function(e){}]),d.run(_);var k,O,j,P,R=function(n){return n.getTokens().filter(S.isString).map(function(e){var t=n.getResolvable(e);return[e,"NOWAIT"===n.getPolicy(t).async?t.promise:t.data]}).reduce(S.applyPairs,{})};function T(e){var t,n=e.match(/^\s*({[^}]*})\s*$/);if(n&&(e="("+n[1]+")"),!(t=e.replace(/\n/g," ").match(/^\s*([^(]*?)\s*(\((.*)\))?\s*$/))||4!==t.length)throw new Error("Invalid state ref '"+e+"'");return{state:t[1]||null,paramExpr:t[3]||null}}function A(e){var t=e.parent().inheritedData("$uiView"),n=S.parse("$cfg.path")(t);return n?S.tail(n).state.name:void 0}function M(e,t,n){var r,i=n.uiState||e.current.name,o=S.extend((r=e,{relative:A(t)||r.$current,inherit:!0,source:"sref"}),n.uiStateOpts||{}),a=e.href(i,n.uiStateParams,o);return{uiState:i,uiStateParams:n.uiStateParams,uiStateOpts:o,href:a}}function N(e){var t="[object SVGAnimatedString]"===Object.prototype.toString.call(e.prop("href")),n="FORM"===e[0].nodeName;return{attr:n?"action":t?"xlink:href":"href",isAnchor:"A"===e.prop("tagName").toUpperCase(),clickable:!n}}function L(o,a,s,u,c){return function(e){var t=e.which||e.button,n=c();if(!(1<t||e.ctrlKey||e.metaKey||e.shiftKey||o.attr("target"))){var r=s(function(){o.attr("disabled")||a.go(n.uiState,n.uiStateParams,n.uiStateOpts)});e.preventDefault();var i=u.isAnchor&&!n.href?1:0;e.preventDefault=function(){i--<=0&&s.cancel(r)}}}}function V(i,e,o,t){var a;t&&(a=t.events),S.isArray(a)||(a=["click"]);for(var n=i.on?"on":"bind",r=0,s=a;r<s.length;r++){var u=s[r];i[n](u,o)}e.$on("$destroy",function(){for(var e=i.off?"off":"unbind",t=0,n=a;t<n.length;t++){var r=n[t];i[e](r,o)}})}function I(r){var e=function(e,t,n){return r.is(e,t,n)};return e.$stateful=!0,e}function D(r){var e=function(e,t,n){return r.includes(e,t,n)};return e.$stateful=!0,e}function q(m,v,g,e,$,t){var y=S.parse("viewDecl.controllerAs"),b=S.parse("viewDecl.resolveAs");return{restrict:"ECA",priority:-400,compile:function(e){var d=e.html();return e.empty(),function(t,n){var e=n.data("$uiView");if(!e)return n.html(d),void m(n.contents())(t);var r=e.$cfg||{viewDecl:{},getTemplate:S.noop},i=r.path&&new S.ResolveContext(r.path);n.html(r.getTemplate(n,i)||d),S.trace.traceUIViewFill(e.$uiView,n.html());var o=m(n.contents()),a=r.controller,s=y(r),u=b(r),c=i&&R(i);if(t[u]=c,a){var l=v(a,S.extend({},c,{$scope:t,$element:n}));s&&(t[s]=l,t[s][u]=c),n.data("$ngControllerController",l),n.children().data("$ngControllerController",l),H($,g,l,t,r)}if(S.isString(r.component))var f=S.kebobString(r.component),p=new RegExp("^(x-|data-)?"+f+"$","i"),h=t.$watch(function(){var e=[].slice.call(n[0].children).filter(function(e){return e&&e.tagName&&p.exec(e.tagName)});return e&&x.element(e).data("$"+r.component+"Controller")},function(e){e&&(H($,g,e,t,r),h())});o(t)}}}}k=["$uiRouter","$timeout",function(p,h){var d=p.stateService;return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(e,t,n,r){var i,o=N(t),a=r[1]||r[0],s=null,u={},c=function(){return M(d,t,u)},l=T(n.uiSref);function f(){var e=c();s&&s(),a&&(s=a.$$addStateInfo(e.uiState,e.uiStateParams)),null!=e.href&&n.$set(o.attr,e.href)}u.uiState=l.state,u.uiStateOpts=n.uiSrefOpts?e.$eval(n.uiSrefOpts):{},l.paramExpr&&(e.$watch(l.paramExpr,function(e){u.uiStateParams=S.extend({},e),f()},!0),u.uiStateParams=S.extend({},e.$eval(l.paramExpr))),f(),e.$on("$destroy",p.stateRegistry.onStatesChanged(f)),e.$on("$destroy",p.transitionService.onSuccess({},f)),o.clickable&&(i=L(t,d,h,o,c),V(t,e,i,u.uiStateOpts))}}}],O=["$uiRouter","$timeout",function(h,d){var m=h.stateService;return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(n,e,r,t){var i,o=N(e),a=t[1]||t[0],s=null,u={},c=function(){return M(m,e,u)},l=["uiState","uiStateParams","uiStateOpts"],f=l.reduce(function(e,t){return e[t]=S.noop,e},{});function p(){var e=c();s&&s(),a&&(s=a.$$addStateInfo(e.uiState,e.uiStateParams)),null!=e.href&&r.$set(o.attr,e.href)}l.forEach(function(t){u[t]=r[t]?n.$eval(r[t]):null,r.$observe(t,function(e){f[t](),f[t]=n.$watch(e,function(e){u[t]=e,p()},!0)})}),p(),n.$on("$destroy",h.stateRegistry.onStatesChanged(p)),n.$on("$destroy",h.transitionService.onSuccess({},p)),o.clickable&&(i=L(e,m,d,o,c),V(e,n,i,u.uiStateOpts))}}}],j=["$state","$stateParams","$interpolate","$uiRouter",function(d,e,m,v){return{restrict:"A",controller:["$scope","$element","$attrs",function(s,u,e){var c,r,t,n,i,l=[];c=m(e.uiSrefActiveEq||"",!1)(s);try{r=s.$eval(e.uiSrefActive)}catch(e){}function o(e){e.promise.then(h,S.noop)}function a(){f(r)}function f(e){S.isObject(e)&&(l=[],S.forEach(e,function(e,t){var n=function(e,t){var n=T(e);p(n.state,s.$eval(n.paramExpr),t)};S.isString(e)?n(e,t):S.isArray(e)&&S.forEach(e,function(e){n(e,t)})}))}function p(e,t,n){var r={state:d.get(e,A(u))||{name:e},params:t,activeClass:n};return l.push(r),function(){S.removeFrom(l)(r)}}function h(){var t=function(e){return e.split(/\s/).filter(S.identity)},e=function(e){return e.map(function(e){return e.activeClass}).map(t).reduce(S.unnestR,[])},n=e(l).concat(t(c)).reduce(S.uniqR,[]),r=e(l.filter(function(e){return d.includes(e.state.name,e.params)})),i=!!l.filter(function(e){return d.is(e.state.name,e.params)}).length?t(c):[],o=r.concat(i).reduce(S.uniqR,[]),a=n.filter(function(e){return!S.inArray(o,e)});s.$evalAsync(function(){o.forEach(function(e){return u.addClass(e)}),a.forEach(function(e){return u.removeClass(e)})})}f(r=r||m(e.uiSrefActive||"",!1)(s)),this.$$addStateInfo=function(e,t){if(!(S.isObject(r)&&0<l.length)){var n=p(e,t,r);return h(),n}},s.$on("$destroy",(t=v.stateRegistry.onStatesChanged(a),n=v.transitionService.onStart({},o),i=s.$on("$stateChangeSuccess",h),function(){t(),n(),i()})),v.globals.transition&&o(v.globals.transition),h()}]}}],x.module("ui.router.state").directive("uiSref",k).directive("uiSrefActive",j).directive("uiSrefActiveEq",j).directive("uiState",O),I.$inject=["$state"],D.$inject=["$state"],x.module("ui.router.state").filter("isState",I).filter("includedByState",D),P=["$view","$animate","$uiViewScroll","$interpolate","$q",function(i,o,$,y,b){var w={$cfg:{viewDecl:{$context:i._pluginapi._rootViewContext()}},$uiView:{}},_={count:0,restrict:"ECA",terminal:!0,priority:400,transclude:"element",compile:function(e,t,g){return function(a,s,e){var u,c,l,f,t,p=e.onload||"",h=e.autoscroll,d={enter:function(e,t,n){2<x.version.minor?o.enter(e,null,t).then(n):o.enter(e,null,t,n)},leave:function(e,t){2<x.version.minor?o.leave(e).then(t):o.leave(e,t)}},n=s.inheritedData("$uiView")||w,m=y(e.uiView||e.name||"")(a)||"$default",v={$type:"ng1",id:_.count++,name:m,fqn:n.$uiView.fqn?n.$uiView.fqn+"."+m:m,config:null,configUpdated:function(e){if(e&&!(e instanceof E))return;if(t=f,n=e,t===n)return;var t,n;S.trace.traceUIViewConfigUpdated(v,e&&e.viewDecl&&e.viewDecl.$context),r(f=e)},get creationContext(){var e=S.parse("$cfg.viewDecl.$context")(n),t=S.parse("$uiView.creationContext")(n);return e||t}};function r(e){var t=a.$new(),n=b.defer(),r=b.defer(),i={$cfg:e,$uiView:v},o={$animEnter:n.promise,$animLeave:r.promise,$$animLeave:r};t.$emit("$viewContentLoading",m),c=g(t,function(e){e.data("$uiViewAnim",o),e.data("$uiView",i),d.enter(e,s,function(){n.resolve(),l&&l.$emit("$viewContentAnimationEnded"),(S.isDefined(h)&&!h||a.$eval(h))&&$(e)}),function(){if(u&&(S.trace.traceUIViewEvent("Removing (previous) el",u.data("$uiView")),u.remove(),u=null),l&&(S.trace.traceUIViewEvent("Destroying scope",v),l.$destroy(),l=null),c){var e=c.data("$uiViewAnim");S.trace.traceUIViewEvent("Animate out",e),d.leave(c,function(){e.$$animLeave.resolve(),u=null}),u=c,c=null}}()}),(l=t).$emit("$viewContentLoaded",e||f),l.$eval(p)}S.trace.traceUIViewEvent("Linking",v),s.data("$uiView",{$uiView:v}),r(),t=i.registerUIView(v),a.$on("$destroy",function(){S.trace.traceUIViewEvent("Destroying/Unregistering",v),t()})}}};return _}],q.$inject=["$compile","$controller","$transitions","$view","$q","$timeout"];var U="function"==typeof x.module("ui.router").component,F=0;function H(r,e,c,t,n){!S.isFunction(c.$onInit)||n.viewDecl.component&&U||c.$onInit();var l=S.tail(n.path).state.self,i={bind:c};if(S.isFunction(c.uiOnParamsChanged)){var f=new S.ResolveContext(n.path).getResolvable("$transition$").data;t.$on("$destroy",e.onSuccess({},function(e){if(e!==f&&-1===e.exiting().indexOf(l)){var n=e.params("to"),r=e.params("from"),t=function(e){return e.paramSchema},i=e.treeChanges("to").map(t).reduce(S.unnestR,[]),o=e.treeChanges("from").map(t).reduce(S.unnestR,[]),a=i.filter(function(e){var t=o.indexOf(e);return-1===t||!o[t].type.equals(n[e.id],r[e.id])});if(a.length){var s=a.map(function(e){return e.id}),u=S.filter(n,function(e,t){return-1!==s.indexOf(t)});c.uiOnParamsChanged(u,e)}}},i))}if(S.isFunction(c.uiCanExit)){var o=F++,a="_uiCanExitIds",s=function(e){return!!e&&(e[a]&&!0===e[a][o]||s(e.redirectedFrom()))},u={exiting:l.name};t.$on("$destroy",e.onBefore(u,function(e){var t,n=e[a]=e[a]||{};return s(e)||(t=r.when(c.uiCanExit(e))).then(function(e){return n[o]=!1!==e}),t},i))}}x.module("ui.router.state").directive("uiView",P),x.module("ui.router.state").directive("uiView",q),x.module("ui.router.state").provider("$uiViewScroll",function(){var n=!1;this.useAnchorScroll=function(){n=!0},this.$get=["$anchorScroll","$timeout",function(e,t){return n?e:function(e){return t(function(){e[0].scrollIntoView()},0,!1)}}]});Object.keys(S).forEach(function(e){t[e]=S[e]}),t.core=S,t.default="ui.router",t.watchDigests=C,t.getLocals=R,t.getNg1ViewConfigFactory=r,t.ng1ViewsBuilder=i,t.Ng1ViewConfig=E,t.StateProvider=c,t.UrlRouterProvider=p,Object.defineProperty(t,"__esModule",{value:!0})},"object"==typeof n&&void 0!==t?i(n,e("angular"),e("@uirouter/core")):"function"==typeof define&&define.amd?define(["exports","angular","@uirouter/core"],i):i((r=r||self)["@uirouter/angularjs"]={},r.angular,r["@uirouter/core"])},{"@uirouter/core":23,angular:87}],3:[function(m,e,v){(function(e){"use strict";Object.defineProperty(v,"__esModule",{value:!0});var u=m("./predicates"),c=m("./hof"),t=m("./coreservices");v.root="object"==typeof self&&self.self===self&&self||"object"==typeof e&&e.global===e&&e||this;var n=v.root.angular||{};function r(e,t){return-1!==e.indexOf(t)}function i(e,t){var n=e.indexOf(t);return 0<=n&&e.splice(n,1),e}function o(e,t){return e.push(t),t}function a(e,t){var n={};for(var r in e)-1!==t.indexOf(r)&&(n[r]=e[r]);return n}function s(e,n,r){return r=r||(u.isArray(e)?[]:{}),v.forEach(e,function(e,t){return r[t]=n(e,t)}),r}function l(e,t){return e.push(t),e}function f(n,r){return void 0===r&&(r="assert failure"),function(e){var t=n(e);if(!t)throw new Error(u.isFunction(r)?r(e):r);return t}}function p(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(0===e.length)return[];for(var n=e.reduce(function(e,t){return Math.min(t.length,e)},9007199254740991),r=[],i=function(t){switch(e.length){case 1:r.push([e[0][t]]);break;case 2:r.push([e[0][t],e[1][t]]);break;case 3:r.push([e[0][t],e[1][t],e[2][t]]);break;case 4:r.push([e[0][t],e[1][t],e[2][t],e[3][t]]);break;default:r.push(e.map(function(e){return e[t]}))}},o=0;o<n;o++)i(o);return r}function h(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];if(n)for(var r=Object.keys(n),i=0;i<r.length;i++)e[r[i]]=n[r[i]]}return e}function d(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!=e&&t!=t)return!0;var n=typeof e;if(n!==typeof t||"object"!==n)return!1;var r,i,o=[e,t];if(c.all(u.isArray)(o))return i=t,(r=e).length===i.length&&p(r,i).reduce(function(e,t){return e&&d(t[0],t[1])},!0);if(c.all(u.isDate)(o))return e.getTime()===t.getTime();if(c.all(u.isRegExp)(o))return e.toString()===t.toString();if(c.all(u.isFunction)(o))return!0;if([u.isFunction,u.isArray,u.isDate,u.isRegExp].map(c.any).reduce(function(e,t){return e||!!t(o)},!1))return!1;var a={};for(var s in e){if(!d(e[s],t[s]))return!1;a[s]=!0}for(var s in t)if(!a[s])return!1;return!0}v.fromJson=n.fromJson||JSON.parse.bind(JSON),v.toJson=n.toJson||JSON.stringify.bind(JSON),v.forEach=n.forEach||function(t,n,e){if(u.isArray(t))return t.forEach(n,e);Object.keys(t).forEach(function(e){return n(t[e],e)})},v.extend=Object.assign||h,v.equals=n.equals||d,v.identity=function(e){return e},v.noop=function(){},v.createProxyFunctions=function(t,r,n,e,i){void 0===i&&(i=!1);var o=function(e){return t()[e].bind(n())};return(e=e||Object.keys(t())).reduce(function(e,t){var n;return e[t]=i?(n=t,function(){return r[n]=o(n),r[n].apply(null,arguments)}):o(t),e},r)},v.inherit=function(e,t){return v.extend(Object.create(e),t)},v.inArray=c.curry(r),v._inArray=r,v.removeFrom=c.curry(i),v._removeFrom=i,v.pushTo=c.curry(o),v._pushTo=o,v.deregAll=function(t){return t.slice().forEach(function(e){"function"==typeof e&&e(),v.removeFrom(t,e)})},v.defaults=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=v.extend.apply(void 0,[{}].concat(t.reverse()));return v.extend(r,a(e||{},Object.keys(r)))},v.mergeR=function(e,t){return v.extend(e,t)},v.ancestors=function(e,t){var n=[];for(var r in e.path){if(e.path[r]!==t.path[r])break;n.push(e.path[r])}return n},v.pick=a,v.omit=function(n,e){return Object.keys(n).filter(c.not(v.inArray(e))).reduce(function(e,t){return e[t]=n[t],e},{})},v.pluck=function(e,t){return s(e,c.prop(t))},v.filter=function(e,n){var t=u.isArray(e),r=t?[]:{},i=t?function(e){return r.push(e)}:function(e,t){return r[t]=e};return v.forEach(e,function(e,t){n(e,t)&&i(e,t)}),r},v.find=function(e,n){var r;return v.forEach(e,function(e,t){r||n(e,t)&&(r=e)}),r},v.mapObj=s,v.map=s,v.values=function(t){return Object.keys(t).map(function(e){return t[e]})},v.allTrueR=function(e,t){return e&&t},v.anyTrueR=function(e,t){return e||t},v.unnestR=function(e,t){return e.concat(t)},v.flattenR=function(e,t){return u.isArray(t)?e.concat(t.reduce(v.flattenR,[])):l(e,t)},v.pushR=l,v.uniqR=function(e,t){return v.inArray(e,t)?e:l(e,t)},v.unnest=function(e){return e.reduce(v.unnestR,[])},v.flatten=function(e){return e.reduce(v.flattenR,[])},v.assertPredicate=f,v.assertMap=f,v.assertFn=f,v.pairs=function(t){return Object.keys(t).map(function(e){return[e,t[e]]})},v.arrayTuples=p,v.applyPairs=function(e,t){var n,r;if(u.isArray(t)&&(n=t[0],r=t[1]),!u.isString(n))throw new Error("invalid parameters to applyPairs");return e[n]=r,e},v.tail=function(e){return e.length&&e[e.length-1]||void 0},v.copy=function(e,t){return t&&Object.keys(t).forEach(function(e){return delete t[e]}),t||(t={}),v.extend(t,e)},v._extend=h,v.silenceUncaughtInPromise=function(e){return e.catch(function(e){return 0})&&e},v.silentRejection=function(e){return v.silenceUncaughtInPromise(t.services.$q.reject(e))}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./coreservices":4,"./hof":6,"./predicates":8}],4:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.makeStub=function(r,e){return e.reduce(function(e,t){return e[t]=(n=r+"."+t+"()",function(){throw new Error("No implementation for "+n+". The framework specific code did not implement this method.")}),e;var n},{})};var r={$q:void 0,$injector:void 0};n.services=r},{}],5:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(e){this.text=e,this.glob=e.split(".");var t=this.text.split(".").map(function(e){return"**"===e?"(?:|(?:\\.[^.]*)*)":"*"===e?"\\.[^.]*":"\\."+e}).join("");this.regexp=new RegExp("^"+t+"$")}return t.is=function(e){return!!/[!,*]+/.exec(e)},t.fromString=function(e){return t.is(e)?new t(e):null},t.prototype.matches=function(e){return this.regexp.test("."+e)},t}();n.Glob=r},{}],6:[function(e,t,n){"use strict";function r(n){var e=[].slice.apply(arguments,[1]),r=n.length;return function e(t){return t.length>=r?n.apply(null,t):function(){return e(t.concat([].slice.apply(arguments)))}}(e)}function i(){var n=arguments,r=n.length-1;return function(){for(var e=r,t=n[r].apply(this,arguments);e--;)t=n[e].call(this,t);return t}}function o(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.apply(null,[].slice.call(arguments).reverse())}Object.defineProperty(n,"__esModule",{value:!0}),n.curry=r,n.compose=i,n.pipe=o,n.prop=function(t){return function(e){return e&&e[t]}},n.propEq=r(function(e,t,n){return n&&n[e]===t}),n.parse=function(e){return o.apply(null,e.split(".").map(n.prop))},n.not=function(n){return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return!n.apply(null,e)}},n.and=function(n,r){return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.apply(null,e)&&r.apply(null,e)}},n.or=function(n,r){return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.apply(null,e)||r.apply(null,e)}},n.all=function(n){return function(e){return e.reduce(function(e,t){return e&&!!n(t)},!0)}},n.any=function(n){return function(e){return e.reduce(function(e,t){return e||!!n(t)},!1)}},n.is=function(t){return function(e){return null!=e&&e.constructor===t||e instanceof t}},n.eq=function(t){return function(e){return t===e}},n.val=function(e){return function(){return e}},n.invoke=function(t,n){return function(e){return e[t].apply(e,n)}},n.pattern=function(n){return function(e){for(var t=0;t<n.length;t++)if(n[t][0](e))return n[t][1](e)}}},{}],7:[function(e,t,n){"use strict";function r(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}Object.defineProperty(n,"__esModule",{value:!0}),r(e("./common")),r(e("./coreservices")),r(e("./glob")),r(e("./hof")),r(e("./predicates")),r(e("./queue")),r(e("./strings")),r(e("./trace"))},{"./common":3,"./coreservices":4,"./glob":5,"./hof":6,"./predicates":8,"./queue":9,"./strings":10,"./trace":11}],8:[function(e,t,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var i=e("./hof"),n=Object.prototype.toString,o=function(t){return function(e){return typeof e===t}};r.isUndefined=o("undefined"),r.isDefined=i.not(r.isUndefined),r.isNull=function(e){return null===e},r.isNullOrUndefined=i.or(r.isNull,r.isUndefined),r.isFunction=o("function"),r.isNumber=o("number"),r.isString=o("string"),r.isObject=function(e){return null!==e&&"object"==typeof e},r.isArray=Array.isArray,r.isDate=function(e){return"[object Date]"===n.call(e)},r.isRegExp=function(e){return"[object RegExp]"===n.call(e)},r.isInjectable=function(e){if(r.isArray(e)&&e.length){var t=e.slice(0,-1),n=e.slice(-1);return!(t.filter(i.not(r.isString)).length||n.filter(i.not(r.isFunction)).length)}return r.isFunction(e)},r.isPromise=i.and(r.isObject,i.pipe(i.prop("then"),r.isFunction))},{"./hof":6}],9:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("./common"),i=function(){function e(e,t){void 0===e&&(e=[]),void 0===t&&(t=null),this._items=e,this._limit=t,this._evictListeners=[],this.onEvict=r.pushTo(this._evictListeners)}return e.prototype.enqueue=function(e){var t=this._items;return t.push(e),this._limit&&t.length>this._limit&&this.evict(),e},e.prototype.evict=function(){var t=this._items.shift();return this._evictListeners.forEach(function(e){return e(t)}),t},e.prototype.dequeue=function(){if(this.size())return this._items.splice(0,1)[0]},e.prototype.clear=function(){var e=this._items;return this._items=[],e},e.prototype.size=function(){return this._items.length},e.prototype.remove=function(e){var t=this._items.indexOf(e);return-1<t&&this._items.splice(t,1)[0]},e.prototype.peekTail=function(){return this._items[this._items.length-1]},e.prototype.peekHead=function(){if(this.size())return this._items[0]},e}();n.Queue=i},{"./common":3}],10:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("./predicates"),i=e("../transition/rejectFactory"),o=e("./common"),a=e("./hof");function s(e){var t=u(e),n=t.match(/^(function [^ ]+\([^)]*\))/),r=n?n[1]:t,i=e.name||"";return i&&r.match(/function \(/)?"function "+i+r.substr(9):r}function u(e){var t=r.isArray(e)?e.slice(-1)[0]:e;return t&&t.toString()||"undefined"}n.maxLength=function(e,t){return t.length<=e?t:t.substr(0,e-3)+"..."},n.padString=function(e,t){for(;t.length<e;)t+=" ";return t},n.kebobString=function(e){return e.replace(/^([A-Z])/,function(e){return e.toLowerCase()}).replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()})},n.functionToString=s,n.fnToString=u;var c=i.Rejection.isRejectionPromise,l=a.pattern([[r.isUndefined,a.val("undefined")],[r.isNull,a.val("null")],[r.isPromise,a.val("[Promise]")],[c,function(e){return e._transitionRejection.toString()}],[function(e){return r.isObject(e)&&!r.isArray(e)&&e.constructor!==Object&&r.isFunction(e.toString)},function(e){return e.toString()}],[r.isInjectable,s],[a.val(!0),o.identity]]);n.stringify=function(e){var t=[];function n(e){if(r.isObject(e)){if(-1!==t.indexOf(e))return"[circular ref]";t.push(e)}return l(e)}return r.isUndefined(e)?n(e):JSON.stringify(e,function(e,t){return n(t)}).replace(/\\"/g,'"')},n.beforeAfterSubstr=function(n){return function(e){if(!e)return["",""];var t=e.indexOf(n);return-1===t?[e,""]:[e.substr(0,t),e.substr(t+1)]}},n.hostRegex=new RegExp("^(?:[a-z]+:)?//[^/]+/"),n.stripLastPathElement=function(e){return e.replace(/\/[^/]*$/,"")},n.splitHash=n.beforeAfterSubstr("#"),n.splitQuery=n.beforeAfterSubstr("?"),n.splitEqual=n.beforeAfterSubstr("="),n.trimHashVal=function(e){return e?e.replace(/^#/,""):""},n.splitOnDelim=function(e){var t=new RegExp("("+e+")","g");return function(e){return e.split(t).filter(o.identity)}},n.joinNeighborsR=function(e,t){return r.isString(o.tail(e))&&r.isString(t)?e.slice(0,-1).concat(o.tail(e)+t):o.pushR(e,t)}},{"../transition/rejectFactory":50,"./common":3,"./hof":6,"./predicates":8}],11:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=e("../common/hof"),r=e("../common/predicates"),s=e("./strings");function i(e){if(!e)return"ui-view (defunct)";var t=e.creationContext?e.creationContext.name||"(root)":"(none)";return"[ui-view#"+e.id+" "+e.$type+":"+e.fqn+" ("+e.name+"@"+t+")]"}function o(e){return r.isNumber(e)?u[e]:u[u[e]]}var u,c,l=Function.prototype.bind.call(console.log,console),f=r.isFunction(console.table)?console.table.bind(console):l.bind(console);(c=u||(u={}))[c.RESOLVE=0]="RESOLVE",c[c.TRANSITION=1]="TRANSITION",c[c.HOOK=2]="HOOK",c[c.UIVIEW=3]="UIVIEW",c[c.VIEWCONFIG=4]="VIEWCONFIG",n.Category=u;var p=a.parse("$id"),h=a.parse("router.$id"),d=function(e){return"Transition #"+p(e)+"-"+h(e)},m=function(){function e(){this._enabled={},this.approximateDigests=0}return e.prototype._set=function(t,e){var n=this;e.length||(e=Object.keys(u).map(function(e){return parseInt(e,10)}).filter(function(e){return!isNaN(e)}).map(function(e){return u[e]})),e.map(o).forEach(function(e){return n._enabled[e]=t})},e.prototype.enable=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._set(!0,e)},e.prototype.disable=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._set(!1,e)},e.prototype.enabled=function(e){return!!this._enabled[o(e)]},e.prototype.traceTransitionStart=function(e){this.enabled(u.TRANSITION)&&console.log(d(e)+": Started  -> "+s.stringify(e))},e.prototype.traceTransitionIgnored=function(e){this.enabled(u.TRANSITION)&&console.log(d(e)+": Ignored  <> "+s.stringify(e))},e.prototype.traceHookInvocation=function(e,t,n){if(this.enabled(u.HOOK)){var r=a.parse("traceData.hookType")(n)||"internal",i=a.parse("traceData.context.state.name")(n)||a.parse("traceData.context")(n)||"unknown",o=s.functionToString(e.registeredHook.callback);console.log(d(t)+":   Hook -> "+r+" context: "+i+", "+s.maxLength(200,o))}},e.prototype.traceHookResult=function(e,t,n){this.enabled(u.HOOK)&&console.log(d(t)+":   <- Hook returned: "+s.maxLength(200,s.stringify(e)))},e.prototype.traceResolvePath=function(e,t,n){this.enabled(u.RESOLVE)&&console.log(d(n)+":         Resolving "+e+" ("+t+")")},e.prototype.traceResolvableResolved=function(e,t){this.enabled(u.RESOLVE)&&console.log(d(t)+":               <- Resolved  "+e+" to: "+s.maxLength(200,s.stringify(e.data)))},e.prototype.traceError=function(e,t){this.enabled(u.TRANSITION)&&console.log(d(t)+": <- Rejected "+s.stringify(t)+", reason: "+e)},e.prototype.traceSuccess=function(e,t){this.enabled(u.TRANSITION)&&console.log(d(t)+": <- Success  "+s.stringify(t)+", final state: "+e.name)},e.prototype.traceUIViewEvent=function(e,t,n){void 0===n&&(n=""),this.enabled(u.UIVIEW)&&console.log("ui-view: "+s.padString(30,e)+" "+i(t)+n)},e.prototype.traceUIViewConfigUpdated=function(e,t){this.enabled(u.UIVIEW)&&this.traceUIViewEvent("Updating",e," with ViewConfig from context='"+t+"'")},e.prototype.traceUIViewFill=function(e,t){this.enabled(u.UIVIEW)&&this.traceUIViewEvent("Fill",e," with: "+s.maxLength(200,t))},e.prototype.traceViewSync=function(e){if(this.enabled(u.VIEWCONFIG)){var a="uiview component fqn",t=e.map(function(e){var t,n=e.uiView,r=e.viewConfig,i=n&&n.fqn,o=r&&r.viewDecl.$context.name+": ("+r.viewDecl.$name+")";return(t={})[a]=i,t["view config state (view name)"]=o,t}).sort(function(e,t){return(e[a]||"").localeCompare(t[a]||"")});f(t)}},e.prototype.traceViewServiceEvent=function(e,t){var n,r,i;this.enabled(u.VIEWCONFIG)&&console.log("VIEWCONFIG: "+e+" "+(r=(n=t).viewDecl,i=r.$context.name||"(root)","[View#"+n.$id+" from '"+i+"' state]: target ui-view: '"+r.$uiViewName+"@"+r.$uiViewContextAnchor+"'"))},e.prototype.traceViewServiceUIViewEvent=function(e,t){this.enabled(u.VIEWCONFIG)&&console.log("VIEWCONFIG: "+e+" "+i(t))},e}(),v=new(n.Trace=m);n.trace=v},{"../common/hof":6,"../common/predicates":8,"./strings":10}],12:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("./params/stateParams"),i=e("./common/queue"),o=function(){function e(){this.params=new r.StateParams,this.lastStartedTransitionId=-1,this.transitionHistory=new i.Queue([],1),this.successfulTransitions=new i.Queue([],1)}return e.prototype.dispose=function(){this.transitionHistory.clear(),this.successfulTransitions.clear(),this.transition=null},e}();n.UIRouterGlobals=o},{"./common/queue":9,"./params/stateParams":29}],13:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("../transition/transition"),i=e("../router"),o=e("../resolve"),a=e("../common");function s(t){t.addResolvable(o.Resolvable.fromData(i.UIRouter,t.router),""),t.addResolvable(o.Resolvable.fromData(r.Transition,t),""),t.addResolvable(o.Resolvable.fromData("$transition$",t),""),t.addResolvable(o.Resolvable.fromData("$stateParams",t.params()),""),t.entering().forEach(function(e){t.addResolvable(o.Resolvable.fromData("$state$",e),e)})}n.registerAddCoreResolvables=function(e){return e.onCreate({},s)};var u=["$transition$",r.Transition],c=a.inArray(u);n.treeChangesCleanup=function(e){var t=a.values(e.treeChanges()).reduce(a.unnestR,[]).reduce(a.uniqR,[]),n=function(e){return c(e.token)?o.Resolvable.fromData(e.token,null):e};t.forEach(function(e){e.resolvables=e.resolvables.map(n)})}},{"../common":7,"../resolve":33,"../router":37,"../transition/transition":51}],14:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("../common/trace"),i=e("../transition/rejectFactory");function o(e){var t=e._ignoredReason();if(t){r.trace.traceTransitionIgnored(e);var n=e.router.globals.transition;return"SameAsCurrent"===t&&n&&n.abort(),i.Rejection.ignored().toPromise()}}n.registerIgnoredTransitionHook=function(e){return e.onBefore({},o,{priority:-9999})}},{"../common/trace":11,"../transition/rejectFactory":50}],15:[function(e,t,n){"use strict";function r(e){if(!e.valid())throw new Error(e.error().toString())}Object.defineProperty(n,"__esModule",{value:!0}),n.registerInvalidTransitionHook=function(e){return e.onBefore({},r,{priority:-1e4})}},{}],16:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=e("../common/coreservices"),r=function(a){var s=a.router;var e=a.entering().filter(function(e){return!!e.$$state().lazyLoad}).map(function(e){return o(a,e)});return i.services.$q.all(e).then(function(){if("url"!==a.originalTransition().options().source){var e=a.targetState();return s.stateService.target(e.identifier(),e.params(),e.options())}var t=s.urlService,n=t.match(t.parts()),r=n&&n.rule;if(r&&"STATE"===r.type){var i=r.state,o=n.match;return s.stateService.target(i,o,a.options())}s.urlService.sync()})};function o(t,n){var r=n.$$state().lazyLoad,e=r._promise;if(!e){e=r._promise=i.services.$q.when(r(t,n)).then(function(e){e&&Array.isArray(e.states)&&e.states.forEach(function(e){return t.router.stateRegistry.register(e)});return e}).then(function(e){return delete n.lazyLoad,delete n.$$state().lazyLoad,delete r._promise,e},function(e){return delete r._promise,i.services.$q.reject(e)})}return e}n.registerLazyLoadHook=function(e){return e.onBefore({entering:function(e){return!!e.lazyLoad}},r)},n.lazyLoadState=o},{"../common/coreservices":4}],17:[function(e,t,n){"use strict";function r(n){return function(e,t){return(0,t.$$state()[n])(e,t)}}Object.defineProperty(n,"__esModule",{value:!0});var i=r("onExit");n.registerOnExitHook=function(e){return e.onExit({exiting:function(e){return!!e.onExit}},i)};var o=r("onRetain");n.registerOnRetainHook=function(e){return e.onRetain({retained:function(e){return!!e.onRetain}},o)};var a=r("onEnter");n.registerOnEnterHook=function(e){return e.onEnter({entering:function(e){return!!e.onEnter}},a)}},{}],18:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=e("../common/predicates"),o=e("../common/coreservices"),a=e("../state/targetState"),r=function(t){var e=t.to().redirectTo;if(e){var n=t.router.stateService;return i.isFunction(e)?o.services.$q.when(e(t)).then(r):r(e)}function r(e){if(e)return e instanceof a.TargetState?e:i.isString(e)?n.target(e,t.params(),t.options()):e.state||e.params?n.target(e.state||t.to(),e.params||t.params(),t.options()):void 0}};n.registerRedirectToHook=function(e){return e.onStart({to:function(e){return!!e.redirectTo}},r)}},{"../common/coreservices":4,"../common/predicates":8,"../state/targetState":45}],19:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("../common/common"),i=e("../resolve/resolveContext"),o=e("../common/hof");n.RESOLVE_HOOK_PRIORITY=1e3;var a=function(e){return new i.ResolveContext(e.treeChanges().to).resolvePath("EAGER",e).then(r.noop)};n.registerEagerResolvePath=function(e){return e.onStart({},a,{priority:n.RESOLVE_HOOK_PRIORITY})};var s=function(e,t){return new i.ResolveContext(e.treeChanges().to).subContext(t.$$state()).resolvePath("LAZY",e).then(r.noop)};n.registerLazyResolveState=function(e){return e.onEnter({entering:o.val(!0)},s,{priority:n.RESOLVE_HOOK_PRIORITY})};var u=function(e){return new i.ResolveContext(e.treeChanges().to).resolvePath("LAZY",e).then(r.noop)};n.registerResolveRemaining=function(e){return e.onFinish({},u,{priority:n.RESOLVE_HOOK_PRIORITY})}},{"../common/common":3,"../common/hof":6,"../resolve/resolveContext":36}],20:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("../common/common"),i=function(e){var t=e.router.globals,n=function(){t.transition===e&&(t.transition=null)};e.onSuccess({},function(){t.successfulTransitions.enqueue(e),t.$current=e.$to(),t.current=t.$current.self,r.copy(e.params(),t.params)},{priority:1e4}),e.promise.then(n,n)};n.registerUpdateGlobalState=function(e){return e.onCreate({},i)}},{"../common/common":3}],21:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(e){var t=e.options(),n=e.router.stateService,r=e.router.urlRouter;if("url"!==t.source&&t.location&&n.$current.navigable){var i={replace:"replace"===t.location};r.push(n.$current.navigable.url,n.params,i)}r.update(!0)};n.registerUpdateUrl=function(e){return e.onSuccess({},r,{priority:9999})}},{}],22:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("../common/common"),i=e("../common/coreservices"),o=function(e){var t=i.services.$q,n=e.views("entering");if(n.length)return t.all(n.map(function(e){return t.when(e.load())})).then(r.noop)};n.registerLoadEnteringViews=function(e){return e.onFinish({},o)};var a=function(e){var t=e.views("entering"),n=e.views("exiting");if(t.length||n.length){var r=e.router.viewService;n.forEach(function(e){return r.deactivateViewConfig(e)}),t.forEach(function(e){return r.activateViewConfig(e)}),r.sync()}};n.registerActivateViews=function(e){return e.onSuccess({},a)}},{"../common/common":3,"../common/coreservices":4}],23:[function(e,t,n){"use strict";function r(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}Object.defineProperty(n,"__esModule",{value:!0}),r(e("./common/index")),r(e("./params/index")),r(e("./path/index")),r(e("./resolve/index")),r(e("./state/index")),r(e("./transition/index")),r(e("./url/index")),r(e("./view/index")),r(e("./globals")),r(e("./router")),r(e("./vanilla")),r(e("./interface"))},{"./common/index":7,"./globals":12,"./interface":24,"./params/index":25,"./path/index":30,"./resolve/index":33,"./router":37,"./state/index":38,"./transition/index":48,"./url/index":55,"./vanilla":63,"./view/index":75}],24:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(){}return e.prototype.dispose=function(e){},e}();n.UIRouterPluginBase=r},{}],25:[function(e,t,n){"use strict";function r(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}Object.defineProperty(n,"__esModule",{value:!0}),r(e("./param")),r(e("./paramTypes")),r(e("./stateParams")),r(e("./paramType"))},{"./param":26,"./paramType":27,"./paramTypes":28,"./stateParams":29}],26:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var m,r,v=e("../common/common"),g=e("../common/hof"),$=e("../common/predicates"),o=e("../common/coreservices"),y=e("./paramType"),i=Object.prototype.hasOwnProperty,s=function(e){return 0===["value","type","squash","array","dynamic"].filter(i.bind(e||{})).length};function b(e,t,n){var r=!1===n.reloadOnSearch&&t===m.SEARCH||void 0,i=v.find([n.dynamic,r],$.isDefined),o=$.isDefined(i)?{dynamic:i}:{},a=function(e){function t(){return e.value}e=s(e)?{value:e}:e,t.__cacheable=!0;var n=$.isInjectable(e.value)?e.value:t;return v.extend(e,{$$fn:n})}(n&&n.params&&n.params[e]);return v.extend(o,a)}(r=m||(m={}))[r.PATH=0]="PATH",r[r.SEARCH=1]="SEARCH",r[r.CONFIG=2]="CONFIG",n.DefType=m;var a=function(){function r(e,t,n,r,i){var o=b(e,n,i);t=function(e,t,n,r,i){if(e.type&&t&&"string"!==t.name)throw new Error("Param '"+r+"' has two type configurations.");if(e.type&&t&&"string"===t.name&&i.type(e.type))return i.type(e.type);if(t)return t;if(e.type)return e.type instanceof y.ParamType?e.type:i.type(e.type);var o=n===m.CONFIG?"any":n===m.PATH?"path":n===m.SEARCH?"query":"string";return i.type(o)}(o,t,n,e,r.paramTypes);var a,s,u=(a={array:n===m.SEARCH&&"auto"},s=e.match(/\[\]$/)?{array:!0}:{},v.extend(a,s,o).array);t=u?t.$asArray(u,n===m.SEARCH):t;var c=void 0!==o.value||n===m.SEARCH,l=$.isDefined(o.dynamic)?!!o.dynamic:!!t.dynamic,f=$.isDefined(o.raw)?!!o.raw:!!t.raw,p=function(e,t,n){var r=e.squash;if(!t||!1===r)return!1;if(!$.isDefined(r)||null==r)return n;if(!0===r||$.isString(r))return r;throw new Error("Invalid squash policy: '"+r+"'. Valid policies: false, true, or arbitrary string")}(o,c,r.defaultSquashPolicy()),h=function(e,t,n,r){var i=[{from:"",to:n||t?void 0:""},{from:null,to:n||t?void 0:""}],o=$.isArray(e.replace)?e.replace:[];$.isString(r)&&o.push({from:r,to:void 0});var a=v.map(o,g.prop("from"));return v.filter(i,function(e){return-1===a.indexOf(e.from)}).concat(o)}(o,u,c,p),d=$.isDefined(o.inherit)?!!o.inherit:!!t.inherit;v.extend(this,{id:e,type:t,location:n,isOptional:c,dynamic:l,raw:f,squash:p,replace:h,inherit:d,array:u,config:o})}return r.values=function(e,t){void 0===t&&(t={});for(var n={},r=0,i=e;r<i.length;r++){var o=i[r];n[o.id]=o.value(t[o.id])}return n},r.changed=function(e,t,n){return void 0===t&&(t={}),void 0===n&&(n={}),e.filter(function(e){return!e.type.equals(t[e.id],n[e.id])})},r.equals=function(e,t,n){return void 0===t&&(t={}),void 0===n&&(n={}),0===r.changed(e,t,n).length},r.validates=function(e,t){return void 0===t&&(t={}),e.map(function(e){return e.validates(t[e.id])}).reduce(v.allTrueR,!0)},r.prototype.isDefaultValue=function(e){return this.isOptional&&this.type.equals(this.value(),e)},r.prototype.value=function(e){var i=this;return e=function(e){for(var t=0,n=i.replace;t<n.length;t++){var r=n[t];if(r.from===e)return r.to}return e}(e),$.isUndefined(e)?function(){if(i._defaultValueCache)return i._defaultValueCache.defaultValue;if(!o.services.$injector)throw new Error("Injectable functions cannot be called at configuration time");var e=o.services.$injector.invoke(i.config.$$fn);if(null!=e&&!i.type.is(e))throw new Error("Default value ("+e+") for parameter '"+i.id+"' is not an instance of ParamType ("+i.type.name+")");return i.config.$$fn.__cacheable&&(i._defaultValueCache={defaultValue:e}),e}():this.type.$normalize(e)},r.prototype.isSearch=function(){return this.location===m.SEARCH},r.prototype.validates=function(e){if(($.isUndefined(e)||null===e)&&this.isOptional)return!0;var t=this.type.$normalize(e);if(!this.type.is(t))return!1;var n=this.type.encode(t);return!($.isString(n)&&!this.type.pattern.exec(n))},r.prototype.toString=function(){return"{Param:"+this.id+" "+this.type+" squash: '"+this.squash+"' optional: "+this.isOptional+"}"},r}();n.Param=a},{"../common/common":3,"../common/coreservices":4,"../common/hof":6,"../common/predicates":8,"./paramType":27}],27:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var c=e("../common/common"),l=e("../common/predicates"),r=function(){function e(e){this.pattern=/.*/,this.inherit=!0,c.extend(this,e)}return e.prototype.is=function(e,t){return!0},e.prototype.encode=function(e,t){return e},e.prototype.decode=function(e,t){return e},e.prototype.equals=function(e,t){return e==t},e.prototype.$subPattern=function(){var e=this.pattern.toString();return e.substr(1,e.length-2)},e.prototype.toString=function(){return"{ParamType:"+this.name+"}"},e.prototype.$normalize=function(e){return this.is(e)?e:this.decode(e)},e.prototype.$asArray=function(e,t){if(!e)return this;if("auto"===e&&!t)throw new Error("'auto' array mode is for query parameters only");return new i(this,e)},e}();function i(r,o){var i=this;function a(e){return l.isArray(e)?e:l.isDefined(e)?[e]:[]}function s(r,i){return function(e){if(l.isArray(e)&&0===e.length)return e;var t=a(e),n=c.map(t,r);return!0===i?0===c.filter(n,function(e){return!e}).length:function(e){switch(e.length){case 0:return;case 1:return"auto"===o?e[0]:e;default:return e}}(n)}}function u(o){return function(e,t){var n=a(e),r=a(t);if(n.length!==r.length)return!1;for(var i=0;i<n.length;i++)if(!o(n[i],r[i]))return!1;return!0}}["encode","decode","equals","$normalize"].forEach(function(e){var t=r[e].bind(r),n="equals"===e?u:s;i[e]=n(t)}),c.extend(this,{dynamic:r.dynamic,name:r.name,pattern:r.pattern,inherit:r.inherit,raw:r.raw,is:s(r.is.bind(r),!0),$arrayMode:o})}n.ParamType=r},{"../common/common":3,"../common/predicates":8}],28:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,i=e("../common/common"),o=e("../common/predicates"),a=e("../common/hof"),s=e("../common/coreservices"),u=e("./paramType"),c=function(){function e(){this.enqueue=!0,this.typeQueue=[],this.defaultTypes=i.pick(e.prototype,["hash","string","query","path","int","bool","date","json","any"]);this.types=i.inherit(i.map(this.defaultTypes,function(e,t){return new u.ParamType(i.extend({name:t},e))}),{})}return e.prototype.dispose=function(){this.types={}},e.prototype.type=function(e,t,n){if(!o.isDefined(t))return this.types[e];if(this.types.hasOwnProperty(e))throw new Error("A type named '"+e+"' has already been defined.");return this.types[e]=new u.ParamType(i.extend({name:e},t)),n&&(this.typeQueue.push({name:e,def:n}),this.enqueue||this._flushTypeQueue()),this},e.prototype._flushTypeQueue=function(){for(;this.typeQueue.length;){var e=this.typeQueue.shift();if(e.pattern)throw new Error("You cannot override a type's .pattern at runtime.");i.extend(this.types[e.name],s.services.$injector.invoke(e.def))}},e}();n.ParamTypes=c,r=function(e){var t=function(e){return null!=e?e.toString():e},n={encode:t,decode:t,is:a.is(String),pattern:/.*/,equals:function(e,t){return e==t}};return i.extend({},n,e)},i.extend(c.prototype,{string:r({}),path:r({pattern:/[^/]*/}),query:r({}),hash:r({inherit:!1}),int:r({decode:function(e){return parseInt(e,10)},is:function(e){return!o.isNullOrUndefined(e)&&this.decode(e.toString())===e},pattern:/-?\d+/}),bool:r({encode:function(e){return e?1:0},decode:function(e){return 0!==parseInt(e,10)},is:a.is(Boolean),pattern:/0|1/}),date:r({encode:function(e){return this.is(e)?[e.getFullYear(),("0"+(e.getMonth()+1)).slice(-2),("0"+e.getDate()).slice(-2)].join("-"):void 0},decode:function(e){if(this.is(e))return e;var t=this.capture.exec(e);return t?new Date(t[1],t[2]-1,t[3]):void 0},is:function(e){return e instanceof Date&&!isNaN(e.valueOf())},equals:function(n,r){return["getFullYear","getMonth","getDate"].reduce(function(e,t){return e&&n[t]()===r[t]()},!0)},pattern:/[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,capture:/([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/}),json:r({encode:i.toJson,decode:i.fromJson,is:a.is(Object),equals:i.equals,pattern:/[^/]*/}),any:r({encode:i.identity,decode:i.identity,is:function(){return!0},equals:i.equals})})},{"../common/common":3,"../common/coreservices":4,"../common/hof":6,"../common/predicates":8,"./paramType":27}],29:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var c=e("../common/common"),r=function(){function e(e){void 0===e&&(e={}),c.extend(this,e)}return e.prototype.$inherit=function(e,t,n){var r,i=c.ancestors(t,n),o={},a=[];for(var s in i)if(i[s]&&i[s].params&&(r=Object.keys(i[s].params)).length)for(var u in r)0<=a.indexOf(r[u])||(a.push(r[u]),o[r[u]]=this[r[u]]);return c.extend({},o,e)},e}();n.StateParams=r},{"../common/common":3}],30:[function(e,t,n){"use strict";function r(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}Object.defineProperty(n,"__esModule",{value:!0}),r(e("./pathNode")),r(e("./pathUtils"))},{"./pathNode":31,"./pathUtils":32}],31:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=e("../common/common"),o=e("../common/hof"),a=e("../params/param"),r=function(){function r(e){if(e instanceof r){var t=e;this.state=t.state,this.paramSchema=t.paramSchema.slice(),this.paramValues=i.extend({},t.paramValues),this.resolvables=t.resolvables.slice(),this.views=t.views&&t.views.slice()}else{var n=e;this.state=n,this.paramSchema=n.parameters({inherit:!1}),this.paramValues={},this.resolvables=n.resolvables.map(function(e){return e.clone()})}}return r.prototype.clone=function(){return new r(this)},r.prototype.applyRawParams=function(r){return this.paramValues=this.paramSchema.reduce(function(e,t){return i.applyPairs(e,[(n=t).id,n.value(r[n.id])]);var n},{}),this},r.prototype.parameter=function(e){return i.find(this.paramSchema,o.propEq("id",e))},r.prototype.equals=function(e,t){var n=this.diff(e,t);return n&&0===n.length},r.prototype.diff=function(e,t){if(this.state!==e.state)return!1;var n=t?t(this):this.paramSchema;return a.Param.changed(n,this.paramValues,e.paramValues)},r.clone=function(e){return e.clone()},r}();n.PathNode=r},{"../common/common":3,"../common/hof":6,"../params/param":26}],32:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var f=e("../common/common"),h=e("../common/hof"),r=e("../state/targetState"),d=e("./pathNode"),i=function(){function p(){}return p.makeTargetState=function(e,t){var n=f.tail(t).state;return new r.TargetState(e,n,t.map(h.prop("paramValues")).reduce(f.mergeR,{}),{})},p.buildPath=function(e){var t=e.params();return e.$state().path.map(function(e){return new d.PathNode(e).applyRawParams(t)})},p.buildToPath=function(e,t){var n=p.buildPath(t);return t.options().inherit?p.inheritParams(e,n,Object.keys(t.params())):n},p.applyViewConfigs=function(i,o,t){o.filter(function(e){return f.inArray(t,e.state)}).forEach(function(t){var e=f.values(t.state.views||{}),n=p.subPath(o,function(e){return e===t}),r=e.map(function(e){return i.createViewConfig(n,e)});t.views=r.reduce(f.unnestR,[])})},p.inheritParams=function(u,e,c){void 0===c&&(c=[]);var l=u.map(function(e){return e.paramSchema}).reduce(f.unnestR,[]).filter(function(e){return!e.inherit}).map(h.prop("id"));return e.map(function(e){var t=f.extend({},e&&e.paramValues),n=f.pick(t,c);t=f.omit(t,c);var r,i,o,a=f.omit((r=u,i=e.state,o=f.find(r,h.propEq("state",i)),f.extend({},o&&o.paramValues)||{}),l),s=f.extend(t,a,n);return new d.PathNode(e.state).applyRawParams(s)})},p.treeChanges=function(e,r,t){for(var n,i,o,a,s,u,c=Math.min(e.length,r.length),l=0;l<c&&e[l].state!==t&&(n=e[l],i=r[l],n.equals(i,p.nonDynamicParams));)l++;a=(o=e).slice(0,l),s=o.slice(l);var f=a.map(function(e,t){var n=e.clone();return n.paramValues=r[t].paramValues,n});return u=r.slice(l),{from:o,to:f.concat(u),retained:a,retainedWithToParams:f,exiting:s,entering:u}},p.matching=function(e,t,i){var o=!1;return f.arrayTuples(e,t).reduce(function(e,t){var n=t[0],r=t[1];return(o=o||!n.equals(r,i))?e:e.concat(n)},[])},p.equals=function(e,t,n){return e.length===t.length&&p.matching(e,t,n).length===e.length},p.subPath=function(e,t){var n=f.find(e,t),r=e.indexOf(n);return-1===r?void 0:e.slice(0,r+1)},p.nonDynamicParams=function(e){return e.state.parameters({inherit:!1}).filter(function(e){return!e.dynamic})},p.paramValues=function(e){return e.reduce(function(e,t){return f.extend(e,t.paramValues)},{})},p}();n.PathUtils=i},{"../common/common":3,"../common/hof":6,"../state/targetState":45,"./pathNode":31}],33:[function(e,t,n){"use strict";function r(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}Object.defineProperty(n,"__esModule",{value:!0}),r(e("./interface")),r(e("./resolvable")),r(e("./resolveContext"))},{"./interface":34,"./resolvable":35,"./resolveContext":36}],34:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.resolvePolicies={when:{LAZY:"LAZY",EAGER:"EAGER"},async:{WAIT:"WAIT",NOWAIT:"NOWAIT",RXWAIT:"RXWAIT"}}},{}],35:[function(e,t,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var s=e("../common/common"),u=e("../common/coreservices"),c=e("../common/trace"),n=e("../common/strings"),l=e("../common/predicates"),f=e("../common/predicates");r.defaultResolvePolicy={when:"LAZY",async:"WAIT"};var i=function(){function a(e,t,n,r,i){if(this.resolved=!1,this.promise=void 0,e instanceof a)s.extend(this,e);else if(l.isFunction(t)){if(f.isNullOrUndefined(e))throw new Error("new Resolvable(): token argument is required");if(!l.isFunction(t))throw new Error("new Resolvable(): resolveFn argument must be a function");this.token=e,this.policy=r,this.resolveFn=t,this.deps=n||[],this.data=i,this.resolved=void 0!==i,this.promise=this.resolved?u.services.$q.when(this.data):void 0}else if(l.isObject(e)&&e.token&&(e.hasOwnProperty("resolveFn")||e.hasOwnProperty("data"))){var o=e;return new a(o.token,o.resolveFn,o.deps,o.policy,o.data)}}return a.prototype.getPolicy=function(e){var t=this.policy||{},n=e&&e.resolvePolicy||{};return{when:t.when||n.when||r.defaultResolvePolicy.when,async:t.async||n.async||r.defaultResolvePolicy.async}},a.prototype.resolve=function(t,n){var r=this,e=u.services.$q,i=t.findNode(this),o=i&&i.state,a="RXWAIT"===this.getPolicy(o).async?function(e){var t=e.cache(1);return t.take(1).toPromise().then(function(){return t})}:s.identity;return this.promise=e.when().then(function(){return e.all(t.getDependencies(r).map(function(e){return e.get(t,n)}))}).then(function(e){return r.resolveFn.apply(null,e)}).then(a).then(function(e){return r.data=e,r.resolved=!0,r.resolveFn=null,c.trace.traceResolvableResolved(r,n),r.data})},a.prototype.get=function(e,t){return this.promise||this.resolve(e,t)},a.prototype.toString=function(){return"Resolvable(token: "+n.stringify(this.token)+", requires: ["+this.deps.map(n.stringify)+"])"},a.prototype.clone=function(){return new a(this)},a.fromData=function(e,t){return new a(e,function(){return t},null,null,t)},a}();r.Resolvable=i},{"../common/common":3,"../common/coreservices":4,"../common/predicates":8,"../common/strings":10,"../common/trace":11}],36:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o=e("../common/common"),f=e("../common/hof"),r=e("../common/trace"),i=e("../common/coreservices"),a=e("./interface"),s=e("./resolvable"),u=e("../path/pathUtils"),c=e("../common/strings"),l=e("../common"),p=a.resolvePolicies.when,h=[p.EAGER,p.LAZY],d=[p.EAGER];n.NATIVE_INJECTOR_TOKEN="Native Injector";var m=function(){function e(e){this._path=e}return e.prototype.getTokens=function(){return this._path.reduce(function(e,t){return e.concat(t.resolvables.map(function(e){return e.token}))},[]).reduce(o.uniqR,[])},e.prototype.getResolvable=function(t){var e=this._path.map(function(e){return e.resolvables}).reduce(o.unnestR,[]).filter(function(e){return e.token===t});return o.tail(e)},e.prototype.getPolicy=function(e){var t=this.findNode(e);return e.getPolicy(t.state)},e.prototype.subContext=function(t){return new e(u.PathUtils.subPath(this._path,function(e){return e.state===t}))},e.prototype.addResolvables=function(e,t){var n=o.find(this._path,f.propEq("state",t)),r=e.map(function(e){return e.token});n.resolvables=n.resolvables.filter(function(e){return-1===r.indexOf(e.token)}).concat(e)},e.prototype.resolvePath=function(e,s){var u=this;void 0===e&&(e="LAZY");var c=(o.inArray(h,e)?e:"LAZY")===a.resolvePolicies.when.EAGER?d:h;r.trace.traceResolvePath(this._path,e,s);var l=function(t,n){return function(e){return o.inArray(t,u.getPolicy(e)[n])}},t=this._path.reduce(function(e,t){var n=t.resolvables.filter(l(c,"when")),r=n.filter(l(["NOWAIT"],"async")),i=n.filter(f.not(l(["NOWAIT"],"async"))),o=u.subContext(t.state),a=function(t){return t.get(o,s).then(function(e){return{token:t.token,value:e}})};return r.forEach(a),e.concat(i.map(a))},[]);return i.services.$q.all(t)},e.prototype.injector=function(){return this._injector||(this._injector=new v(this))},e.prototype.findNode=function(t){return o.find(this._path,function(e){return o.inArray(e.resolvables,t)})},e.prototype.getDependencies=function(t){var r=this,n=this.findNode(t),i=(u.PathUtils.subPath(this._path,function(e){return e===n})||this._path).reduce(function(e,t){return e.concat(t.resolvables)},[]).filter(function(e){return e!==t});return t.deps.map(function(t){var e=i.filter(function(e){return e.token===t});if(e.length)return o.tail(e);var n=r.injector().getNative(t);if(l.isUndefined(n))throw new Error("Could not find Dependency Injection token: "+c.stringify(t));return new s.Resolvable(t,function(){return n},[],n)})},e}();n.ResolveContext=m;var v=function(){function e(e){this.context=e,this.native=this.get(n.NATIVE_INJECTOR_TOKEN)||i.services.$injector}return e.prototype.get=function(e){var t=this.context.getResolvable(e);if(t){if("NOWAIT"===this.context.getPolicy(t).async)return t.get(this.context);if(!t.resolved)throw new Error("Resolvable async .get() not complete:"+c.stringify(t.token));return t.data}return this.getNative(e)},e.prototype.getAsync=function(e){var t=this.context.getResolvable(e);return t?t.get(this.context):i.services.$q.when(this.native.get(e))},e.prototype.getNative=function(e){return this.native&&this.native.get(e)},e}()},{"../common":7,"../common/common":3,"../common/coreservices":4,"../common/hof":6,"../common/strings":10,"../common/trace":11,"../path/pathUtils":32,"./interface":34,"./resolvable":35}],37:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("./url/urlMatcherFactory"),i=e("./url/urlRouter"),o=e("./transition/transitionService"),a=e("./view/view"),s=e("./state/stateRegistry"),u=e("./state/stateService"),c=e("./globals"),l=e("./common/common"),f=e("./common/predicates"),p=e("./url/urlService"),h=e("./common/trace"),d=e("./common"),m=0,v=d.makeStub("LocationServices",["url","path","search","hash","onChange"]),g=d.makeStub("LocationConfig",["port","protocol","host","baseHref","html5Mode","hashPrefix"]),$=function(){function e(e,t){void 0===e&&(e=v),void 0===t&&(t=g),this.locationService=e,this.locationConfig=t,this.$id=m++,this._disposed=!1,this._disposables=[],this.trace=h.trace,this.viewService=new a.ViewService(this),this.globals=new c.UIRouterGlobals,this.transitionService=new o.TransitionService(this),this.urlMatcherFactory=new r.UrlMatcherFactory(this),this.urlRouter=new i.UrlRouter(this),this.urlService=new p.UrlService(this),this.stateRegistry=new s.StateRegistry(this),this.stateService=new u.StateService(this),this._plugins={},this.viewService._pluginapi._rootViewContext(this.stateRegistry.root()),this.globals.$current=this.stateRegistry.root(),this.globals.current=this.globals.$current.self,this.disposable(this.globals),this.disposable(this.stateService),this.disposable(this.stateRegistry),this.disposable(this.transitionService),this.disposable(this.urlService),this.disposable(e),this.disposable(t)}return e.prototype.disposable=function(e){this._disposables.push(e)},e.prototype.dispose=function(e){var t=this;e&&f.isFunction(e.dispose)?e.dispose(this):(this._disposed=!0,this._disposables.slice().forEach(function(e){try{"function"==typeof e.dispose&&e.dispose(t),l.removeFrom(t._disposables,e)}catch(e){}}))},e.prototype.plugin=function(e,t){void 0===t&&(t={});var n=new e(this,t);if(!n.name)throw new Error("Required property `name` missing on plugin: "+n);return this._disposables.push(n),this._plugins[n.name]=n},e.prototype.getPlugin=function(e){return e?this._plugins[e]:l.values(this._plugins)},e}();n.UIRouter=$},{"./common":7,"./common/common":3,"./common/predicates":8,"./common/trace":11,"./globals":12,"./state/stateRegistry":43,"./state/stateService":44,"./transition/transitionService":54,"./url/urlMatcherFactory":58,"./url/urlRouter":59,"./url/urlService":62,"./view/view":76}],38:[function(e,t,n){"use strict";function r(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}Object.defineProperty(n,"__esModule",{value:!0}),r(e("./stateBuilder")),r(e("./stateObject")),r(e("./stateMatcher")),r(e("./stateQueueManager")),r(e("./stateRegistry")),r(e("./stateService")),r(e("./targetState"))},{"./stateBuilder":39,"./stateMatcher":40,"./stateObject":41,"./stateQueueManager":42,"./stateRegistry":43,"./stateService":44,"./targetState":45}],39:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var u=e("../common/common"),c=e("../common/predicates"),l=e("../common/strings"),f=e("../common/hof"),p=e("../resolve/resolvable"),h=e("../common/coreservices");function s(e){return e.name}function d(e){return e.self.$$state=function(){return e},e.self}function m(e){return e.parent&&e.parent.data&&(e.data=e.self.data=u.inherit(e.parent.data,e.data)),e.data}var v=function(a,s){return function(e){var t=e.self;if(t&&t.url&&t.name&&t.name.match(/\.\*\*$/)){var n={};u.copy(t,n),n.url+="{remainder:any}",t=n}var r=e.parent,i=function(e){if(!c.isString(e))return!1;var t="^"===e.charAt(0);return{val:t?e.substring(1):e,root:t}}(t.url),o=i?a.compile(i.val,{state:t}):t.url;if(!o)return null;if(!a.isMatcher(o))throw new Error("Invalid url '"+o+"' in state '"+e+"'");return i&&i.root?o:(r&&r.navigable||s()).url.append(o)}};function g(e){return e.parent?e.parent.path.concat(e):[e]}function $(e){var t=e.parent?u.extend({},e.parent.includes):{};return t[e.name]=!0,t}function y(e){var t,n,r=function(e){return e.provide||e.token},i=f.pattern([[f.prop("resolveFn"),function(e){return new p.Resolvable(r(e),e.resolveFn,e.deps,e.policy)}],[f.prop("useFactory"),function(e){return new p.Resolvable(r(e),e.useFactory,e.deps||e.dependencies,e.policy)}],[f.prop("useClass"),function(e){return new p.Resolvable(r(e),function(){return new e.useClass},[],e.policy)}],[f.prop("useValue"),function(e){return new p.Resolvable(r(e),function(){return e.useValue},[],e.policy,e.useValue)}],[f.prop("useExisting"),function(e){return new p.Resolvable(r(e),u.identity,[e.useExisting],e.policy)}]]),o=f.pattern([[f.pipe(f.prop("val"),c.isString),function(e){return new p.Resolvable(e.token,u.identity,[e.val],e.policy)}],[f.pipe(f.prop("val"),c.isArray),function(e){return new p.Resolvable(e.token,u.tail(e.val),e.val.slice(0,-1),e.policy)}],[f.pipe(f.prop("val"),c.isFunction),function(e){return new p.Resolvable(e.token,e.val,(t=e.val,n=h.services.$injector,t.$inject||n&&n.annotate(t,n.strictDi)||"deferred"),e.policy);var t,n}]]),a=f.pattern([[f.is(p.Resolvable),function(e){return e}],[function(e){return!(!e.token||!e.resolveFn)},i],[function(e){return!(!e.provide&&!e.token||!(e.useValue||e.useFactory||e.useExisting||e.useClass))},i],[function(e){return!!(e&&e.val&&(c.isString(e.val)||c.isArray(e.val)||c.isFunction(e.val)))},o],[f.val(!0),function(e){throw new Error("Invalid resolve value: "+l.stringify(e))}]]),s=e.resolve;return(c.isArray(s)?s:(t=s,n=e.resolvePolicy||{},Object.keys(t||{}).map(function(e){return{token:e,val:t[e],deps:void 0,policy:n[e]}}))).map(a)}n.resolvablesBuilder=y;var r=function(){function e(t,e){this.matcher=t;var r,n,i=this,o=function(){return t.find("")},a=function(e){return""===e.name};this.builders={name:[s],self:[d],parent:[function(e){return a(e)?null:t.find(i.parentName(e))||o()}],data:[m],url:[v(e,o)],navigable:[(n=a,function(e){return!n(e)&&e.url?e:e.parent?e.parent.navigable:null})],params:[(r=e.paramFactory,function(n){var e=n.url&&n.url.parameters({inherit:!1})||[],t=u.values(u.mapObj(u.omit(n.params||{},e.map(f.prop("id"))),function(e,t){return r.fromConfig(t,null,n.self)}));return e.concat(t).map(function(e){return[e.id,e]}).reduce(u.applyPairs,{})})],views:[],path:[g],includes:[$],resolvables:[y]}}return e.prototype.builder=function(e,t){var n=this.builders,r=n[e]||[];return c.isString(e)&&!c.isDefined(t)?1<r.length?r:r[0]:c.isString(e)&&c.isFunction(t)?(n[e]=r,n[e].push(t),function(){return n[e].splice(n[e].indexOf(t,1))&&null}):void 0},e.prototype.build=function(e){var t=this.matcher,n=this.builders,r=this.parentName(e);if(r&&!t.find(r,void 0,!1))return null;for(var i in n)if(n.hasOwnProperty(i)){var o=n[i].reduce(function(t,n){return function(e){return n(e,t)}},u.noop);e[i]=o(e)}return e},e.prototype.parentName=function(e){var t=e.name||"",n=t.split(".");if("**"===n.pop()&&n.pop(),n.length){if(e.parent)throw new Error("States that specify the 'parent:' property should not have a '.' in their name ("+t+")");return n.join(".")}return e.parent?c.isString(e.parent)?e.parent:e.parent.name:""},e.prototype.name=function(e){var t=e.name;if(-1!==t.indexOf(".")||!e.parent)return t;var n=c.isString(e.parent)?e.parent:e.parent.name;return n?n+"."+t:t},e}();n.StateBuilder=r},{"../common/common":3,"../common/coreservices":4,"../common/hof":6,"../common/predicates":8,"../common/strings":10,"../resolve/resolvable":35}],40:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var s=e("../common/predicates"),u=e("../common/common"),r=function(){function e(e){this._states=e}return e.prototype.isRelative=function(e){return 0===(e=e||"").indexOf(".")||0===e.indexOf("^")},e.prototype.find=function(e,t,n){if(void 0===n&&(n=!0),e||""===e){var r=s.isString(e),i=r?e:e.name;this.isRelative(i)&&(i=this.resolvePath(i,t));var o=this._states[i];if(o&&(r||!(r||o!==e&&o.self!==e)))return o;if(r&&n){var a=u.values(this._states).filter(function(e){return e.__stateObjectCache.nameGlob&&e.__stateObjectCache.nameGlob.matches(i)});return 1<a.length&&console.log("stateMatcher.find: Found multiple matches for "+i+" using glob: ",a.map(function(e){return e.name})),a[0]}}},e.prototype.resolvePath=function(e,t){if(!t)throw new Error("No reference point given for path '"+e+"'");for(var n=this.find(t),r=e.split("."),i=r.length,o=0,a=n;o<i;o++)if(""!==r[o]||0!==o){if("^"!==r[o])break;if(!a.parent)throw new Error("Path '"+e+"' not valid for state '"+n.name+"'");a=a.parent}else a=n;var s=r.slice(o).join(".");return a.name+(a.name&&s?".":"")+s},e}();n.StateMatcher=r},{"../common/common":3,"../common/predicates":8}],41:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("../common/common"),i=e("../common/hof"),o=e("../common/glob"),a=e("../common/predicates"),s=function(){function n(e){return n.create(e||{})}return n.create=function(e){e=n.isStateClass(e)?new e:e;var t=r.inherit(r.inherit(e,n.prototype));return e.$$state=function(){return t},t.self=e,t.__stateObjectCache={nameGlob:o.Glob.fromString(t.name)},t},n.prototype.is=function(e){return this===e||this.self===e||this.fqn()===e},n.prototype.fqn=function(){if(!(this.parent&&this.parent instanceof this.constructor))return this.name;var e=this.parent.fqn();return e?e+"."+this.name:this.name},n.prototype.root=function(){return this.parent&&this.parent.root()||this},n.prototype.parameters=function(t){return((t=r.defaults(t,{inherit:!0,matchingKeys:null})).inherit&&this.parent&&this.parent.parameters()||[]).concat(r.values(this.params)).filter(function(e){return!t.matchingKeys||t.matchingKeys.hasOwnProperty(e.id)})},n.prototype.parameter=function(e,t){return void 0===t&&(t={}),this.url&&this.url.parameter(e,t)||r.find(r.values(this.params),i.propEq("id",e))||t.inherit&&this.parent&&this.parent.parameter(e)},n.prototype.toString=function(){return this.fqn()},n.isStateClass=function(e){return a.isFunction(e)&&!0===e.__uiRouterState},n.isState=function(e){return a.isObject(e.__stateObjectCache)},n}();n.StateObject=s},{"../common/common":3,"../common/glob":5,"../common/hof":6,"../common/predicates":8}],42:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=e("../common"),o=e("./stateObject"),r=function(){function e(e,t,n,r){this.router=e,this.states=t,this.builder=n,this.listeners=r,this.queue=[]}return e.prototype.dispose=function(){this.queue=[]},e.prototype.register=function(e){var t=this.queue,n=o.StateObject.create(e),r=n.name;if(!i.isString(r))throw new Error("State must have a valid name");if(this.states.hasOwnProperty(r)||i.inArray(t.map(i.prop("name")),r))throw new Error("State '"+r+"' is already defined");return t.push(n),this.flush(),n},e.prototype.flush=function(){for(var t=this,e=this.queue,n=this.states,r=this.builder,i=[],o=[],a={},s=function(e){return t.states.hasOwnProperty(e)&&t.states[e]},u=function(){i.length&&t.listeners.forEach(function(e){return e("registered",i.map(function(e){return e.self}))})};0<e.length;){var c=e.shift(),l=c.name,f=r.build(c),p=o.indexOf(c);if(f){var h=s(l);if(h&&h.name===l)throw new Error("State '"+l+"' is already defined");var d=s(l+".**");d&&this.router.stateRegistry.deregister(d),n[l]=c,this.attachRoute(c),0<=p&&o.splice(p,1),i.push(c)}else{var m=a[l];if(a[l]=e.length,0<=p&&m===e.length)return e.push(c),u(),n;p<0&&o.push(c),e.push(c)}}return u(),n},e.prototype.attachRoute=function(e){if(!e.abstract&&e.url){var t=this.router.urlService.rules;t.rule(t.urlRuleFactory.create(e))}},e}();n.StateQueueManager=r},{"../common":7,"./stateObject":41}],43:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("./stateMatcher"),i=e("./stateBuilder"),o=e("./stateQueueManager"),a=e("../common/common"),s=e("../common/hof"),u=function(){function e(e){this.router=e,this.states={},this.listeners=[],this.matcher=new r.StateMatcher(this.states),this.builder=new i.StateBuilder(this.matcher,e.urlMatcherFactory),this.stateQueue=new o.StateQueueManager(e,this.states,this.builder,this.listeners),this._registerRoot()}return e.prototype._registerRoot=function(){(this._root=this.stateQueue.register({name:"",url:"^",views:null,params:{"#":{value:null,type:"hash",dynamic:!0}},abstract:!0})).navigable=null},e.prototype.dispose=function(){var t=this;this.stateQueue.dispose(),this.listeners=[],this.get().forEach(function(e){return t.get(e)&&t.deregister(e)})},e.prototype.onStatesChanged=function(e){return this.listeners.push(e),function(){a.removeFrom(this.listeners)(e)}.bind(this)},e.prototype.root=function(){return this._root},e.prototype.register=function(e){return this.stateQueue.register(e)},e.prototype._deregisterTree=function(e){var n=this,r=this.get().map(function(e){return e.$$state()}),i=function(t){var e=r.filter(function(e){return-1!==t.indexOf(e.parent)});return 0===e.length?e:e.concat(i(e))},t=i([e]),o=[e].concat(t).reverse();return o.forEach(function(e){var t=n.router.urlService.rules;t.rules().filter(s.propEq("state",e)).forEach(function(e){return t.removeRule(e)}),delete n.states[e.name]}),o},e.prototype.deregister=function(e){var t=this.get(e);if(!t)throw new Error("Can't deregister state; not found: "+e);var n=this._deregisterTree(t.$$state());return this.listeners.forEach(function(e){return e("deregistered",n.map(function(e){return e.self}))}),n},e.prototype.get=function(e,t){var n=this;if(0===arguments.length)return Object.keys(this.states).map(function(e){return n.states[e].self});var r=this.matcher.find(e,t);return r&&r.self||null},e.prototype.decorator=function(e,t){return this.builder.builder(e,t)},e}();n.StateRegistry=u},{"../common/common":3,"../common/hof":6,"./stateBuilder":39,"./stateMatcher":40,"./stateQueueManager":42}],44:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var f=e("../common/common"),s=e("../common/predicates"),l=e("../common/queue"),p=e("../common/coreservices"),h=e("../path/pathUtils"),r=e("../path/pathNode"),d=e("../transition/transitionService"),m=e("../transition/rejectFactory"),v=e("./targetState"),u=e("../params/param"),c=e("../common/glob"),g=e("../resolve/resolveContext"),o=e("../hooks/lazyLoad"),i=e("../common/hof"),a=function(){function n(e){this.router=e,this.invalidCallbacks=[],this._defaultErrorHandler=function(e){e instanceof Error&&e.stack?(console.error(e),console.error(e.stack)):e instanceof m.Rejection?(console.error(e.toString()),e.detail&&e.detail.stack&&console.error(e.detail.stack)):console.error(e)};var t=Object.keys(n.prototype).filter(i.not(f.inArray(["current","$current","params","transition"])));f.createProxyFunctions(i.val(n.prototype),this,i.val(this),t)}return Object.defineProperty(n.prototype,"transition",{get:function(){return this.router.globals.transition},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"params",{get:function(){return this.router.globals.params},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"current",{get:function(){return this.router.globals.current},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"$current",{get:function(){return this.router.globals.$current},enumerable:!0,configurable:!0}),n.prototype.dispose=function(){this.defaultErrorHandler(f.noop),this.invalidCallbacks=[]},n.prototype._handleInvalidTargetState=function(e,n){var r=this,i=h.PathUtils.makeTargetState(this.router.stateRegistry,e),t=this.router.globals,o=function(){return t.transitionHistory.peekTail()},a=o(),s=new l.Queue(this.invalidCallbacks.slice()),u=new g.ResolveContext(e).injector(),c=function(e){if(e instanceof v.TargetState){var t=e;return(t=r.target(t.identifier(),t.params(),t.options())).valid()?o()!==a?m.Rejection.superseded().toPromise():r.transitionTo(t.identifier(),t.params(),t.options()):m.Rejection.invalid(t.error()).toPromise()}};return function t(){var e=s.dequeue();return void 0===e?m.Rejection.invalid(n.error()).toPromise():p.services.$q.when(e(n,i,u)).then(c).then(function(e){return e||t()})}()},n.prototype.onInvalid=function(e){return this.invalidCallbacks.push(e),function(){f.removeFrom(this.invalidCallbacks)(e)}.bind(this)},n.prototype.reload=function(e){return this.transitionTo(this.current,this.params,{reload:!s.isDefined(e)||e,inherit:!1,notify:!1})},n.prototype.go=function(e,t,n){var r={relative:this.$current,inherit:!0},i=f.defaults(n,r,d.defaultTransOpts);return this.transitionTo(e,t,i)},n.prototype.target=function(e,t,n){if(void 0===n&&(n={}),s.isObject(n.reload)&&!n.reload.name)throw new Error("Invalid reload state object");var r=this.router.stateRegistry;if(n.reloadState=!0===n.reload?r.root():r.matcher.find(n.reload,n.relative),n.reload&&!n.reloadState)throw new Error("No such reload state '"+(s.isString(n.reload)?n.reload:n.reload.name)+"'");return new v.TargetState(this.router.stateRegistry,e,t,n)},n.prototype.getCurrentPath=function(){var e=this,t=this.router.globals.successfulTransitions.peekTail();return t?t.treeChanges().to:[new r.PathNode(e.router.stateRegistry.root())]},n.prototype.transitionTo=function(e,t,n){var o=this;void 0===t&&(t={}),void 0===n&&(n={});var a=this.router,s=a.globals;n=f.defaults(n,d.defaultTransOpts);n=f.extend(n,{current:function(){return s.transition}});var r=this.target(e,t,n),i=this.getCurrentPath();if(!r.exists())return this._handleInvalidTargetState(i,r);if(!r.valid())return f.silentRejection(r.error());var u=function(i){return function(e){if(e instanceof m.Rejection){var t=a.globals.lastStartedTransitionId<=i.$id;if(e.type===m.RejectType.IGNORED)return t&&a.urlRouter.update(),p.services.$q.when(s.current);var n=e.detail;if(e.type===m.RejectType.SUPERSEDED&&e.redirected&&n instanceof v.TargetState){var r=i.redirect(n);return r.run().catch(u(r))}if(e.type===m.RejectType.ABORTED)return t&&a.urlRouter.update(),p.services.$q.reject(e)}return o.defaultErrorHandler()(e),p.services.$q.reject(e)}},c=this.router.transitionService.create(i,r),l=c.run().catch(u(c));return f.silenceUncaughtInPromise(l),f.extend(l,{transition:c})},n.prototype.is=function(e,t,n){n=f.defaults(n,{relative:this.$current});var r=this.router.stateRegistry.matcher.find(e,n.relative);if(s.isDefined(r)){if(this.$current!==r)return!1;if(!t)return!0;var i=r.parameters({inherit:!0,matchingKeys:t});return u.Param.equals(i,u.Param.values(i,t),this.params)}},n.prototype.includes=function(e,t,n){n=f.defaults(n,{relative:this.$current});var r=s.isString(e)&&c.Glob.fromString(e);if(r){if(!r.matches(this.$current.name))return!1;e=this.$current.name}var i=this.router.stateRegistry.matcher.find(e,n.relative),o=this.$current.includes;if(s.isDefined(i)){if(!s.isDefined(o[i.name]))return!1;if(!t)return!0;var a=i.parameters({inherit:!0,matchingKeys:t});return u.Param.equals(a,u.Param.values(a,t),this.params)}},n.prototype.href=function(e,t,n){var r={lossy:!0,inherit:!0,absolute:!1,relative:this.$current};n=f.defaults(n,r),t=t||{};var i=this.router.stateRegistry.matcher.find(e,n.relative);if(!s.isDefined(i))return null;n.inherit&&(t=this.params.$inherit(t,this.$current,i));var o=i&&n.lossy?i.navigable:i;return o&&void 0!==o.url&&null!==o.url?this.router.urlRouter.href(o.url,t,{absolute:n.absolute}):null},n.prototype.defaultErrorHandler=function(e){return this._defaultErrorHandler=e||this._defaultErrorHandler},n.prototype.get=function(e,t){var n=this.router.stateRegistry;return 0===arguments.length?n.get():n.get(e,t||this.$current)},n.prototype.lazyLoad=function(e,t){var n=this.get(e);if(!n||!n.lazyLoad)throw new Error("Can not lazy load "+e);var r=this.getCurrentPath(),i=h.PathUtils.makeTargetState(this.router.stateRegistry,r);return t=t||this.router.transitionService.create(r,i),o.lazyLoadState(t,n)},n}();n.StateService=a},{"../common/common":3,"../common/coreservices":4,"../common/glob":5,"../common/hof":6,"../common/predicates":8,"../common/queue":9,"../hooks/lazyLoad":16,"../params/param":26,"../path/pathNode":31,"../path/pathUtils":32,"../resolve/resolveContext":36,"../transition/rejectFactory":50,"../transition/transitionService":54,"./targetState":45}],45:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=e("../common/predicates"),o=e("../common/strings"),a=e("../common"),r=function(){function r(e,t,n,r){this._stateRegistry=e,this._identifier=t,this._identifier=t,this._params=a.extend({},n||{}),this._options=a.extend({},r||{}),this._definition=e.matcher.find(t,this._options.relative)}return r.prototype.name=function(){return this._definition&&this._definition.name||this._identifier},r.prototype.identifier=function(){return this._identifier},r.prototype.params=function(){return this._params},r.prototype.$state=function(){return this._definition},r.prototype.state=function(){return this._definition&&this._definition.self},r.prototype.options=function(){return this._options},r.prototype.exists=function(){return!(!this._definition||!this._definition.self)},r.prototype.valid=function(){return!this.error()},r.prototype.error=function(){var e=this.options().relative;if(this._definition||!e)return this._definition?this._definition.self?void 0:"State '"+this.name()+"' has an invalid definition":"No such state '"+this.name()+"'";var t=e.name?e.name:e;return"Could not resolve '"+this.name()+"' from state '"+t+"'"},r.prototype.toString=function(){return"'"+this.name()+"'"+o.stringify(this.params())},r.prototype.withState=function(e){return new r(this._stateRegistry,e,this._params,this._options)},r.prototype.withParams=function(e,t){void 0===t&&(t=!1);var n=t?e:a.extend({},this._params,e);return new r(this._stateRegistry,this._identifier,n,this._options)},r.prototype.withOptions=function(e,t){void 0===t&&(t=!1);var n=t?e:a.extend({},this._options,e);return new r(this._stateRegistry,this._identifier,this._params,n)},r.isDef=function(e){return e&&e.state&&(i.isString(e.state)||i.isString(e.state.name))},r}();n.TargetState=r},{"../common":7,"../common/predicates":8,"../common/strings":10}],46:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var u=e("../common/common"),o=e("../common/predicates"),c=e("./interface"),l=e("./transitionHook"),r=function(){function e(e){this.transition=e}return e.prototype.buildHooksForPhase=function(e){var t=this;return this.transition.router.transitionService._pluginapi._getEvents(e).map(function(e){return t.buildHooks(e)}).reduce(u.unnestR,[]).filter(u.identity)},e.prototype.buildHooks=function(o){var a=this.transition,e=a.treeChanges(),t=this.getMatchingHooks(o,e,a);if(!t)return[];var s={transition:a,current:a.options().current};return t.map(function(i){return i.matches(e,a)[o.criteriaMatchPath.name].map(function(e){var t=u.extend({bind:i.bind,traceData:{hookType:o.name,context:e}},s),n=o.criteriaMatchPath.scope===c.TransitionHookScope.STATE?e.state.self:null,r=new l.TransitionHook(a,n,i,t);return{hook:i,node:e,transitionHook:r}})}).reduce(u.unnestR,[]).sort(function(i){void 0===i&&(i=!1);return function(e,t){var n=i?-1:1,r=(e.node.state.path.length-t.node.state.path.length)*n;return 0!==r?r:t.hook.priority-e.hook.priority}}(o.reverseSort)).map(function(e){return e.transitionHook})},e.prototype.getMatchingHooks=function(t,n,r){var e=t.hookPhase===c.TransitionHookPhase.CREATE,i=this.transition.router.transitionService;return(e?[i]:[this.transition,i]).map(function(e){return e.getHooks(t.name)}).filter(u.assertPredicate(o.isArray,"broken event named: "+t.name)).reduce(u.unnestR,[]).filter(function(e){return e.matches(n,r)})},e}();n.HookBuilder=r},{"../common/common":3,"../common/predicates":8,"./interface":49,"./transitionHook":53}],47:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var c=e("../common"),l=e("./interface");function i(e,t,n){var i=c.isString(t)?[t]:t;return!!(c.isFunction(i)?i:function(e){for(var t=i,n=0;n<t.length;n++){var r=new c.Glob(t[n]);if(r&&r.matches(e.name)||!r&&t[n]===e.name)return!0}return!1})(e,n)}n.matchState=i;var u=function(){function e(e,t,n,r,i,o){void 0===o&&(o={}),this.tranSvc=e,this.eventType=t,this.callback=n,this.matchCriteria=r,this.removeHookFromRegistry=i,this.invokeCount=0,this._deregistered=!1,this.priority=o.priority||0,this.bind=o.bind||null,this.invokeLimit=o.invokeLimit}return e.prototype._matchingNodes=function(e,t,n){if(!0===t)return e;var r=e.filter(function(e){return i(e.state,t,n)});return r.length?r:null},e.prototype._getDefaultMatchCriteria=function(){return c.mapObj(this.tranSvc._pluginapi._getPathTypes(),function(){return!0})},e.prototype._getMatchingNodes=function(o,a){var s=this,u=c.extend(this._getDefaultMatchCriteria(),this.matchCriteria);return c.values(this.tranSvc._pluginapi._getPathTypes()).reduce(function(e,t){var n=t.scope===l.TransitionHookScope.STATE,r=o[t.name]||[],i=n?r:[c.tail(r)];return e[t.name]=s._matchingNodes(i,u[t.name],a),e},{})},e.prototype.matches=function(e,t){var n=this._getMatchingNodes(e,t);return c.values(n).every(c.identity)?n:null},e.prototype.deregister=function(){this.removeHookFromRegistry(this),this._deregistered=!0},e}();n.RegisteredHook=u,n.makeEvent=function(e,i,o){var a=(e._registeredHooks=e._registeredHooks||{})[o.name]=[],s=c.removeFrom(a);function t(e,t,n){void 0===n&&(n={});var r=new u(i,o,t,e,s,n);return a.push(r),r.deregister.bind(r)}return e[o.name]=t}},{"../common":7,"./interface":49}],48:[function(e,t,n){"use strict";function r(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}Object.defineProperty(n,"__esModule",{value:!0}),r(e("./interface")),r(e("./hookBuilder")),r(e("./hookRegistry")),r(e("./rejectFactory")),r(e("./transition")),r(e("./transitionHook")),r(e("./transitionEventType")),r(e("./transitionService"))},{"./hookBuilder":46,"./hookRegistry":47,"./interface":49,"./rejectFactory":50,"./transition":51,"./transitionEventType":52,"./transitionHook":53,"./transitionService":54}],49:[function(e,t,n){"use strict";var r,i,o,a;Object.defineProperty(n,"__esModule",{value:!0}),(i=r||(r={}))[i.CREATE=0]="CREATE",i[i.BEFORE=1]="BEFORE",i[i.RUN=2]="RUN",i[i.SUCCESS=3]="SUCCESS",i[i.ERROR=4]="ERROR",n.TransitionHookPhase=r,(a=o||(o={}))[a.TRANSITION=0]="TRANSITION",a[a.STATE=1]="STATE",n.TransitionHookScope=o},{}],50:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i,r,o=e("../common/common"),a=e("../common/strings"),s=e("../common/hof");(r=i||(i={}))[r.SUPERSEDED=2]="SUPERSEDED",r[r.ABORTED=3]="ABORTED",r[r.INVALID=4]="INVALID",r[r.IGNORED=5]="IGNORED",r[r.ERROR=6]="ERROR",n.RejectType=i;var u=0,c=function(){function r(e,t,n){this.$id=u++,this.type=e,this.message=t,this.detail=n}return r.isRejectionPromise=function(e){return e&&"function"==typeof e.then&&s.is(r)(e._transitionRejection)},r.superseded=function(e,t){var n=new r(i.SUPERSEDED,"The transition has been superseded by a different transition",e);return t&&t.redirected&&(n.redirected=!0),n},r.redirected=function(e){return r.superseded(e,{redirected:!0})},r.invalid=function(e){return new r(i.INVALID,"This transition is invalid",e)},r.ignored=function(e){return new r(i.IGNORED,"The transition was ignored",e)},r.aborted=function(e){return new r(i.ABORTED,"The transition has been aborted",e)},r.errored=function(e){return new r(i.ERROR,"The transition errored",e)},r.normalize=function(e){return s.is(r)(e)?e:r.errored(e)},r.prototype.toString=function(){var e,t=(e=this.detail)&&e.toString!==Object.prototype.toString?e.toString():a.stringify(e);return"Transition Rejection($id: "+this.$id+" type: "+this.type+", message: "+this.message+", detail: "+t+")"},r.prototype.toPromise=function(){return o.extend(o.silentRejection(this),{_transitionRejection:this})},r}();n.Rejection=c},{"../common/common":3,"../common/hof":6,"../common/strings":10}],51:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=e("../common/trace"),a=e("../common/coreservices"),s=e("../common/strings"),c=e("../common/common"),r=e("../common/predicates"),l=e("../common/hof"),u=e("./interface"),f=e("./transitionHook"),o=e("./hookRegistry"),p=e("./hookBuilder"),h=e("../path/pathUtils"),d=e("../params/param"),m=e("../resolve/resolvable"),v=e("../resolve/resolveContext"),g=e("./rejectFactory"),$=e("../common"),y=l.prop("self"),b=function(){function t(e,t,n){var r=this;if(this._deferred=a.services.$q.defer(),this.promise=this._deferred.promise,this._registeredHooks={},this._hookBuilder=new p.HookBuilder(this),this.isActive=function(){return r.router.globals.transition===r},this.router=n,!(this._targetState=t).valid())throw new Error(t.error());this._options=c.extend({current:l.val(this)},t.options()),this.$id=n.transitionService._transitionCount++;var i=h.PathUtils.buildToPath(e,t);this._treeChanges=h.PathUtils.treeChanges(e,i,this._options.reloadState),this.createTransitionHookRegFns();var o=this._hookBuilder.buildHooksForPhase(u.TransitionHookPhase.CREATE);f.TransitionHook.invokeHooks(o,function(){return null}),this.applyViewConfigs(n)}return t.prototype.onBefore=function(e,t,n){},t.prototype.onStart=function(e,t,n){},t.prototype.onExit=function(e,t,n){},t.prototype.onRetain=function(e,t,n){},t.prototype.onEnter=function(e,t,n){},t.prototype.onFinish=function(e,t,n){},t.prototype.onSuccess=function(e,t,n){},t.prototype.onError=function(e,t,n){},t.prototype.createTransitionHookRegFns=function(){var t=this;this.router.transitionService._pluginapi._getEvents().filter(function(e){return e.hookPhase!==u.TransitionHookPhase.CREATE}).forEach(function(e){return o.makeEvent(t,t.router.transitionService,e)})},t.prototype.getHooks=function(e){return this._registeredHooks[e]},t.prototype.applyViewConfigs=function(e){var t=this._treeChanges.entering.map(function(e){return e.state});h.PathUtils.applyViewConfigs(e.transitionService.$view,this._treeChanges.to,t)},t.prototype.$from=function(){return c.tail(this._treeChanges.from).state},t.prototype.$to=function(){return c.tail(this._treeChanges.to).state},t.prototype.from=function(){return this.$from().self},t.prototype.to=function(){return this.$to().self},t.prototype.targetState=function(){return this._targetState},t.prototype.is=function(e){return e instanceof t?this.is({to:e.$to().name,from:e.$from().name}):!(e.to&&!o.matchState(this.$to(),e.to,this)||e.from&&!o.matchState(this.$from(),e.from,this))},t.prototype.params=function(e){return void 0===e&&(e="to"),Object.freeze(this._treeChanges[e].map(l.prop("paramValues")).reduce(c.mergeR,{}))},t.prototype.paramsChanged=function(){var e=this.params("from"),n=this.params("to"),t=[].concat(this._treeChanges.to).concat(this._treeChanges.from).map(function(e){return e.paramSchema}).reduce($.flattenR,[]).reduce($.uniqR,[]);return d.Param.changed(t,e,n).reduce(function(e,t){return e[t.id]=n[t.id],e},{})},t.prototype.injector=function(t,e){void 0===e&&(e="to");var n=this._treeChanges[e];return t&&(n=h.PathUtils.subPath(n,function(e){return e.state===t||e.state.name===t})),new v.ResolveContext(n).injector()},t.prototype.getResolveTokens=function(e){return void 0===e&&(e="to"),new v.ResolveContext(this._treeChanges[e]).getTokens()},t.prototype.addResolvable=function(e,t){void 0===t&&(t=""),e=l.is(m.Resolvable)(e)?e:new m.Resolvable(e);var n="string"==typeof t?t:t.name,r=this._treeChanges.to,i=c.find(r,function(e){return e.state.name===n});new v.ResolveContext(r).addResolvables([e],i.state)},t.prototype.redirectedFrom=function(){return this._options.redirectedFrom||null},t.prototype.originalTransition=function(){var e=this.redirectedFrom();return e&&e.originalTransition()||this},t.prototype.options=function(){return this._options},t.prototype.entering=function(){return c.map(this._treeChanges.entering,l.prop("state")).map(y)},t.prototype.exiting=function(){return c.map(this._treeChanges.exiting,l.prop("state")).map(y).reverse()},t.prototype.retained=function(){return c.map(this._treeChanges.retained,l.prop("state")).map(y)},t.prototype.views=function(e,t){void 0===e&&(e="entering");var n=this._treeChanges[e];return(n=t?n.filter(l.propEq("state",t)):n).map(l.prop("views")).filter(c.identity).reduce(c.unnestR,[])},t.prototype.treeChanges=function(e){return e?this._treeChanges[e]:this._treeChanges},t.prototype.redirect=function(e){for(var t=1,n=this;null!=(n=n.redirectedFrom());)if(20<++t)throw new Error("Too many consecutive Transition redirects (20+)");var r={redirectedFrom:this,source:"redirect"};"url"===this.options().source&&!1!==e.options().location&&(r.location="replace");var i=c.extend({},this.options(),e.options(),r);e=e.withOptions(i,!0);var o,a=this.router.transitionService.create(this._treeChanges.from,e),s=this._treeChanges.entering,u=a._treeChanges.entering;return h.PathUtils.matching(u,s,h.PathUtils.nonDynamicParams).filter(l.not((o=e.options().reloadState,function(e){return o&&e.state.includes[o.name]}))).forEach(function(e,t){e.resolvables=s[t].resolvables}),a},t.prototype._changedParams=function(){var e=this._treeChanges;if(!this._options.reload&&(!e.exiting.length&&!e.entering.length&&e.to.length===e.from.length&&!c.arrayTuples(e.to,e.from).map(function(e){return e[0].state!==e[1].state}).reduce(c.anyTrueR,!1))){var t=e.to.map(function(e){return e.paramSchema}),n=[e.to,e.from].map(function(e){return e.map(function(e){return e.paramValues})}),r=n[0],i=n[1];return c.arrayTuples(t,r,i).map(function(e){var t=e[0],n=e[1],r=e[2];return d.Param.changed(t,n,r)}).reduce(c.unnestR,[])}},t.prototype.dynamic=function(){var e=this._changedParams();return!!e&&e.map(function(e){return e.dynamic}).reduce(c.anyTrueR,!1)},t.prototype.ignored=function(){return!!this._ignoredReason()},t.prototype._ignoredReason=function(){var e=this.router.globals.transition,r=this._options.reloadState,t=function(e,t){if(e.length!==t.length)return!1;var n=h.PathUtils.matching(e,t);return e.length===n.filter(function(e){return!r||!e.state.includes[r.name]}).length},n=this.treeChanges(),i=e&&e.treeChanges();return i&&t(i.to,n.to)&&t(i.exiting,n.exiting)?"SameAsPending":0===n.exiting.length&&0===n.entering.length&&t(n.from,n.to)?"SameAsCurrent":void 0},t.prototype.run=function(){var t=this,n=f.TransitionHook.runAllHooks,r=function(e){return t._hookBuilder.buildHooksForPhase(e)},e=r(u.TransitionHookPhase.BEFORE);return f.TransitionHook.invokeHooks(e,function(){var e=t.router.globals;return e.lastStartedTransitionId=t.$id,e.transition=t,e.transitionHistory.enqueue(t),i.trace.traceTransitionStart(t),a.services.$q.when(void 0)}).then(function(){var e=r(u.TransitionHookPhase.RUN);return f.TransitionHook.invokeHooks(e,function(){return a.services.$q.when(void 0)})}).then(function(){i.trace.traceSuccess(t.$to(),t),t.success=!0,t._deferred.resolve(t.to()),n(r(u.TransitionHookPhase.SUCCESS))},function(e){i.trace.traceError(e,t),t.success=!1,t._deferred.reject(e),t._error=e,n(r(u.TransitionHookPhase.ERROR))}),this.promise},t.prototype.valid=function(){return!this.error()||void 0!==this.success},t.prototype.abort=function(){r.isUndefined(this.success)&&(this._aborted=!0)},t.prototype.error=function(){var e=this.$to();if(e.self.abstract)return g.Rejection.invalid("Cannot transition to abstract state '"+e.name+"'");var t=e.parameters(),n=this.params(),r=t.filter(function(e){return!e.validates(n[e.id])});if(r.length){var i=r.map(function(e){return"["+e.id+":"+s.stringify(n[e.id])+"]"}).join(", "),o="The following parameter values are not valid for state '"+e.name+"': "+i;return g.Rejection.invalid(o)}return!1===this.success?this._error:void 0},t.prototype.toString=function(){var e=this.from(),t=this.to(),n=function(e){return null!==e["#"]&&void 0!==e["#"]?e:c.omit(e,["#"])};return"Transition#"+this.$id+"( '"+(r.isObject(e)?e.name:e)+"'"+s.stringify(n(this._treeChanges.from.map(l.prop("paramValues")).reduce(c.mergeR,{})))+" -> "+(this.valid()?"":"(X) ")+"'"+(r.isObject(t)?t.name:t)+"'"+s.stringify(n(this.params()))+" )"},t.diToken=t}();n.Transition=b},{"../common":7,"../common/common":3,"../common/coreservices":4,"../common/hof":6,"../common/predicates":8,"../common/strings":10,"../common/trace":11,"../params/param":26,"../path/pathUtils":32,"../resolve/resolvable":35,"../resolve/resolveContext":36,"./hookBuilder":46,"./hookRegistry":47,"./interface":49,"./rejectFactory":50,"./transitionHook":53}],52:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var u=e("./transitionHook"),r=function(e,t,n,r,i,o,a,s){void 0===i&&(i=!1),void 0===o&&(o=u.TransitionHook.HANDLE_RESULT),void 0===a&&(a=u.TransitionHook.REJECT_ERROR),void 0===s&&(s=!1),this.name=e,this.hookPhase=t,this.hookOrder=n,this.criteriaMatchPath=r,this.reverseSort=i,this.getResultHandler=o,this.getErrorHandler=a,this.synchronous=s};n.TransitionEventType=r},{"./transitionHook":53}],53:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=e("./interface"),s=e("../common/common"),u=e("../common/strings"),c=e("../common/predicates"),l=e("../common/hof"),f=e("../common/trace"),r=e("../common/coreservices"),p=e("./rejectFactory"),i=e("../state/targetState"),h={current:s.noop,transition:null,traceData:{},bind:null},o=function(){function o(e,t,n,r){var i=this;this.transition=e,this.stateContext=t,this.registeredHook=n,this.options=r,this.isSuperseded=function(){return i.type.hookPhase===a.TransitionHookPhase.RUN&&!i.options.transition.isActive()},this.options=s.defaults(r,h),this.type=n.eventType}return o.chain=function(e,t){return e.reduce(function(e,t){return e.then(function(){return t.invokeHook()})},t||r.services.$q.when())},o.invokeHooks=function(e,t){for(var n=0;n<e.length;n++){var r=e[n].invokeHook();if(c.isPromise(r)){var i=e.slice(n+1);return o.chain(i,r).then(t)}}return t()},o.runAllHooks=function(e){e.forEach(function(e){return e.invokeHook()})},o.prototype.logError=function(e){this.transition.router.stateService.defaultErrorHandler()(e)},o.prototype.invokeHook=function(){var t=this,n=this.registeredHook;if(!n._deregistered){var e=this.getNotCurrentRejection();if(e)return e;var r=this.options;f.trace.traceHookInvocation(this,this.transition,r);var i=function(e){return n.eventType.getErrorHandler(t)(e)},o=function(e){return n.eventType.getResultHandler(t)(e)};try{var a=n.callback.call(r.bind,t.transition,t.stateContext);return!this.type.synchronous&&c.isPromise(a)?a.catch(function(e){return p.Rejection.normalize(e).toPromise()}).then(o,i):o(a)}catch(e){return i(p.Rejection.normalize(e))}finally{n.invokeLimit&&++n.invokeCount>=n.invokeLimit&&n.deregister()}}},o.prototype.handleHookResult=function(e){var t=this,n=this.getNotCurrentRejection();return n||(c.isPromise(e)?e.then(function(e){return t.handleHookResult(e)}):(f.trace.traceHookResult(e,this.transition,this.options),!1===e?p.Rejection.aborted("Hook aborted transition").toPromise():l.is(i.TargetState)(e)?p.Rejection.redirected(e).toPromise():void 0))},o.prototype.getNotCurrentRejection=function(){var e=this.transition.router;return e._disposed?p.Rejection.aborted("UIRouter instance #"+e.$id+" has been stopped (disposed)").toPromise():this.transition._aborted?p.Rejection.aborted().toPromise():this.isSuperseded()?p.Rejection.superseded(this.options.current()).toPromise():void 0},o.prototype.toString=function(){var e=this.options,t=this.registeredHook,n=l.parse("traceData.hookType")(e)||"internal",r=l.parse("traceData.context.state.name")(e)||l.parse("traceData.context")(e)||"unknown",i=u.fnToString(t.callback);return n+" context: "+r+", "+u.maxLength(200,i)},o.HANDLE_RESULT=function(t){return function(e){return t.handleHookResult(e)}},o.LOG_REJECTED_RESULT=function(t){return function(e){c.isPromise(e)&&e.catch(function(e){return t.logError(p.Rejection.normalize(e))})}},o.LOG_ERROR=function(t){return function(e){return t.logError(e)}},o.REJECT_ERROR=function(e){return function(e){return s.silentRejection(e)}},o.THROW_ERROR=function(e){return function(e){throw e}},o}();n.TransitionHook=o},{"../common/common":3,"../common/coreservices":4,"../common/hof":6,"../common/predicates":8,"../common/strings":10,"../common/trace":11,"../state/targetState":45,"./interface":49,"./rejectFactory":50}],54:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("./interface"),i=e("./transition"),c=e("./hookRegistry"),o=e("../hooks/coreResolvables"),a=e("../hooks/redirectTo"),s=e("../hooks/onEnterExitRetain"),u=e("../hooks/resolve"),l=e("../hooks/views"),f=e("../hooks/updateGlobals"),p=e("../hooks/url"),h=e("../hooks/lazyLoad"),d=e("./transitionEventType"),m=e("./transitionHook"),v=e("../common/predicates"),g=e("../common/common"),$=e("../common/hof"),y=e("../hooks/ignoredTransition"),b=e("../hooks/invalidTransition");n.defaultTransOpts={location:!0,relative:null,inherit:!1,notify:!0,reload:!1,custom:{},current:function(){return null},source:"unknown"};var w=function(){function e(e){this._transitionCount=0,this._eventTypes=[],this._registeredHooks={},this._criteriaPaths={},this._router=e,this.$view=e.viewService,this._deregisterHookFns={},this._pluginapi=g.createProxyFunctions($.val(this),{},$.val(this),["_definePathType","_defineEvent","_getPathTypes","_getEvents","getHooks"]),this._defineCorePaths(),this._defineCoreEvents(),this._registerCoreTransitionHooks(),e.globals.successfulTransitions.onEvict(o.treeChangesCleanup)}return e.prototype.onCreate=function(e,t,n){},e.prototype.onBefore=function(e,t,n){},e.prototype.onStart=function(e,t,n){},e.prototype.onExit=function(e,t,n){},e.prototype.onRetain=function(e,t,n){},e.prototype.onEnter=function(e,t,n){},e.prototype.onFinish=function(e,t,n){},e.prototype.onSuccess=function(e,t,n){},e.prototype.onError=function(e,t,n){},e.prototype.dispose=function(e){g.values(this._registeredHooks).forEach(function(t){return t.forEach(function(e){e._deregistered=!0,g.removeFrom(t,e)})})},e.prototype.create=function(e,t){return new i.Transition(e,t,this._router)},e.prototype._defineCoreEvents=function(){var e=r.TransitionHookPhase,t=m.TransitionHook,n=this._criteriaPaths;this._defineEvent("onCreate",e.CREATE,0,n.to,!1,t.LOG_REJECTED_RESULT,t.THROW_ERROR,!0),this._defineEvent("onBefore",e.BEFORE,0,n.to),this._defineEvent("onStart",e.RUN,0,n.to),this._defineEvent("onExit",e.RUN,100,n.exiting,!0),this._defineEvent("onRetain",e.RUN,200,n.retained),this._defineEvent("onEnter",e.RUN,300,n.entering),this._defineEvent("onFinish",e.RUN,400,n.to),this._defineEvent("onSuccess",e.SUCCESS,0,n.to,!1,t.LOG_REJECTED_RESULT,t.LOG_ERROR,!0),this._defineEvent("onError",e.ERROR,0,n.to,!1,t.LOG_REJECTED_RESULT,t.LOG_ERROR,!0)},e.prototype._defineCorePaths=function(){var e=r.TransitionHookScope.STATE,t=r.TransitionHookScope.TRANSITION;this._definePathType("to",t),this._definePathType("from",t),this._definePathType("exiting",e),this._definePathType("retained",e),this._definePathType("entering",e)},e.prototype._defineEvent=function(e,t,n,r,i,o,a,s){void 0===i&&(i=!1),void 0===o&&(o=m.TransitionHook.HANDLE_RESULT),void 0===a&&(a=m.TransitionHook.REJECT_ERROR),void 0===s&&(s=!1);var u=new d.TransitionEventType(e,t,n,r,i,o,a,s);this._eventTypes.push(u),c.makeEvent(this,this,u)},e.prototype._getEvents=function(t){return(v.isDefined(t)?this._eventTypes.filter(function(e){return e.hookPhase===t}):this._eventTypes.slice()).sort(function(e,t){var n=e.hookPhase-t.hookPhase;return 0===n?e.hookOrder-t.hookOrder:n})},e.prototype._definePathType=function(e,t){this._criteriaPaths[e]={name:e,scope:t}},e.prototype._getPathTypes=function(){return this._criteriaPaths},e.prototype.getHooks=function(e){return this._registeredHooks[e]},e.prototype._registerCoreTransitionHooks=function(){var e=this._deregisterHookFns;e.addCoreResolves=o.registerAddCoreResolvables(this),e.ignored=y.registerIgnoredTransitionHook(this),e.invalid=b.registerInvalidTransitionHook(this),e.redirectTo=a.registerRedirectToHook(this),e.onExit=s.registerOnExitHook(this),e.onRetain=s.registerOnRetainHook(this),e.onEnter=s.registerOnEnterHook(this),e.eagerResolve=u.registerEagerResolvePath(this),e.lazyResolve=u.registerLazyResolveState(this),e.resolveAll=u.registerResolveRemaining(this),e.loadViews=l.registerLoadEnteringViews(this),e.activateViews=l.registerActivateViews(this),e.updateGlobals=f.registerUpdateGlobalState(this),e.updateUrl=p.registerUpdateUrl(this),e.lazyLoad=h.registerLazyLoadHook(this)},e}();n.TransitionService=w},{"../common/common":3,"../common/hof":6,"../common/predicates":8,"../hooks/coreResolvables":13,"../hooks/ignoredTransition":14,"../hooks/invalidTransition":15,"../hooks/lazyLoad":16,"../hooks/onEnterExitRetain":17,"../hooks/redirectTo":18,"../hooks/resolve":19,"../hooks/updateGlobals":20,"../hooks/url":21,"../hooks/views":22,"./hookRegistry":47,"./interface":49,"./transition":51,"./transitionEventType":52,"./transitionHook":53}],55:[function(e,t,n){"use strict";function r(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}Object.defineProperty(n,"__esModule",{value:!0}),r(e("./urlMatcher")),r(e("./urlMatcherFactory")),r(e("./urlRouter")),r(e("./urlRule")),r(e("./urlService"));var i=e("./urlRules");n.UrlRules=i.UrlRules;var o=e("./urlConfig");n.UrlConfig=o.UrlConfig},{"./urlConfig":56,"./urlMatcher":57,"./urlMatcherFactory":58,"./urlRouter":59,"./urlRule":60,"./urlRules":61,"./urlService":62}],56:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("../params"),i=e("../common"),o=function(){function e(e){var t=this;this.router=e,this.paramTypes=new r.ParamTypes,this._isCaseInsensitive=!1,this._isStrictMode=!0,this._defaultSquashPolicy=!1,this.dispose=function(){return t.paramTypes.dispose()},this.baseHref=function(){return t.router.locationConfig.baseHref()},this.hashPrefix=function(e){return t.router.locationConfig.hashPrefix(e)},this.host=function(){return t.router.locationConfig.host()},this.html5Mode=function(){return t.router.locationConfig.html5Mode()},this.port=function(){return t.router.locationConfig.port()},this.protocol=function(){return t.router.locationConfig.protocol()}}return e.prototype.caseInsensitive=function(e){return this._isCaseInsensitive=i.isDefined(e)?e:this._isCaseInsensitive},e.prototype.defaultSquashPolicy=function(e){if(i.isDefined(e)&&!0!==e&&!1!==e&&!i.isString(e))throw new Error("Invalid squash policy: "+e+". Valid policies: false, true, arbitrary-string");return this._defaultSquashPolicy=i.isDefined(e)?e:this._defaultSquashPolicy},e.prototype.strictMode=function(e){return this._isStrictMode=i.isDefined(e)?e:this._isStrictMode},e.prototype.type=function(e,t,n){var r=this.paramTypes.type(e,t,n);return i.isDefined(t)?this:r},e}();n.UrlConfig=o},{"../common":7,"../params":25}],57:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var w=e("../common/common"),_=e("../common/hof"),S=e("../common/predicates"),u=e("../params/param"),c=e("../common/strings"),g=e("../common");function $(e,t){var n=["",""],r=e.replace(/[\\\[\]\^$*+?.()|{}]/g,"\\$&");if(!t)return r;switch(t.squash){case!1:n=["(",")"+(t.isOptional?"?":"")];break;case!0:r=r.replace(/\/$/,""),n=["(?:/(",")|/)?"];break;default:n=["("+t.squash+"|",")?"]}return r+n[0]+t.type.pattern.source+n[1]}var l=c.splitOnDelim("/"),y={state:{params:{}},strict:!0,caseInsensitive:!0},r=function(){function v(o,a,e,t){var s=this;this._cache={path:[this]},this._children=[],this._params=[],this._segments=[],this._compiled=[],this.config=t=g.defaults(t,y),this.pattern=o;for(var n,r,i,u=/([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,c=/([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,l=[],f=0,p=function(e){if(!v.nameValidator.test(e))throw new Error("Invalid parameter name '"+e+"' in pattern '"+o+"'");if(w.find(s._params,_.propEq("id",e)))throw new Error("Duplicate parameter name '"+e+"' in pattern '"+o+"'")},h=function(e,t){var n,r=e[2]||e[3],i=t?e[4]:e[4]||("*"===e[1]?"[\\s\\S]*":null);return{id:r,regexp:i,segment:o.substring(f,e.index),type:i?a.type(i)||(n=i,w.inherit(a.type(t?"query":"path"),{pattern:new RegExp(n,s.config.caseInsensitive?"i":void 0)})):null}};(n=u.exec(o))&&!(0<=(r=h(n,!1)).segment.indexOf("?"));)p(r.id),this._params.push(e.fromPath(r.id,r.type,t.state)),this._segments.push(r.segment),l.push([r.segment,w.tail(this._params)]),f=u.lastIndex;var d=(i=o.substring(f)).indexOf("?");if(0<=d){var m=i.substring(d);if(i=i.substring(0,d),0<m.length)for(f=0;n=c.exec(m);)p((r=h(n,!0)).id),this._params.push(e.fromSearch(r.id,r.type,t.state)),f=u.lastIndex}this._segments.push(i),this._compiled=l.map(function(e){return $.apply(null,e)}).concat($(i))}return v.encodeDashes=function(e){return encodeURIComponent(e).replace(/-/g,function(e){return"%5C%"+e.charCodeAt(0).toString(16).toUpperCase()})},v.pathSegmentsAndParams=function(e){var t=e._segments,n=e._params.filter(function(e){return e.location===u.DefType.PATH});return w.arrayTuples(t,n.concat(void 0)).reduce(w.unnestR,[]).filter(function(e){return""!==e&&S.isDefined(e)})},v.queryParams=function(e){return e._params.filter(function(e){return e.location===u.DefType.SEARCH})},v.compare=function(e,t){var n=function(e){return e._cache.weights=e._cache.weights||(t=e,t._cache.segments=t._cache.segments||t._cache.path.map(v.pathSegmentsAndParams).reduce(w.unnestR,[]).reduce(c.joinNeighborsR,[]).map(function(e){return S.isString(e)?l(e):e}).reduce(w.unnestR,[])).map(function(e){return"/"===e?1:S.isString(e)?2:e instanceof u.Param?3:void 0});var t},r=n(e),i=n(t);!function(e,t,n){for(var r=Math.max(e.length,t.length);e.length<r;)e.push(n);for(;t.length<r;)t.push(n)}(r,i,0);var o,a,s=w.arrayTuples(r,i);for(a=0;a<s.length;a++)if(0!==(o=s[a][0]-s[a][1]))return o;return 0},v.prototype.append=function(e){return this._children.push(e),e._cache={path:this._cache.path.concat(e),parent:this,pattern:null},e},v.prototype.isRoot=function(){return this._cache.path[0]===this},v.prototype.toString=function(){return this.pattern},v.prototype.exec=function(e,r,t,n){var i=this;void 0===r&&(r={}),void 0===n&&(n={});var o,a,s,u=(o=this._cache,a="pattern",s=function(){return new RegExp(["^",w.unnest(i._cache.path.map(_.prop("_compiled"))).join(""),!1===i.config.strict?"/?":"","$"].join(""),i.config.caseInsensitive?"i":void 0)},o[a]=o[a]||s()).exec(e);if(!u)return null;var c,l,f,p=this.parameters(),h=p.filter(function(e){return!e.isSearch()}),d=p.filter(function(e){return e.isSearch()}),m=this._cache.path.map(function(e){return e._segments.length-1}).reduce(function(e,t){return e+t}),v={};if(m!==u.length-1)throw new Error("Unbalanced capture group in route '"+this.pattern+"'");for(var g=0;g<m;g++){for(var $=h[g],y=u[g+1],b=0;b<$.replace.length;b++)$.replace[b].from===y&&(y=$.replace[b].to);y&&!0===$.array&&(void 0,l=(c=function(e){return e.split("").reverse().join("")})(y).split(/-(?!\\)/),f=w.map(l,c),y=w.map(f,function(e){return e.replace(/\\-/g,"-")}).reverse()),S.isDefined(y)&&(y=$.type.decode(y)),v[$.id]=$.value(y)}return d.forEach(function(e){for(var t=r[e.id],n=0;n<e.replace.length;n++)e.replace[n].from===t&&(t=e.replace[n].to);S.isDefined(t)&&(t=e.type.decode(t)),v[e.id]=e.value(t)}),t&&(v["#"]=t),v},v.prototype.parameters=function(e){return void 0===e&&(e={}),!1===e.inherit?this._params:w.unnest(this._cache.path.map(function(e){return e._params}))},v.prototype.parameter=function(r,e){var i=this;void 0===e&&(e={});var t=this._cache.parent;return function(){for(var e=0,t=i._params;e<t.length;e++){var n=t[e];if(n.id===r)return n}}()||!1!==e.inherit&&t&&t.parameter(r,e)||null},v.prototype.validates=function(r){return r=r||{},this.parameters().filter(function(e){return r.hasOwnProperty(e.id)}).map(function(e){return n=r[(t=e).id],!t||t.validates(n);var t,n}).reduce(w.allTrueR,!0)},v.prototype.format=function(a){void 0===a&&(a={});var e=this._cache.path,t=e.map(v.pathSegmentsAndParams).reduce(w.unnestR,[]).map(function(e){return S.isString(e)?e:r(e)}),n=e.map(v.queryParams).reduce(w.unnestR,[]).map(r);if(t.concat(n).filter(function(e){return!1===e.isValid}).length)return null;function r(e){var t=e.value(a[e.id]),n=e.validates(t),r=e.isDefaultValue(t),i=!!r&&e.squash,o=e.type.encode(t);return{param:e,value:t,isValid:n,isDefaultValue:r,squash:i,encoded:o}}var i=t.reduce(function(e,t){if(S.isString(t))return e+t;var n=t.squash,r=t.encoded,i=t.param;return!0===n?e.match(/\/$/)?e.slice(0,-1):e:S.isString(n)?e+n:!1!==n?e:null==r?e:S.isArray(r)?e+w.map(r,v.encodeDashes).join("-"):i.raw?e+r:e+encodeURIComponent(r)},""),o=n.map(function(e){var t=e.param,n=e.squash,r=e.encoded,i=e.isDefaultValue;if(!(null==r||i&&!1!==n)&&(S.isArray(r)||(r=[r]),0!==r.length))return t.raw||(r=w.map(r,encodeURIComponent)),r.map(function(e){return t.id+"="+e})}).filter(w.identity).reduce(w.unnestR,[]).join("&");return i+(o?"?"+o:"")+(a["#"]?"#"+a["#"]:"")},v.nameValidator=/^\w+([-.]+\w+)*(?:\[\])?$/,v}();n.UrlMatcher=r},{"../common":7,"../common/common":3,"../common/hof":6,"../common/predicates":8,"../common/strings":10,"../params/param":26}],58:[function(e,t,n){"use strict";var o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};Object.defineProperty(n,"__esModule",{value:!0});var a=e("../common"),s=e("./urlMatcher"),i=e("../params"),u=function(){function e(e){this.router=e}return e.prototype.fromConfig=function(e,t,n){return new i.Param(e,t,i.DefType.CONFIG,this.router.urlService.config,n)},e.prototype.fromPath=function(e,t,n){return new i.Param(e,t,i.DefType.PATH,this.router.urlService.config,n)},e.prototype.fromSearch=function(e,t,n){return new i.Param(e,t,i.DefType.SEARCH,this.router.urlService.config,n)},e}();n.ParamFactory=u;var r=function(){function e(e){var r=this;this.router=e,this.paramFactory=new u(this.router),this.caseInsensitive=function(e){return r.router.urlService.config.caseInsensitive(e)},this.defaultSquashPolicy=function(e){return r.router.urlService.config.defaultSquashPolicy(e)},this.strictMode=function(e){return r.router.urlService.config.strictMode(e)},this.type=function(e,t,n){return r.router.urlService.config.type(e,t,n)||r},a.extend(this,{UrlMatcher:s.UrlMatcher,Param:i.Param})}return e.prototype.compile=function(e,t){var n=this.router.urlService.config,r=t&&!t.state&&t.params;t=r?o({state:{params:r}},t):t;var i={strict:n._isStrictMode,caseInsensitive:n._isCaseInsensitive};return new s.UrlMatcher(e,n.paramTypes,this.paramFactory,a.extend(i,t))},e.prototype.isMatcher=function(n){if(!a.isObject(n))return!1;var r=!0;return a.forEach(s.UrlMatcher.prototype,function(e,t){a.isFunction(e)&&(r=r&&a.isDefined(n[t])&&a.isFunction(n[t]))}),r},e.prototype.$get=function(){var e=this.router.urlService.config;return e.paramTypes.enqueue=!1,e.paramTypes._flushTypeQueue(),this},e}();n.UrlMatcherFactory=r},{"../common":7,"../params":25,"./urlMatcher":57}],59:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var h=e("../common"),i=e("./urlRule");var r=function(){function e(e){var r=this;this.router=e,this.sync=function(e){return r.router.urlService.sync(e)},this.listen=function(e){return r.router.urlService.listen(e)},this.deferIntercept=function(e){return r.router.urlService.deferIntercept(e)},this.match=function(e){return r.router.urlService.match(e)},this.initial=function(e){return r.router.urlService.rules.initial(e)},this.otherwise=function(e){return r.router.urlService.rules.otherwise(e)},this.removeRule=function(e){return r.router.urlService.rules.removeRule(e)},this.rule=function(e){return r.router.urlService.rules.rule(e)},this.rules=function(){return r.router.urlService.rules.rules()},this.sort=function(e){return r.router.urlService.rules.sort(e)},this.when=function(e,t,n){return r.router.urlService.rules.when(e,t,n)},this.urlRuleFactory=new i.UrlRuleFactory(e)}return e.prototype.update=function(e){var t=this.router.locationService;e?this.location=t.url():t.url()!==this.location&&t.url(this.location,!0)},e.prototype.push=function(e,t,n){var r=n&&!!n.replace;this.router.urlService.url(e.format(t||{}),r)},e.prototype.href=function(e,t,n){var r=e.format(t);if(null==r)return null;n=n||{absolute:!1};var i,o,a,s,u=this.router.urlService.config,c=u.html5Mode();if(c||null===r||(r="#"+u.hashPrefix()+r),i=r,o=c,a=n.absolute,r="/"===(s=u.baseHref())?i:o?h.stripLastPathElement(s)+i:a?s.slice(1)+i:i,!n.absolute||!r)return r;var l=!c&&r?"/":"",f=u.port(),p=80===f||443===f?"":":"+f;return[u.protocol(),"://",u.host(),p,l,r].join("")},Object.defineProperty(e.prototype,"interceptDeferred",{get:function(){return this.router.urlService.interceptDeferred},enumerable:!0,configurable:!0}),e}();n.UrlRouter=r},{"../common":7,"./urlRule":60}],60:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=e("./urlMatcher"),s=e("../common/predicates"),o=e("../common/common"),u=e("../common/hof"),c=e("../state/stateObject"),r=function(){function e(e){this.router=e}return e.prototype.compile=function(e){return this.router.urlMatcherFactory.compile(e)},e.prototype.create=function(e,t){var n=this,r=c.StateObject.isState,i=u.pattern([[s.isString,function(e){return i(n.compile(e))}],[u.is(a.UrlMatcher),function(e){return n.fromUrlMatcher(e,t)}],[r,function(e){return n.fromState(e,n.router)}],[u.is(RegExp),function(e){return n.fromRegExp(e,t)}],[s.isFunction,function(e){return new l(e,t)}]]),o=i(e);if(!o)throw new Error("invalid 'what' in when()");return o},e.prototype.fromUrlMatcher=function(n,t){var e=t;s.isString(t)&&(t=this.router.urlMatcherFactory.compile(t)),u.is(a.UrlMatcher)(t)&&(e=function(e){return t.format(e)});var r={urlMatcher:n,matchPriority:function(t){var e=n.parameters().filter(function(e){return e.isOptional});return e.length?e.filter(function(e){return t[e.id]}).length/e.length:1e-6},type:"URLMATCHER"};return o.extend(new l(function(e){var t=n.exec(e.path,e.search,e.hash);return n.validates(t)&&t},e),r)},e.prototype.fromState=function(r,i){var e={state:r,type:"STATE"};return o.extend(this.fromUrlMatcher(r.url,function(e){var t=i.stateService,n=i.globals;t.href(r,e)!==t.href(n.current,n.params)&&t.transitionTo(r,e,{inherit:!0,source:"url"})}),e)},e.prototype.fromRegExp=function(t,e){if(t.global||t.sticky)throw new Error("Rule RegExp must not be global or sticky");var n=s.isString(e)?function(n){return e.replace(/\$(\$|\d{1,2})/,function(e,t){return n["$"===t?0:Number(t)]})}:e,r={regexp:t,type:"REGEXP"};return o.extend(new l(function(e){return t.exec(e.path)},n),r)},e.isUrlRule=function(t){return t&&["type","match","handler"].every(function(e){return s.isDefined(t[e])})},e}();n.UrlRuleFactory=r;var l=function(e,t){var n=this;this.match=e,this.type="RAW",this.matchPriority=function(e){return 0-n.$id},this.handler=t||o.identity};n.BaseUrlRule=l},{"../common/common":3,"../common/hof":6,"../common/predicates":8,"../state/stateObject":41,"./urlMatcher":57}],61:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,i=e("../state"),f=e("./urlMatcher"),o=e("../common"),a=e("./urlRule");function s(e){if(!(o.isFunction(e)||o.isString(e)||o.is(i.TargetState)(e)||i.TargetState.isDef(e)))throw new Error("'handler' must be a string, function, TargetState, or have a state: 'newtarget' property");return o.isFunction(e)?e:o.val(e)}r=function(e,t){var n,r,i,o,a,s,u,c,l=(n=e,(t.priority||0)-(n.priority||0));return 0!==l?l:(r=t,0!==(l=((i={STATE:4,URLMATCHER:4,REGEXP:3,RAW:2,OTHER:1})[e.type]||0)-(i[r.type]||0))?l:(a=t,0!==(l=(o=e).urlMatcher&&a.urlMatcher?f.UrlMatcher.compare(o.urlMatcher,a.urlMatcher):0)?l:(u=t,(c={STATE:!0,URLMATCHER:!0})[(s=e).type]&&c[u.type]?0:(s.$id||0)-(u.$id||0))))};var u=function(){function e(e){this.router=e,this._sortFn=r,this._rules=[],this._id=0,this.urlRuleFactory=new a.UrlRuleFactory(e)}return e.prototype.dispose=function(e){this._rules=[],delete this._otherwiseFn},e.prototype.initial=function(e){var t=s(e);this.rule(this.urlRuleFactory.create(function(e,t){return 0===t.globals.transitionHistory.size()&&!!/^\/?$/.exec(e.path)},t))},e.prototype.otherwise=function(e){var t=s(e);this._otherwiseFn=this.urlRuleFactory.create(o.val(!0),t),this._sorted=!1},e.prototype.removeRule=function(e){o.removeFrom(this._rules,e)},e.prototype.rule=function(e){var t=this;if(!a.UrlRuleFactory.isUrlRule(e))throw new Error("invalid rule");return e.$id=this._id++,e.priority=e.priority||0,this._rules.push(e),this._sorted=!1,function(){return t.removeRule(e)}},e.prototype.rules=function(){return this.ensureSorted(),this._rules.concat(this._otherwiseFn?[this._otherwiseFn]:[])},e.prototype.sort=function(e){for(var t=this.stableSort(this._rules,this._sortFn=e||this._sortFn),n=0,r=0;r<t.length;r++)t[r]._group=n,r<t.length-1&&0!==this._sortFn(t[r],t[r+1])&&n++;this._rules=t,this._sorted=!0},e.prototype.ensureSorted=function(){this._sorted||this.sort()},e.prototype.stableSort=function(e,r){var t=e.map(function(e,t){return{elem:e,idx:t}});return t.sort(function(e,t){var n=r(e.elem,t.elem);return 0===n?e.idx-t.idx:n}),t.map(function(e){return e.elem})},e.prototype.when=function(e,t,n){var r=this.urlRuleFactory.create(e,t);return o.isDefined(n&&n.priority)&&(r.priority=n.priority),this.rule(r),r},e}();n.UrlRules=u},{"../common":7,"../state":38,"./urlMatcher":57,"./urlRule":60}],62:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var u=e("../common"),i=e("./urlRules"),o=e("./urlConfig"),a=e("../state"),r=function(){function e(e){var r=this;this.router=e,this.interceptDeferred=!1,this.rules=new i.UrlRules(this.router),this.config=new o.UrlConfig(this.router),this.url=function(e,t,n){return r.router.locationService.url(e,t,n)},this.path=function(){return r.router.locationService.path()},this.search=function(){return r.router.locationService.search()},this.hash=function(){return r.router.locationService.hash()},this.onChange=function(e){return r.router.locationService.onChange(e)}}return e.prototype.dispose=function(){this.listen(!1),this.rules.dispose()},e.prototype.parts=function(){return{path:this.path(),search:this.search(),hash:this.hash()}},e.prototype.sync=function(e){if(!e||!e.defaultPrevented){var t=this.router,n=t.urlService,r=t.stateService,i={path:n.path(),search:n.search(),hash:n.hash()},o=this.match(i);u.pattern([[u.isString,function(e){return n.url(e,!0)}],[a.TargetState.isDef,function(e){return r.go(e.state,e.params,e.options)}],[u.is(a.TargetState),function(e){return r.go(e.state(),e.params(),e.options())}]])(o&&o.rule.handler(o.match,i,this.router))}},e.prototype.listen=function(e){var t=this;if(!1!==e)return this._stopListeningFn=this._stopListeningFn||this.router.urlService.onChange(function(e){return t.sync(e)});this._stopListeningFn&&this._stopListeningFn(),delete this._stopListeningFn},e.prototype.deferIntercept=function(e){void 0===e&&(e=!0),this.interceptDeferred=e},e.prototype.match=function(e){var t=this;e=u.extend({path:"",search:{},hash:""},e);for(var n,r,i,o=this.rules.rules(),a=0;a<o.length&&(!n||n.rule._group===o[a]._group);a++){var s=(r=o[a],void 0,(i=r.match(e,t.router))&&{match:i,rule:r,weight:r.matchPriority(i)});n=!n||s&&s.weight>n.weight?s:n}return n},e}();n.UrlService=r},{"../common":7,"../state":38,"./urlConfig":56,"./urlRules":61}],63:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),function(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}(e("./vanilla/index"))},{"./vanilla/index":67}],64:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("../common"),i=e("./utils"),o=function(){function e(e,t){var n=this;this.fireAfterUpdate=t,this._listeners=[],this._listener=function(t){return n._listeners.forEach(function(e){return e(t)})},this.hash=function(){return i.parseUrl(n._get()).hash},this.path=function(){return i.parseUrl(n._get()).path},this.search=function(){return i.getParams(i.parseUrl(n._get()).search)},this._location=r.root.location,this._history=r.root.history}return e.prototype.url=function(t,e){return void 0===e&&(e=!0),r.isDefined(t)&&t!==this._get()&&(this._set(null,null,t,e),this.fireAfterUpdate&&this._listeners.forEach(function(e){return e({url:t})})),i.buildUrl(this)},e.prototype.onChange=function(e){var t=this;return this._listeners.push(e),function(){return r.removeFrom(t._listeners,e)}},e.prototype.dispose=function(e){r.deregAll(this._listeners)},e}();n.BaseLocationServices=o},{"../common":7,"./utils":74}],65:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("../common/predicates"),i=function(){function e(e,t){void 0===t&&(t=!1),this._isHtml5=t,this._baseHref=void 0,this._hashPrefix=""}return e.prototype.port=function(){return location.port?Number(location.port):"https"===this.protocol()?443:80},e.prototype.protocol=function(){return location.protocol.replace(/:/g,"")},e.prototype.host=function(){return location.hostname},e.prototype.html5Mode=function(){return this._isHtml5},e.prototype.hashPrefix=function(e){return r.isDefined(e)?this._hashPrefix=e:this._hashPrefix},e.prototype.baseHref=function(e){return r.isDefined(e)&&(this._baseHref=e),r.isUndefined(this._baseHref)&&(this._baseHref=this.getBaseHref()),this._baseHref},e.prototype.getBaseHref=function(){var e=document.getElementsByTagName("base")[0];return e&&e.href?e.href.replace(/^([^/:]*:)?\/\/[^/]*/,""):this._isHtml5?"/":location.pathname||"/"},e.prototype.dispose=function(){},e}();n.BrowserLocationConfig=i},{"../common/predicates":8}],66:[function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(n,"__esModule",{value:!0});var o=e("../common"),a=function(n){function e(e){var t=n.call(this,e,!1)||this;return o.root.addEventListener("hashchange",t._listener,!1),t}return i(e,n),e.prototype._get=function(){return o.trimHashVal(this._location.hash)},e.prototype._set=function(e,t,n,r){this._location.hash=n},e.prototype.dispose=function(e){n.prototype.dispose.call(this,e),o.root.removeEventListener("hashchange",this._listener)},e}(e("./baseLocationService").BaseLocationServices);n.HashLocationService=a},{"../common":7,"./baseLocationService":64}],67:[function(e,t,n){"use strict";function r(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}Object.defineProperty(n,"__esModule",{value:!0}),r(e("./q")),r(e("./injector")),r(e("./baseLocationService")),r(e("./hashLocationService")),r(e("./memoryLocationService")),r(e("./pushStateLocationService")),r(e("./memoryLocationConfig")),r(e("./browserLocationConfig")),r(e("./utils")),r(e("./plugins"))},{"./baseLocationService":64,"./browserLocationConfig":65,"./hashLocationService":66,"./injector":68,"./memoryLocationConfig":69,"./memoryLocationService":70,"./plugins":71,"./pushStateLocationService":72,"./q":73,"./utils":74}],68:[function(e,t,s){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var u=e("../common/index"),c={},n=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,r=/([^\s,]+)/g;s.$injector={get:function(e){return c[e]},has:function(e){return null!=s.$injector.get(e)},invoke:function(e,t,n){var r=u.extend({},c,n||{}),i=s.$injector.annotate(e),o=u.assertPredicate(function(e){return r.hasOwnProperty(e)},function(e){return"DI can't find injectable: '"+e+"'"}),a=i.filter(o).map(function(e){return r[e]});return u.isFunction(e)?e.apply(t,a):e.slice(-1)[0].apply(t,a)},annotate:function(e){if(!u.isInjectable(e))throw new Error("Not an injectable function: "+e);if(e&&e.$inject)return e.$inject;if(u.isArray(e))return e.slice(0,-1);var t=e.toString().replace(n,"");return t.slice(t.indexOf("(")+1,t.indexOf(")")).match(r)||[]}}},{"../common/index":7}],69:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("../common/predicates"),i=e("../common/common"),o=function(){var t=this;this.dispose=i.noop,this._baseHref="",this._port=80,this._protocol="http",this._host="localhost",this._hashPrefix="",this.port=function(){return t._port},this.protocol=function(){return t._protocol},this.host=function(){return t._host},this.baseHref=function(){return t._baseHref},this.html5Mode=function(){return!1},this.hashPrefix=function(e){return r.isDefined(e)?t._hashPrefix=e:t._hashPrefix}};n.MemoryLocationConfig=o},{"../common/common":3,"../common/predicates":8}],70:[function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(n,"__esModule",{value:!0});var o=function(t){function e(e){return t.call(this,e,!0)||this}return i(e,t),e.prototype._get=function(){return this._url},e.prototype._set=function(e,t,n,r){this._url=n},e}(e("./baseLocationService").BaseLocationServices);n.MemoryLocationService=o},{"./baseLocationService":64}],71:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("./browserLocationConfig"),i=e("./hashLocationService"),o=e("./utils"),a=e("./pushStateLocationService"),s=e("./memoryLocationService"),u=e("./memoryLocationConfig"),c=e("./injector"),l=e("./q"),f=e("../common/coreservices");n.servicesPlugin=function(e){return f.services.$injector=c.$injector,f.services.$q=l.$q,{name:"vanilla.services",$q:l.$q,$injector:c.$injector,dispose:function(){return null}}},n.hashLocationPlugin=o.locationPluginFactory("vanilla.hashBangLocation",!1,i.HashLocationService,r.BrowserLocationConfig),n.pushStateLocationPlugin=o.locationPluginFactory("vanilla.pushStateLocation",!0,a.PushStateLocationService,r.BrowserLocationConfig),n.memoryLocationPlugin=o.locationPluginFactory("vanilla.memoryLocation",!1,s.MemoryLocationService,u.MemoryLocationConfig)},{"../common/coreservices":4,"./browserLocationConfig":65,"./hashLocationService":66,"./injector":68,"./memoryLocationConfig":69,"./memoryLocationService":70,"./pushStateLocationService":72,"./q":73,"./utils":74}],72:[function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(n,"__esModule",{value:!0});var o=e("./baseLocationService"),s=e("../common"),a=function(n){function e(e){var t=n.call(this,e,!0)||this;return t._config=e.urlService.config,s.root.addEventListener("popstate",t._listener,!1),t}return i(e,n),e.prototype._getBasePrefix=function(){return s.stripLastPathElement(this._config.baseHref())},e.prototype._get=function(){var e=this._location,t=e.pathname,n=e.hash,r=e.search;r=s.splitQuery(r)[1],n=s.splitHash(n)[1];var i=this._getBasePrefix(),o=t===this._config.baseHref(),a=t.substr(0,i.length)===i;return(t=o?"/":a?t.substring(i.length):t)+(r?"?"+r:"")+(n?"#"+n:"")},e.prototype._set=function(e,t,n,r){var i=this._getBasePrefix(),o=n&&"/"!==n[0]?"/":"",a=""===n||"/"===n?this._config.baseHref():i+o+n;r?this._history.replaceState(e,t,a):this._history.pushState(e,t,a)},e.prototype.dispose=function(e){n.prototype.dispose.call(this,e),s.root.removeEventListener("popstate",this._listener)},e}(o.BaseLocationServices);n.PushStateLocationService=a},{"../common":7,"./baseLocationService":64}],73:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("../common/index");n.$q={when:function(n){return new Promise(function(e,t){return e(n)})},reject:function(n){return new Promise(function(e,t){t(n)})},defer:function(){var n={};return n.promise=new Promise(function(e,t){n.resolve=e,n.reject=t}),n},all:function(e){if(r.isArray(e))return Promise.all(e);if(r.isObject(e)){var t=Object.keys(e).map(function(t){return e[t].then(function(e){return{key:t,val:e}})});return n.$q.all(t).then(function(e){return e.reduce(function(e,t){return e[t.key]=t.val,e},{})})}}}},{"../common/index":7}],74:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=e("../common");n.keyValsToObjectR=function(e,t){var n=t[0],r=t[1];return e.hasOwnProperty(n)?a.isArray(e[n])?e[n].push(r):e[n]=[e[n],r]:e[n]=r,e},n.getParams=function(e){return e.split("&").filter(a.identity).map(a.splitEqual).reduce(n.keyValsToObjectR,{})},n.parseUrl=function(e){var t=function(e){return e||""},n=a.splitHash(e).map(t),r=n[0],i=n[1],o=a.splitQuery(r).map(t);return{path:o[0],search:o[1],hash:i,url:e}},n.buildUrl=function(e){var t=e.path(),n=e.search(),r=e.hash(),i=Object.keys(n).map(function(t){var e=n[t];return(a.isArray(e)?e:[e]).map(function(e){return t+"="+e})}).reduce(a.unnestR,[]).join("&");return t+(i?"?"+i:"")+(r?"#"+r:"")},n.locationPluginFactory=function(r,i,o,a){return function(e){var t=e.locationService=new o(e),n=e.locationConfig=new a(e,i);return{name:r,service:t,configuration:n,dispose:function(e){e.dispose(t),e.dispose(n)}}}}},{"../common":7}],75:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),function(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}(e("./view"))},{"./view":76}],76:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var c=e("../common/common"),l=e("../common/hof"),a=e("../common/predicates"),f=e("../common/trace"),r=function(){function u(e){var n=this;this.router=e,this._uiViews=[],this._viewConfigs=[],this._viewConfigFactories={},this._listeners=[],this._pluginapi={_rootViewContext:this._rootViewContext.bind(this),_viewConfigFactory:this._viewConfigFactory.bind(this),_registeredUIView:function(t){return c.find(n._uiViews,function(e){return n.router.$id+"."+e.id===t})},_registeredUIViews:function(){return n._uiViews},_activeViewConfigs:function(){return n._viewConfigs},_onSync:function(e){return n._listeners.push(e),function(){return c.removeFrom(n._listeners,e)}}}}return u.normalizeUIViewTarget=function(e,t){void 0===t&&(t="");var n=t.split("@"),r=n[0]||"$default",i=a.isString(n[1])?n[1]:"^",o=/^(\^(?:\.\^)*)\.(.*$)/.exec(r);o&&(i=o[1],r=o[2]),"!"===r.charAt(0)&&(r=r.substr(1),i="");/^(\^(?:\.\^)*)$/.exec(i)?i=i.split(".").reduce(function(e,t){return e.parent},e).name:"."===i&&(i=e.name);return{uiViewName:r,uiViewContextAnchor:i}},u.prototype._rootViewContext=function(e){return this._rootContext=e||this._rootContext},u.prototype._viewConfigFactory=function(e,t){this._viewConfigFactories[e]=t},u.prototype.createViewConfig=function(e,t){var n=this._viewConfigFactories[t.$type];if(!n)throw new Error("ViewService: No view config factory registered for type "+t.$type);var r=n(e,t);return a.isArray(r)?r:[r]},u.prototype.deactivateViewConfig=function(e){f.trace.traceViewServiceEvent("<- Removing",e),c.removeFrom(this._viewConfigs,e)},u.prototype.activateViewConfig=function(e){f.trace.traceViewServiceEvent("-> Registering",e),this._viewConfigs.push(e)},u.prototype.sync=function(){var n=this,r=this._uiViews.map(function(e){return[e.fqn,e]}).reduce(c.applyPairs,{});function i(e){for(var t=e.viewDecl.$context,n=0;++n&&t.parent;)t=t.parent;return n}var o=l.curry(function(e,t,n,r){return t*(e(n)-e(r))}),e=this._uiViews.sort(o(function(e){var t=function(e){return e&&e.parent?t(e.parent)+1:1};return 1e4*e.fqn.split(".").length+t(e.creationContext)},1)).map(function(e){var t=n._viewConfigs.filter(u.matches(r,e));return 1<t.length&&t.sort(o(i,-1)),{uiView:e,viewConfig:t[0]}}),t=e.map(function(e){return e.viewConfig}),a=this._viewConfigs.filter(function(e){return!c.inArray(t,e)}).map(function(e){return{uiView:void 0,viewConfig:e}});e.forEach(function(e){-1!==n._uiViews.indexOf(e.uiView)&&e.uiView.configUpdated(e.viewConfig)});var s=e.concat(a);this._listeners.forEach(function(e){return e(s)}),f.trace.traceViewSync(s)},u.prototype.registerUIView=function(t){f.trace.traceViewServiceUIViewEvent("-> Registering",t);var e=this._uiViews;return e.filter(function(e){return e.fqn===t.fqn&&e.$type===t.$type}).length&&f.trace.traceViewServiceUIViewEvent("!!!! duplicate uiView named:",t),e.push(t),this.sync(),function(){-1!==e.indexOf(t)?(f.trace.traceViewServiceUIViewEvent("<- Deregistering",t),c.removeFrom(e)(t)):f.trace.traceViewServiceUIViewEvent("Tried removing non-registered uiView",t)}},u.prototype.available=function(){return this._uiViews.map(l.prop("fqn"))},u.prototype.active=function(){return this._uiViews.filter(l.prop("$config")).map(l.prop("name"))},u.matches=function(s,u){return function(e){if(u.$type!==e.viewDecl.$type)return!1;var t=e.viewDecl,n=t.$uiViewName.split("."),r=u.fqn.split(".");if(!c.equals(n,r.slice(0-n.length)))return!1;var i=1-n.length||void 0,o=r.slice(0,i).join("."),a=s[o].creationContext;return t.$uiViewContextAnchor===(a&&a.name)}},u}();n.ViewService=r},{"../common/common":3,"../common/hof":6,"../common/predicates":8,"../common/trace":11}],77:[function(e,C,t){!function(o,p,h){function d(e,t){return typeof e===t}function m(){return"function"!=typeof p.createElement?p.createElement(arguments[0]):$?p.createElementNS.call(p,"http://www.w3.org/2000/svg",arguments[0]):p.createElement.apply(p,arguments)}function i(e,t,n,r){var i,o,a,s,u,c="modernizr",l=m("div"),f=((u=p.body)||((u=m($?"svg":"body")).fake=!0),u);if(parseInt(n,10))for(;n--;)(a=m("div")).id=r?r[n]:c+(n+1),l.appendChild(a);return(i=m("style")).type="text/css",i.id="s"+c,(f.fake?f:l).appendChild(i),f.appendChild(l),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(p.createTextNode(e)),l.id=c,f.fake&&(f.style.background="",f.style.overflow="hidden",s=g.style.overflow,g.style.overflow="hidden",g.appendChild(f)),o=t(l,e),f.fake?(f.parentNode.removeChild(f),g.style.overflow=s,g.offsetHeight):l.parentNode.removeChild(l),!!o}function a(e){return e.replace(/([A-Z])/g,function(e,t){return"-"+t.toLowerCase()}).replace(/^ms-/,"-ms-")}function v(e,t){var n=e.length;if("CSS"in o&&"supports"in o.CSS){for(;n--;)if(o.CSS.supports(a(e[n]),t))return!0;return!1}if("CSSSupportsRule"in o){for(var r=[];n--;)r.push("("+a(e[n])+":"+t+")");return i("@supports ("+(r=r.join(" or "))+") { #modernizr { position: absolute; } }",function(e){return"absolute"==function(e,t,n){var r;if("getComputedStyle"in o){r=getComputedStyle.call(o,e,t);var i=o.console;null!==r?n&&(r=r.getPropertyValue(n)):i&&i[i.error?"error":"log"].call(i,"getComputedStyle returning null, its possible modernizr test results are inaccurate")}else r=!t&&e.currentStyle&&e.currentStyle[n];return r}(e,null,"position")})}return h}function s(e,t){return function(){return e.apply(t,arguments)}}function r(e,t,n,r,i){var o=e.charAt(0).toUpperCase()+e.slice(1),a=(e+" "+b.join(o+" ")+o).split(" ");return d(t,"string")||d(t,"undefined")?function(e,t,n,r){function i(){a&&(delete _.style,delete _.modElem)}if(r=!d(r,"undefined")&&r,!d(n,"undefined")){var o=v(e,n);if(!d(o,"undefined"))return o}for(var a,s,u,c,l,f=["modernizr","tspan","samp"];!_.style&&f.length;)a=!0,_.modElem=m(f.shift()),_.style=_.modElem.style;for(u=e.length,s=0;s<u;s++)if(c=e[s],l=_.style[c],!!~(""+c).indexOf("-")&&(c=c.replace(/([a-z])-([a-z])/g,function(e,t,n){return t+n.toUpperCase()}).replace(/^-/,"")),_.style[c]!==h){if(r||d(n,"undefined"))return i(),"pfx"!=t||c;try{_.style[c]=n}catch(e){}if(_.style[c]!=l)return i(),"pfx"!=t||c}return i(),!1}(a,t,r,i):function(e,t,n){var r;for(var i in e)if(e[i]in t)return!1===n?e[i]:d(r=t[e[i]],"function")?s(r,n||t):r;return!1}(a=(e+" "+S.join(o+" ")+o).split(" "),t,n)}function e(e,t,n){return r(e,h,h,t,n)}var u=[],t={_version:"3.6.0",_config:{classPrefix:"",enableClasses:!0,enableJSClass:!0,usePrefixes:!0},_q:[],on:function(e,t){var n=this;setTimeout(function(){t(n[e])},0)},addTest:function(e,t,n){u.push({name:e,fn:t,options:n})},addAsyncTest:function(e){u.push({name:null,fn:e})}},c=function(){};c.prototype=t,c=new c;var n,l=[],g=p.documentElement,$="svg"===g.nodeName.toLowerCase(),f=(n=o.matchMedia||o.msMatchMedia)?function(e){var t=n(e);return t&&t.matches||!1}:function(e){var t=!1;return i("@media "+e+" { #modernizr { position: absolute; } }",function(e){t="absolute"==(o.getComputedStyle?o.getComputedStyle(e,null):e.currentStyle).position}),t};t.mq=f,$||function(e,u){function c(){var e=d.elements;return"string"==typeof e?e.split(" "):e}function l(e){var t=s[e[n]];return t||(t={},a++,e[n]=a,s[a]=t),t}function f(e,t,n){return t||(t=u),h?t.createElement(e):(n||(n=l(t)),!(r=n.cache[e]?n.cache[e].cloneNode():o.test(e)?(n.cache[e]=n.createElem(e)).cloneNode():n.createElem(e)).canHaveChildren||i.test(e)||r.tagUrn?r:n.frag.appendChild(r));var r}function r(e){e||(e=u);var t,n,r,i,o,a,s=l(e);return!d.shivCSS||p||s.hasCSS||(s.hasCSS=(i="article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}",o=(r=e).createElement("p"),a=r.getElementsByTagName("head")[0]||r.documentElement,o.innerHTML="x<style>"+i+"</style>",!!a.insertBefore(o.lastChild,a.firstChild))),h||(t=e,(n=s).cache||(n.cache={},n.createElem=t.createElement,n.createFrag=t.createDocumentFragment,n.frag=n.createFrag()),t.createElement=function(e){return d.shivMethods?f(e,t,n):n.createElem(e)},t.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+c().join().replace(/[\w\-:]+/g,function(e){return n.createElem(e),n.frag.createElement(e),'c("'+e+'")'})+");return n}")(d,n.frag)),e}var p,h,t=e.html5||{},i=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,o=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,n="_html5shiv",a=0,s={};!function(){try{var e=u.createElement("a");e.innerHTML="<xyz></xyz>",p="hidden"in e,h=1==e.childNodes.length||function(){u.createElement("a");var e=u.createDocumentFragment();return void 0===e.cloneNode||void 0===e.createDocumentFragment||void 0===e.createElement}()}catch(e){h=p=!0}}();var d={elements:t.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video",version:"3.7.3",shivCSS:!1!==t.shivCSS,supportsUnknownElements:h,shivMethods:!1!==t.shivMethods,type:"default",shivDocument:r,createElement:f,createDocumentFragment:function(e,t){if(e||(e=u),h)return e.createDocumentFragment();for(var n=(t=t||l(e)).frag.cloneNode(),r=0,i=c(),o=i.length;r<o;r++)n.createElement(i[r]);return n},addElements:function(e,t){var n=d.elements;"string"!=typeof n&&(n=n.join(" ")),"string"!=typeof e&&(e=e.join(" ")),d.elements=n+" "+e,r(t)}};e.html5=d,r(u),"object"==typeof C&&C.exports&&(C.exports=d)}(void 0!==o?o:this,p);var y="Moz O ms Webkit",b=t._config.usePrefixes?y.split(" "):[];t._cssomPrefixes=b;var w={elem:m("modernizr")};c._q.push(function(){delete w.elem});var _={style:w.elem.style};c._q.unshift(function(){delete _.style});var S=t._config.usePrefixes?y.toLowerCase().split(" "):[];t._domPrefixes=S,t.testAllProps=r,t.testAllProps=e,c.addTest("borderimage",e("borderImage","url() 1",!0)),c.addTest("borderradius",e("borderRadius","0px",!0)),c.addTest("flexbox",e("flexBasis","1px",!0)),c.addTest("overflowscrolling",e("overflowScrolling","touch",!0));var x={}.toString;c.addTest("smil",function(){return!!p.createElementNS&&/SVGAnimate/.test(x.call(p.createElementNS("http://www.w3.org/2000/svg","animate")))}),function(){var e,t,n,r,i,o;for(var a in u)if(u.hasOwnProperty(a)){if(e=[],(t=u[a]).name&&(e.push(t.name.toLowerCase()),t.options&&t.options.aliases&&t.options.aliases.length))for(n=0;n<t.options.aliases.length;n++)e.push(t.options.aliases[n].toLowerCase());for(r=d(t.fn,"function")?t.fn():t.fn,i=0;i<e.length;i++)1===(o=e[i].split(".")).length?c[o[0]]=r:(!c[o[0]]||c[o[0]]instanceof Boolean||(c[o[0]]=new Boolean(c[o[0]])),c[o[0]][o[1]]=r),l.push((r?"":"no-")+o.join("-"))}}(),function(e){var t=g.className,n=c._config.classPrefix||"";if($&&(t=t.baseVal),c._config.enableJSClass){var r=new RegExp("(^|\\s)"+n+"no-js(\\s|$)");t=t.replace(r,"$1"+n+"js$2")}c._config.enableClasses&&(t+=" "+n+e.join(" "+n),$?g.className.baseVal=t:g.className=t)}(l),delete t.addTest,delete t.addAsyncTest;for(var E=0;E<c._q.length;E++)c._q[E]();o.Modernizr=c}(window,document)},{}],78:[function(e,t,n){!function(e,c){"use strict";function t(e,s,t){var u=t.baseHref(),r=e[0];return function(e,t,n){r.cookie=function(e,t,n){var r,i;i=(n=n||{}).expires,r=c.isDefined(n.path)?n.path:u,c.isUndefined(t)&&(i="Thu, 01 Jan 1970 00:00:00 GMT",t=""),c.isString(i)&&(i=new Date(i));var o=encodeURIComponent(e)+"="+encodeURIComponent(t);o+=r?";path="+r:"",o+=n.domain?";domain="+n.domain:"",o+=i?";expires="+i.toUTCString():"",o+=n.secure?";secure":"";var a=(o+=n.samesite?";samesite="+n.samesite:"").length+1;return 4096<a&&s.warn("Cookie '"+e+"' possibly not set or overflowed because it was too large ("+a+" > 4096 bytes)!"),o}(e,t,n)}}c.module("ngCookies",["ng"]).info({angularVersion:"1.7.7"}).provider("$cookies",[function(){var t=this.defaults={};function i(e){return e?c.extend({},t,e):t}this.$get=["$$cookieReader","$$cookieWriter",function(t,r){return{get:function(e){return t()[e]},getObject:function(e){var t=this.get(e);return t?c.fromJson(t):t},getAll:function(){return t()},put:function(e,t,n){r(e,t,i(n))},putObject:function(e,t,n){this.put(e,c.toJson(t),n)},remove:function(e,t){r(e,void 0,i(t))}}}]}]),t.$inject=["$document","$log","$browser"],c.module("ngCookies").provider("$$cookieWriter",function(){this.$get=t})}(window,window.angular)},{}],79:[function(e,t,n){e("./angular-cookies"),t.exports="ngCookies"},{"./angular-cookies":78}],80:[function(e,t,n){!function(x,E){"use strict";var C,k,O,j,P,R,T,A,M,N,L=E.$$minErr("$sanitize");E.module("ngSanitize",[]).provider("$sanitize",function(){var t=!1,r=!1;this.$get=["$$sanitizeUri",function(n){return t=!0,r&&k(p,l),function(e){var t=[];return M(e,N(t,function(e,t){return!/^unsafe:/.test(n(e,t))})),t.join("")}}],this.enableSvg=function(e){return P(e)?(r=e,this):r},this.addValidElements=function(e){return t||(j(e)&&(e={htmlElements:e}),y(l,e.svgElements),y(s,e.htmlVoidElements),y(p,e.htmlVoidElements),y(p,e.htmlElements)),this},this.addValidAttrs=function(e){return t||k(v,$(e,!0)),this},C=E.bind,k=E.extend,O=E.forEach,j=E.isArray,P=E.isDefined,R=E.$$lowercase,T=E.noop,M=function(e,t){null==e?e="":"string"!=typeof e&&(e=""+e);var n=b(e);if(!n)return"";var r=5;do{if(0===r)throw L("uinput","Failed to sanitize html because the input is unstable");r--,e=n.innerHTML,n=b(e)}while(e!==n.innerHTML);for(var i=n.firstChild;i;){switch(i.nodeType){case 1:t.start(i.nodeName.toLowerCase(),w(i.attributes));break;case 3:t.chars(i.textContent)}var o;if(!((o=i.firstChild)||(1===i.nodeType&&t.end(i.nodeName.toLowerCase()),o=S("nextSibling",i))))for(;null==o&&(i=S("parentNode",i))!==n;)o=S("nextSibling",i),1===i.nodeType&&t.end(i.nodeName.toLowerCase());i=o}for(;i=n.firstChild;)n.removeChild(i)},N=function(e,o){var t=!1,a=C(e,e.push);return{start:function(i,e){i=R(i),!t&&f[i]&&(t=i),t||!0!==p[i]||(a("<"),a(i),O(e,function(e,t){var n=R(t),r="img"===i&&"src"===n||"background"===n;!0!==v[n]||!0===h[n]&&!o(e,r)||(a(" "),a(t),a('="'),a(_(e)),a('"'))}),a(">"))},end:function(e){e=R(e),t||!0!==p[e]||!0===s[e]||(a("</"),a(e),a(">")),e==t&&(t=!1)},chars:function(e){t||a(_(e))}}},A=x.Node.prototype.contains||function(e){return!!(16&this.compareDocumentPosition(e))};var n=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,i=/([^#-~ |!])/g,s=g("area,br,col,hr,img,wbr"),e=g("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),o=g("rp,rt"),a=k({},o,e),u=k({},e,g("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul")),c=k({},o,g("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),l=g("circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,stop,svg,switch,text,title,tspan"),f=g("script,style"),p=k({},s,u,c,a),h=g("background,cite,href,longdesc,src,xlink:href,xml:base"),d=g("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,valign,value,vspace,width"),m=g("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan",!0),v=k({},h,m,d);function g(e,t){return $(e.split(","),t)}function $(e,t){var n,r={};for(n=0;n<e.length;n++)r[t?R(e[n]):e[n]]=!0;return r}function y(e,t){t&&t.length&&k(e,$(t))}var b=function(r,t){var e;if(!t||!t.implementation)throw L("noinert","Can't create an inert html document");var n=((e=t.implementation.createHTMLDocument("inert")).documentElement||e.getDocumentElement()).querySelector("body");return n.innerHTML='<svg><g onload="this.parentNode.remove()"></g></svg>',n.querySelector("svg")?(n.innerHTML='<svg><p><style><img src="</style><img src=x onerror=alert(1)//">',n.querySelector("svg img")?function(e){e="<remove></remove>"+e;try{var t=(new r.DOMParser).parseFromString(e,"text/html").body;return t.firstChild.remove(),t}catch(e){return}}:function(e){return n.innerHTML=e,t.documentMode&&function e(t){for(;t;){if(t.nodeType===x.Node.ELEMENT_NODE)for(var n=t.attributes,r=0,i=n.length;r<i;r++){var o=n[r],a=o.name.toLowerCase();"xmlns:ns1"!==a&&0!==a.lastIndexOf("ns1:",0)||(t.removeAttributeNode(o),r--,i--)}var s=t.firstChild;s&&e(s),t=S("nextSibling",t)}}(n),n}):function(e){e="<remove></remove>"+e;try{e=encodeURI(e)}catch(e){return}var t=new r.XMLHttpRequest;t.responseType="document",t.open("GET","data:text/html;charset=utf-8,"+e,!1),t.send(null);var n=t.response.body;return n.firstChild.remove(),n}}(x,x.document);function w(e){for(var t={},n=0,r=e.length;n<r;n++){var i=e[n];t[i.name]=i.value}return t}function _(e){return e.replace(/&/g,"&amp;").replace(n,function(e){return"&#"+(1024*(e.charCodeAt(0)-55296)+(e.charCodeAt(1)-56320)+65536)+";"}).replace(i,function(e){return"&#"+e.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function S(e,t){var n=t[e];if(n&&A.call(t,n))throw L("elclob","Failed to sanitize html because the element is clobbered: {0}",t.outerHTML||t.outerText);return n}}).info({angularVersion:"1.7.7"}),E.module("ngSanitize").filter("linky",["$sanitize",function(f){var p=/((s?ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,h=/^mailto:/i,d=E.$$minErr("linky"),m=E.isDefined,v=E.isFunction,g=E.isObject,$=E.isString;return function(e,i,t){if(null==e||""===e)return e;if(!$(e))throw d("notstring","Expected string but received: {0}",e);for(var n,r,o,a=v(t)?t:g(t)?function(){return t}:function(){return{}},s=e,u=[];n=s.match(p);)r=n[0],n[2]||n[4]||(r=(n[3]?"http://":"mailto:")+r),o=n.index,c(s.substr(0,o)),l(r,n[0].replace(h,"")),s=s.substring(o+n[0].length);return c(s),f(u.join(""));function c(e){var t,n;e&&u.push((t=e,N(n=[],T).chars(t),n.join("")))}function l(e,t){var n,r=a(e);for(n in u.push("<a "),r)u.push(n+'="'+r[n]+'" ');!m(i)||"target"in r||u.push('target="',i,'" '),u.push('href="',e.replace(/"/g,"&quot;"),'">'),c(t),u.push("</a>")}}}])}(window,window.angular)},{}],81:[function(e,t,n){e("./angular-sanitize"),t.exports="ngSanitize"},{"./angular-sanitize":80}],82:[function(e,t,n){var r;r=function(){function e(o,a){"use strict";return function(n){if(!(n&&(angular.isArray(n.files)||angular.isString(n.prefix)&&angular.isString(n.suffix))))throw new Error("Couldn't load static files, no files and prefix or suffix specified!");n.files||(n.files=[{prefix:n.prefix,suffix:n.suffix}]);for(var e=function(e){if(!e||!angular.isString(e.prefix)||!angular.isString(e.suffix))throw new Error("Couldn't load static file, no prefix or suffix specified!");var t=[e.prefix,n.key,e.suffix].join("");return angular.isObject(n.fileMap)&&n.fileMap[t]&&(t=n.fileMap[t]),a(angular.extend({url:t,method:"GET"},n.$http)).then(function(e){return e.data},function(){return o.reject(n.key)})},t=[],r=n.files.length,i=0;i<r;i++)t.push(e({prefix:n.files[i].prefix,key:n.key,suffix:n.files[i].suffix}));return o.all(t).then(function(e){for(var t=e.length,n={},r=0;r<t;r++)for(var i in e[r])n[i]=e[r][i];return n})}}return e.$inject=["$q","$http"],angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",e),e.displayName="$translateStaticFilesLoader","pascalprecht.translate"},"function"==typeof define&&define.amd?define([],function(){return r()}):"object"==typeof t&&t.exports?t.exports=r():r()},{}],83:[function(e,t,n){var r;r=function(){function e(e){"use strict";var n;if(1===angular.version.major&&4<=angular.version.minor){var r=e.get("$cookies");n={get:function(e){return r.get(e)},put:function(e,t){r.put(e,t)}}}else{var i=e.get("$cookieStore");n={get:function(e){return i.get(e)},put:function(e,t){i.put(e,t)}}}return{get:function(e){return n.get(e)},set:function(e,t){n.put(e,t)},put:function(e,t){n.put(e,t)}}}return e.$inject=["$injector"],angular.module("pascalprecht.translate").factory("$translateCookieStorage",e),e.displayName="$translateCookieStorage","pascalprecht.translate"},"function"==typeof define&&define.amd?define([],function(){return r()}):"object"==typeof t&&t.exports?t.exports=r():r()},{}],84:[function(e,t,n){var r;r=function(){function e(n,e){"use strict";var r,t={get:function(e){return r||(r=n.localStorage.getItem(e)),r},set:function(e,t){r=t,n.localStorage.setItem(e,t)},put:function(e,t){r=t,n.localStorage.setItem(e,t)}},i="localStorage"in n;if(i){var o="pascalprecht.translate.storageTest";try{i=null!==n.localStorage&&(n.localStorage.setItem(o,"foo"),n.localStorage.removeItem(o),!0)}catch(e){i=!1}}return i?t:e}return e.$inject=["$window","$translateCookieStorage"],angular.module("pascalprecht.translate").factory("$translateLocalStorage",e),e.displayName="$translateLocalStorageFactory","pascalprecht.translate"},"function"==typeof define&&define.amd?define([],function(){return r()}):"object"==typeof t&&t.exports?t.exports=r():r()},{}],85:[function(e,t,n){var r;r=function(){function e(t){"use strict";var n=t.storageKey(),r=t.storage(),e=function(){var e=t.preferredLanguage();angular.isString(e)?t.use(e):r.put(n,t.use())};e.displayName="fallbackFromIncorrectStorageValue",r?r.get(n)?t.use(r.get(n)).catch(e):e():angular.isString(t.preferredLanguage())&&t.use(t.preferredLanguage())}function t(e,i,t,o){"use strict";var T,l,A,M,N,L,V,n,I,D,q,U,F,H,z,B,G={},W=[],K=e,J=[],Y="translate-cloak",Q=!1,Z=!1,X=".",ee=!1,te=!1,ne=0,re=!0,r="default",a={default:function(e){return(e||"").split("-").join("_")},java:function(e){var t=(e||"").split("-").join("_"),n=t.split("_");return 1<n.length?n[0].toLowerCase()+"_"+n[1].toUpperCase():t},bcp47:function(e){var t=(e||"").split("_").join("-"),n=t.split("-");switch(n.length){case 1:n[0]=n[0].toLowerCase();break;case 2:n[0]=n[0].toLowerCase(),4===n[1].length?n[1]=n[1].charAt(0).toUpperCase()+n[1].slice(1).toLowerCase():n[1]=n[1].toUpperCase();break;case 3:n[0]=n[0].toLowerCase(),n[1]=n[1].charAt(0).toUpperCase()+n[1].slice(1).toLowerCase(),n[2]=n[2].toUpperCase();break;default:return t}return n.join("-")},"iso639-1":function(e){return(e||"").split("_").join("-").split("-")[0].toLowerCase()}},s=function(){if(angular.isFunction(o.getLocale))return o.getLocale();var e,t,n=i.$get().navigator,r=["language","browserLanguage","systemLanguage","userLanguage"];if(angular.isArray(n.languages))for(e=0;e<n.languages.length;e++)if((t=n.languages[e])&&t.length)return t;for(e=0;e<r.length;e++)if((t=n[r[e]])&&t.length)return t;return null};s.displayName="angular-translate/service: getFirstBrowserLanguage";var ie=function(){var e=s()||"";return a[r]&&(e=a[r](e)),e};ie.displayName="angular-translate/service: getLocale";var oe=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},ae=function(){return this.toString().replace(/^\s+|\s+$/g,"")},f=function(e){return angular.isString(e)?e.toLowerCase():e},se=function(e){if(e){for(var t,n=[],r=f(e),i=0,o=W.length;i<o;i++)n.push(f(W[i]));if(-1<(i=oe(n,r)))return W[i];if(l)for(var a in l)if(l.hasOwnProperty(a)){var s=!1,u=Object.prototype.hasOwnProperty.call(l,a)&&f(a)===f(e);if("*"===a.slice(-1)&&(s=f(a.slice(0,-1))===f(e.slice(0,a.length-1))),(u||s)&&(t=l[a],-1<oe(n,f(t))))return t}var c=e.split("_");return 1<c.length&&-1<oe(n,f(c[0]))?c[0]:void 0}},ue=function(e,t){if(!e&&!t)return G;if(e&&!t){if(angular.isString(e))return G[e]}else angular.isObject(G[e])||(G[e]={}),angular.extend(G[e],ce(t));return this};this.translations=ue,this.cloakClassName=function(e){return e?(Y=e,this):Y},this.nestedObjectDelimeter=function(e){return e?(X=e,this):X};var ce=function(e,t,n,r){var i,o,a;for(i in t||(t=[]),n||(n={}),e)Object.prototype.hasOwnProperty.call(e,i)&&(a=e[i],angular.isObject(a)?ce(a,t.concat(i),n,i):(o=t.length?""+t.join(X)+X+i:i,t.length&&i===r&&(n[""+t.join(X)]="@:"+o),n[o]=a));return n};ce.displayName="flatObject",this.addInterpolation=function(e){return J.push(e),this},this.useMessageFormatInterpolation=function(){return this.useInterpolation("$translateMessageFormatInterpolation")},this.useInterpolation=function(e){return D=e,this},this.useSanitizeValueStrategy=function(e){return t.useStrategy(e),this},this.preferredLanguage=function(e){return e?(le(e),this):T};var le=function(e){return e&&(T=e),T};this.translationNotFoundIndicator=function(e){return this.translationNotFoundIndicatorLeft(e),this.translationNotFoundIndicatorRight(e),this},this.translationNotFoundIndicatorLeft=function(e){return e?(F=e,this):F},this.translationNotFoundIndicatorRight=function(e){return e?(H=e,this):H},this.fallbackLanguage=function(e){return fe(e),this};var fe=function(e){return e?(angular.isString(e)?(M=!0,A=[e]):angular.isArray(e)&&(M=!1,A=e),angular.isString(T)&&oe(A,T)<0&&A.push(T),this):M?A[0]:A};this.use=function(e){if(e){if(!G[e]&&!q)throw new Error("$translateProvider couldn't find translationTable for langKey: '"+e+"'");return N=e,this}return N},this.resolveClientLocale=function(){return ie()};var pe=function(e){return e?(K=e,this):n?n+K:K};this.storageKey=pe,this.useUrlLoader=function(e,t){return this.useLoader("$translateUrlLoader",angular.extend({url:e},t))},this.useStaticFilesLoader=function(e){return this.useLoader("$translateStaticFilesLoader",e)},this.useLoader=function(e,t){return q=e,U=t||{},this},this.useLocalStorage=function(){return this.useStorage("$translateLocalStorage")},this.useCookieStorage=function(){return this.useStorage("$translateCookieStorage")},this.useStorage=function(e){return V=e,this},this.storagePrefix=function(e){return e?(n=e,this):e},this.useMissingTranslationHandlerLog=function(){return this.useMissingTranslationHandler("$translateMissingTranslationHandlerLog")},this.useMissingTranslationHandler=function(e){return I=e,this},this.usePostCompiling=function(e){return Q=!!e,this},this.forceAsyncReload=function(e){return Z=!!e,this},this.uniformLanguageTag=function(e){return e?angular.isString(e)&&(e={standard:e}):e={},r=e.standard,this},this.determinePreferredLanguage=function(e){var t=e&&angular.isFunction(e)?e():ie();return T=W.length&&se(t)||t,this},this.registerAvailableLanguageKeys=function(e,t){return e?(W=e,t&&(l=t),this):W},this.useLoaderCache=function(e){return!1===e?z=void 0:!0===e?z=!0:void 0===e?z="$translationCache":e&&(z=e),this},this.directivePriority=function(e){return void 0===e?ne:(ne=e,this)},this.statefulFilter=function(e){return void 0===e?re:(re=e,this)},this.postProcess=function(e){return B=e||void 0,this},this.keepContent=function(e){return te=!!e,this},this.$get=["$log","$injector","$rootScope","$q",function(e,s,a,g){var o,$,y,b=s.get(D||"$translateDefaultInterpolation"),w=!1,_={},f={},S=function(e,a,s,u,c,l){!N&&T&&(N=T);var r=c&&c!==N?se(c)||c:N;if(c&&v(c),angular.isArray(e)){return function(e){for(var r={},t=[],n=function(t){var n=g.defer(),e=function(e){r[t]=e,n.resolve([t,e])};return S(t,a,s,u,c,l).then(e,e),n.promise},i=0,o=e.length;i<o;i++)t.push(n(e[i]));return g.all(t).then(function(){return r})}(e)}var t=g.defer();e&&(e=ae.apply(e));var n=function(){var e=f[r]||f[T];if($=0,V&&!e){var t=o.get(K);if(e=f[t],A&&A.length){var n=oe(A,t);$=0===n?1:0,oe(A,T)<0&&A.push(T)}}return e}();if(n){var i=function(){c||(r=N),d(e,a,s,u,r,l).then(t.resolve,t.reject)};i.displayName="promiseResolved",n.finally(i).catch(angular.noop)}else d(e,a,s,u,r,l).then(t.resolve,t.reject);return t.promise},x=function(e){return F&&(e=[F,e].join(" ")),H&&(e=[e,H].join(" ")),e},u=function(e){N=e,V&&o.put(S.storageKey(),N),a.$emit("$translateChangeSuccess",{language:e}),b.setLocale(N);var t=function(e,t){_[t].setLocale(N)};t.displayName="eachInterpolatorLocaleSetter",angular.forEach(_,t),a.$emit("$translateChangeEnd",{language:e})},c=function(n){if(!n)throw"No language key specified for loading.";var r=g.defer();a.$emit("$translateLoadingStart",{language:n}),w=!0;var e=z;"string"==typeof e&&(e=s.get(e));var t=angular.extend({},U,{key:n,$http:angular.extend({},{cache:e},U.$http)}),i=function(e){var t={};a.$emit("$translateLoadingSuccess",{language:n}),angular.isArray(e)?angular.forEach(e,function(e){angular.extend(t,ce(e))}):angular.extend(t,ce(e)),w=!1,r.resolve({key:n,table:t}),a.$emit("$translateLoadingEnd",{language:n})};i.displayName="onLoaderSuccess";var o=function(e){a.$emit("$translateLoadingError",{language:e}),r.reject(e),a.$emit("$translateLoadingEnd",{language:e})};return o.displayName="onLoaderError",s.get(q)(t).then(i,o),r.promise};if(V&&(!(o=s.get(V)).get||!o.put))throw new Error("Couldn't use storage '"+V+"', missing get() or put() method!");if(J.length){var t=function(e){var t=s.get(e);t.setLocale(T||N),_[t.getInterpolationIdentifier()]=t};t.displayName="interpolationFactoryAdder",angular.forEach(J,t)}var l=function(r,i,o,a,s){var u=g.defer(),e=function(e){if(Object.prototype.hasOwnProperty.call(e,i)&&null!==e[i]){a.setLocale(r);var t=e[i];if("@:"===t.substr(0,2))l(r,t.substr(2),o,a,s).then(u.resolve,u.reject);else{var n=a.interpolate(e[i],o,"service",s,i);n=k(i,e[i],n,o,r),u.resolve(n)}a.setLocale(N)}else u.reject()};return e.displayName="fallbackTranslationResolver",function(e){var t=g.defer();if(Object.prototype.hasOwnProperty.call(G,e))t.resolve(G[e]);else if(f[e]){var n=function(e){ue(e.key,e.table),t.resolve(e.table)};n.displayName="translationTableResolver",f[e].then(n,t.reject)}else t.reject();return t.promise}(r).then(e,u.reject),u.promise},p=function(e,t,n,r,i){var o,a=G[e];if(a&&Object.prototype.hasOwnProperty.call(a,t)&&null!==a[t]){if(r.setLocale(e),o=r.interpolate(a[t],n,"filter",i,t),o=k(t,a[t],o,n,e,i),!angular.isString(o)&&angular.isFunction(o.$$unwrapTrustedValue)){var s=o.$$unwrapTrustedValue();if("@:"===s.substr(0,2))return p(e,s.substr(2),n,r,i)}else if("@:"===o.substr(0,2))return p(e,o.substr(2),n,r,i);r.setLocale(N)}return o},E=function(e,t,n,r){return I?s.get(I)(e,N,t,n,r):e},C=function(e,t,n,r,i,o){var a=g.defer();if(e<A.length){var s=A[e];l(s,t,n,r,o).then(function(e){a.resolve(e)},function(){return C(e+1,t,n,r,i,o).then(a.resolve,a.reject)})}else if(i)a.resolve(i);else{var u=E(t,n,i);I&&u?a.resolve(u):a.reject(x(t))}return a.promise},h=function(e,t,n,r,i){var o;if(e<A.length){var a=A[e];(o=p(a,t,n,r,i))||""===o||(o=h(e+1,t,n,r))}return o},d=function(e,t,n,r,i,o){var a,s,u,c,l,f=g.defer(),p=i?G[i]:G,h=n?_[n]:b;if(p&&Object.prototype.hasOwnProperty.call(p,e)&&null!==p[e]){var d=p[e];if("@:"===d.substr(0,2))S(d.substr(2),t,n,r,i,o).then(f.resolve,f.reject);else{var m=h.interpolate(d,t,"service",o,e);m=k(e,d,m,t,i),f.resolve(m)}}else{var v;I&&!w&&(v=E(e,t,r)),i&&A&&A.length?(a=e,s=t,u=h,c=r,l=o,C(0<y?y:$,a,s,u,c,l)).then(function(e){f.resolve(e)},function(e){f.reject(x(e))}):I&&!w&&v?r?f.resolve(r):f.resolve(v):r?f.resolve(r):f.reject(x(e))}return f.promise},m=function(e,t,n,r,i){var o,a=r?G[r]:G,s=b;if(_&&Object.prototype.hasOwnProperty.call(_,n)&&(s=_[n]),a&&Object.prototype.hasOwnProperty.call(a,e)&&null!==a[e]){var u=a[e];o="@:"===u.substr(0,2)?m(u.substr(2),t,n,r,i):(o=s.interpolate(u,t,"filter",i,e),k(e,u,o,t,r,i))}else{var c;I&&!w&&(c=E(e,t,i)),o=r&&A&&A.length?h(($=0)<y?y:$,e,t,s,i):I&&!w&&c?c:x(e)}return o},k=function(e,t,n,r,i,o){var a=B;return a&&("string"==typeof a&&(a=s.get(a)),a)?a(e,t,n,r,i,o):n},v=function(e){G[e]||!q||f[e]||(f[e]=c(e).then(function(e){return ue(e.key,e.table),e}))};S.preferredLanguage=function(e){return e&&le(e),T},S.cloakClassName=function(){return Y},S.nestedObjectDelimeter=function(){return X},S.fallbackLanguage=function(e){if(null!=e){if(fe(e),q&&A&&A.length)for(var t=0,n=A.length;t<n;t++)f[A[t]]||(f[A[t]]=c(A[t]));S.use(S.use())}return M?A[0]:A},S.useFallbackLanguage=function(e){if(null!=e)if(e){var t=oe(A,e);-1<t&&(y=t)}else y=0},S.proposedLanguage=function(){return L},S.storage=function(){return o},S.negotiateLocale=se,S.use=function(t){if(!t)return N;var n=g.defer();n.promise.then(null,angular.noop),a.$emit("$translateChangeStart",{language:t});var e=se(t);return 0<W.length&&!e?g.reject(t):(e&&(t=e),L=t,!Z&&G[t]||!q||f[t]?f[t]?f[t].then(function(e){return L===e.key&&u(e.key),n.resolve(e.key),e},function(e){return!N&&A&&0<A.length&&A[0]!==e?S.use(A[0]).then(n.resolve,n.reject):n.reject(e)}):(n.resolve(t),u(t)):(f[t]=c(t).then(function(e){return ue(e.key,e.table),n.resolve(e.key),L===t&&u(e.key),e},function(e){return a.$emit("$translateChangeError",{language:e}),n.reject(e),a.$emit("$translateChangeEnd",{language:e}),g.reject(e)}),f[t].finally(function(){var e;L===(e=t)&&(L=void 0),f[e]=void 0}).catch(angular.noop)),n.promise)},S.resolveClientLocale=function(){return ie()},S.storageKey=function(){return pe()},S.isPostCompilingEnabled=function(){return Q},S.isForceAsyncReloadEnabled=function(){return Z},S.isKeepContent=function(){return te},S.refresh=function(e){if(!q)throw new Error("Couldn't refresh translation table, no loader registered!");a.$emit("$translateRefreshStart",{language:e});var t=g.defer(),n={};function r(t){var e=c(t);return(f[t]=e).then(function(e){G[t]={},ue(t,e.table),n[t]=!0},angular.noop),e}if(t.promise.then(function(){for(var e in G)G.hasOwnProperty(e)&&(e in n||delete G[e]);N&&u(N)},angular.noop).finally(function(){a.$emit("$translateRefreshEnd",{language:e})}),e)G[e]?r(e).then(t.resolve,t.reject):t.reject();else{var i=A&&A.slice()||[];N&&-1===i.indexOf(N)&&i.push(N),g.all(i.map(r)).then(t.resolve,t.reject)}return t.promise},S.instant=function(e,t,n,r,i){var o=r&&r!==N?se(r)||r:N;if(null===e||angular.isUndefined(e))return e;if(r&&v(r),angular.isArray(e)){for(var a={},s=0,u=e.length;s<u;s++)a[e[s]]=S.instant(e[s],t,n,r,i);return a}if(angular.isString(e)&&e.length<1)return e;e&&(e=ae.apply(e));var c,l,f=[];T&&f.push(T),o&&f.push(o),A&&A.length&&(f=f.concat(A));for(var p=0,h=f.length;p<h;p++){var d=f[p];if(G[d]&&void 0!==G[d][e]&&(c=m(e,t,n,o,i)),void 0!==c)break}c||""===c||(F||H?c=x(e):(c=b.interpolate(e,t,"filter",i),I&&!w&&(l=E(e,t,i)),I&&!w&&l&&(c=l)));return c},S.versionInfo=function(){return"2.18.1"},S.loaderCache=function(){return z},S.directivePriority=function(){return ne},S.statefulFilter=function(){return re},S.isReady=function(){return ee};var n=g.defer();n.promise.then(function(){ee=!0}),S.onReady=function(e){var t=g.defer();return angular.isFunction(e)&&t.promise.then(e),ee?t.resolve():n.promise.then(t.resolve),t.promise},S.getAvailableLanguageKeys=function(){return 0<W.length?W:null},S.getTranslationTable=function(e){return(e=e||S.use())&&G[e]?angular.copy(G[e]):null};var r=a.$on("$translateReady",function(){n.resolve(),r(),r=null}),i=a.$on("$translateChangeEnd",function(){n.resolve(),i(),i=null});if(q){if(angular.equals(G,{})&&S.use()&&S.use(S.use()),A&&A.length)for(var O=function(e){return ue(e.key,e.table),a.$emit("$translateChangeEnd",{language:e.key}),e},j=0,P=A.length;j<P;j++){var R=A[j];!Z&&G[R]||(f[R]=c(R).then(O))}}else a.$emit("$translateReady",{language:S.use()});return S}]}function n(a,s){"use strict";var e={};return e.setLocale=function(e){e},e.getInterpolationIdentifier=function(){return"default"},e.useSanitizeValueStrategy=function(e){return s.useStrategy(e),this},e.interpolate=function(e,t,n,r,i){var o;return t=t||{},t=s.sanitize(t,"params",r,n),o=angular.isNumber(e)?""+e:angular.isString(e)?(o=a(e)(t),s.sanitize(o,"text",r,n)):""},e}function r(w,_,S,x,E){"use strict";var C=function(e){return angular.isString(e)?e.toLowerCase():e};return{restrict:"AE",scope:!0,priority:w.directivePriority(),compile:function(e,d){var m=d.translateValues?d.translateValues:void 0,v=d.translateInterpolation?d.translateInterpolation:void 0,g=d.translateSanitizeStrategy?d.translateSanitizeStrategy:void 0,$=e[0].outerHTML.match(/translate-value-+/i),y="^(.*)("+_.startSymbol()+".*"+_.endSymbol()+")(.*)",b="^(.*)"+_.startSymbol()+"(.*)"+_.endSymbol()+"(.*)";return function(i,u,c){i.interpolateParams={},i.preText="",i.postText="",i.translateNamespace=function e(t){if(t.translateNamespace)return t.translateNamespace;if(t.$parent)return e(t.$parent)}(i);var o={},a=function(e){if(angular.isFunction(a._unwatchOld)&&(a._unwatchOld(),a._unwatchOld=void 0),angular.equals(e,"")||!angular.isDefined(e)){var t=function(){return this.toString().replace(/^\s+|\s+$/g,"")}.apply(u.text()),n=t.match(y);if(angular.isArray(n)){i.preText=n[1],i.postText=n[3],o.translate=_(n[2])(i.$parent);var r=t.match(b);angular.isArray(r)&&r[2]&&r[2].length&&(a._unwatchOld=i.$watch(r[2],function(e){o.translate=e,l()}))}else o.translate=t||void 0}else o.translate=e;l()},e=function(t){c.$observe(t,function(e){o[t]=e,l()})};!function(e,t,n){if(t.translateValues&&angular.extend(e,x(t.translateValues)(i.$parent)),$)for(var r in n)Object.prototype.hasOwnProperty.call(t,r)&&"translateValue"===r.substr(0,14)&&"translateValues"!==r&&(e[C(r.substr(14,1))+r.substr(15)]=n[r])}(i.interpolateParams,c,d);var t=!0;for(var n in c.$observe("translate",function(e){void 0===e?a(""):""===e&&t||(o.translate=e,l()),t=!1}),c)c.hasOwnProperty(n)&&"translateAttr"===n.substr(0,13)&&13<n.length&&e(n);if(c.$observe("translateDefault",function(e){i.defaultText=e,l()}),g&&c.$observe("translateSanitizeStrategy",function(e){i.sanitizeStrategy=x(e)(i.$parent),l()}),m&&c.$observe("translateValues",function(e){e&&i.$parent.$watch(function(){angular.extend(i.interpolateParams,x(e)(i.$parent))})}),$){var r=function(n){c.$observe(n,function(e){var t=C(n.substr(14,1))+n.substr(15);i.interpolateParams[t]=e})};for(var s in c)Object.prototype.hasOwnProperty.call(c,s)&&"translateValue"===s.substr(0,14)&&"translateValues"!==s&&r(s)}var l=function(){for(var e in o)o.hasOwnProperty(e)&&void 0!==o[e]&&f(e,o[e],i,i.interpolateParams,i.defaultText,i.translateNamespace)},f=function(t,e,n,r,i,o){e?(o&&"."===e.charAt(0)&&(e=o+e),w(e,r,v,i,n.translateLanguage,n.sanitizeStrategy).then(function(e){p(e,n,!0,t)},function(e){p(e,n,!1,t)})):p(e,n,!1,t)},p=function(e,t,n,r){if(n||void 0!==t.defaultText&&(e=t.defaultText),"translate"===r){(n||!n&&!w.isKeepContent()&&void 0===c.translateKeepContent)&&u.empty().append(t.preText+e+t.postText);var i=w.isPostCompilingEnabled(),o=void 0!==d.translateCompile,a=o&&"false"!==d.translateCompile;(i&&!o||a)&&S(u.contents())(t)}else{var s=c.$attr[r];"data-"===s.substr(0,5)&&(s=s.substr(5)),s=s.substr(15),u.attr(s,e)}};(m||$||c.translateDefault)&&i.$watch("interpolateParams",l,!0),i.$on("translateLanguageChanged",l);var h=E.$on("$translateChangeSuccess",l);u.text().length?c.translate?a(c.translate):a(""):c.translate&&a(c.translate),l(),i.$on("$destroy",h)}}}}function i(c,l){"use strict";return{restrict:"A",priority:c.directivePriority(),link:function(n,r,i){var o,a,s,u={},e=function(){angular.forEach(o,function(e,t){e&&(u[t]=!0,n.translateNamespace&&"."===e.charAt(0)&&(e=n.translateNamespace+e),c(e,a,i.translateInterpolation,void 0,n.translateLanguage,s).then(function(e){r.attr(t,e)},function(e){r.attr(t,e)}))}),angular.forEach(u,function(e,t){o[t]||(r.removeAttr(t),delete u[t])})};f(n,i.translateAttr,function(e){o=e},e),f(n,i.translateValues,function(e){a=e},e),f(n,i.translateSanitizeStrategy,function(e){s=e},e),i.translateValues&&n.$watch(i.translateValues,e,!0),n.$on("translateLanguageChanged",e);var t=l.$on("$translateChangeSuccess",e);e(),n.$on("$destroy",t)}}}function f(e,t,n,r){"use strict";t&&("::"===t.substr(0,2)?t=t.substr(2):e.$watch(t,function(e){n(e),r()},!0),n(e.$eval(t)))}function o(a,s){"use strict";return{compile:function(e){var o=function(e){e.addClass(a.cloakClassName())};return o(e),function(e,t,n){var r=function(e){e.removeClass(a.cloakClassName())}.bind(this,t),i=o.bind(this,t);n.translateCloak&&n.translateCloak.length?(n.$observe("translateCloak",function(e){a(e).then(r,i)}),s.$on("$translateChangeSuccess",function(){a(n.translateCloak).then(r,i)})):a.onReady(r)}}}}function a(){"use strict";return{restrict:"A",scope:!0,compile:function(){return{pre:function(e,t,n){e.translateNamespace=function e(t){if(t.translateNamespace)return t.translateNamespace;if(t.$parent)return e(t.$parent)}(e),e.translateNamespace&&"."===n.translateNamespace.charAt(0)?e.translateNamespace+=n.translateNamespace:e.translateNamespace=n.translateNamespace}}}}}function s(){"use strict";return{restrict:"A",scope:!0,compile:function(){return function(t,e,n){n.$observe("translateLanguage",function(e){t.translateLanguage=e}),t.$watch("translateLanguage",function(){t.$broadcast("translateLanguageChanged")})}}}}function u(o,a){"use strict";var e=function(e,t,n,r){if(!angular.isObject(t)){var i=this||{__SCOPE_IS_NOT_AVAILABLE:"More info at https://github.com/angular/angular.js/commit/8863b9d04c722b278fa93c5d66ad1e578ad6eb1f"};t=o(t)(i)}return a.instant(e,t,n,r)};return a.statefulFilter()&&(e.$stateful=!0),e}function c(e){"use strict";return e("translations")}return e.$inject=["$translate"],t.$inject=["$STORAGE_KEY","$windowProvider","$translateSanitizationProvider","pascalprechtTranslateOverrider"],n.$inject=["$interpolate","$translateSanitization"],r.$inject=["$translate","$interpolate","$compile","$parse","$rootScope"],i.$inject=["$translate","$rootScope"],o.$inject=["$translate","$rootScope"],u.$inject=["$parse","$translate"],c.$inject=["$cacheFactory"],angular.module("pascalprecht.translate",["ng"]).run(e),e.displayName="runTranslate",angular.module("pascalprecht.translate").provider("$translateSanitization",function(){"use strict";var n,r,p,h=null,d=!1,m=!1;(p={sanitize:function(e,t){return"text"===t&&(e=o(e)),e},escape:function(e,t){return"text"===t&&(e=i(e)),e},sanitizeParameters:function(e,t){return"params"===t&&(e=s(e,o)),e},escapeParameters:function(e,t){return"params"===t&&(e=s(e,i)),e},sce:function(e,t,n){return"text"===t?e=a(e):"params"===t&&"filter"!==n&&(e=s(e,i)),e},sceParameters:function(e,t){return"params"===t&&(e=s(e,a)),e}}).escaped=p.escapeParameters,this.addStrategy=function(e,t){return p[e]=t,this},this.removeStrategy=function(e){return delete p[e],this},this.useStrategy=function(e){return d=!0,h=e,this},this.$get=["$injector","$log",function(c,l){var t,f={};return c.has("$sanitize")&&(n=c.get("$sanitize")),c.has("$sce")&&(r=c.get("$sce")),{useStrategy:(t=this,function(e){t.useStrategy(e)}),sanitize:function(e,t,n,r){if(h||d||m||(l.warn("pascalprecht.translate.$translateSanitization: No sanitization strategy has been configured. This can have serious security implications. See http://angular-translate.github.io/docs/#/guide/19_security for details."),m=!0),n||null===n||(n=h),!n)return e;r||(r="service");var i,o,a,s,u=angular.isArray(n)?n:[n];return i=e,o=t,a=r,s=u,angular.forEach(s,function(t){if(angular.isFunction(t))i=t(i,o,a);else if(angular.isFunction(p[t]))i=p[t](i,o,a);else{if(!angular.isString(p[t]))throw new Error("pascalprecht.translate.$translateSanitization: Unknown sanitization strategy: '"+t+"'");if(!f[p[t]])try{f[p[t]]=c.get(p[t])}catch(e){throw f[p[t]]=function(){},new Error("pascalprecht.translate.$translateSanitization: Unknown sanitization strategy: '"+t+"'")}i=f[p[t]](i,o,a)}}),i}}}];var i=function(e){var t=angular.element("<div></div>");return t.text(e),t.html()},o=function(e){if(!n)throw new Error("pascalprecht.translate.$translateSanitization: Error cannot find $sanitize service. Either include the ngSanitize module (https://docs.angularjs.org/api/ngSanitize) or use a sanitization strategy which does not depend on $sanitize, such as 'escape'.");return n(e)},a=function(e){if(!r)throw new Error("pascalprecht.translate.$translateSanitization: Error cannot find $sce service.");return r.trustAsHtml(e)},s=function(e,n,r){if(angular.isDate(e))return e;if(angular.isObject(e)){var i=angular.isArray(e)?[]:{};if(r){if(-1<r.indexOf(e))throw new Error("pascalprecht.translate.$translateSanitization: Error cannot interpolate parameter due recursive object")}else r=[];return r.push(e),angular.forEach(e,function(e,t){angular.isFunction(e)||(i[t]=s(e,n,r))}),r.splice(-1,1),i}return angular.isNumber(e)?e:!0===e||!1===e?e:angular.isUndefined(e)||null===e?e:n(e)}}),angular.module("pascalprecht.translate").constant("pascalprechtTranslateOverrider",{}).provider("$translate",t),t.displayName="displayName",angular.module("pascalprecht.translate").factory("$translateDefaultInterpolation",n),n.displayName="$translateDefaultInterpolation",angular.module("pascalprecht.translate").constant("$STORAGE_KEY","NG_TRANSLATE_LANG_KEY"),angular.module("pascalprecht.translate").directive("translate",r),r.displayName="translateDirective",angular.module("pascalprecht.translate").directive("translateAttr",i),i.displayName="translateAttrDirective",angular.module("pascalprecht.translate").directive("translateCloak",o),o.displayName="translateCloakDirective",angular.module("pascalprecht.translate").directive("translateNamespace",a),a.displayName="translateNamespaceDirective",angular.module("pascalprecht.translate").directive("translateLanguage",s),s.displayName="translateLanguageDirective",angular.module("pascalprecht.translate").filter("translate",u),u.displayName="translateFilterFactory",angular.module("pascalprecht.translate").factory("$translationCache",c),c.displayName="$translationCache","pascalprecht.translate"},"function"==typeof define&&define.amd?define([],function(){return r()}):"object"==typeof t&&t.exports?t.exports=r():r()},{}],86:[function(e,t,n){!function(fe){"use strict";var l={objectMaxDepth:5,urlErrorParamsEnabled:!0};function e(e){if(!Se(e))return l;T(e.objectMaxDepth)&&(l.objectMaxDepth=c(e.objectMaxDepth)?e.objectMaxDepth:NaN),T(e.urlErrorParamsEnabled)&&je(e.urlErrorParamsEnabled)&&(l.urlErrorParamsEnabled=e.urlErrorParamsEnabled)}function c(e){return S(e)&&0<e}function O(a,s){s=s||Error;var u="https://errors.angularjs.org/1.7.7/",e=u.replace(".","\\.")+"[\\s\\S]*",c=new RegExp(e,"g");return function(){var e,t,n=arguments[0],r=arguments[1],i="["+(a?a+":":"")+n+"] ",o=Ne(arguments,2).map(function(e){return We(e,l.objectMaxDepth)});if(i+=r.replace(/\{\d+\}/g,function(e){var t=+e.slice(1,-1);return t<o.length?o[t].replace(c,""):e}),i+="\n"+u+(a?a+"/":"")+n,l.urlErrorParamsEnabled)for(t=0,e="?";t<o.length;t++,e="&")i+=e+"p"+t+"="+encodeURIComponent(o[t]);return new s(i)}}var pe,he,t,g,o=/^\/(.+)\/([a-z]*)$/,f="validity",de=Object.prototype.hasOwnProperty,me=function(e){return xe(e)?e.toLowerCase():e},p=function(e){return xe(e)?e.toUpperCase():e},a=[].slice,r=[].splice,n=[].push,ve=Object.prototype.toString,h=Object.getPrototypeOf,d=O("ng"),y=fe.angular||(fe.angular={}),i=0;function N(e){if(null==e||C(e))return!1;if(Ee(e)||xe(e)||he&&e instanceof he)return!0;var t="length"in Object(e)&&e.length;return S(t)&&(0<=t&&t-1 in e||"function"==typeof e.item)}function ge(e,t,n){var r,i;if(e)if(ke(e))for(r in e)"prototype"!==r&&"length"!==r&&"name"!==r&&e.hasOwnProperty(r)&&t.call(n,e[r],r,e);else if(Ee(e)||N(e)){var o="object"!=typeof e;for(r=0,i=e.length;r<i;r++)(o||r in e)&&t.call(n,e[r],r,e)}else if(e.forEach&&e.forEach!==ge)e.forEach(t,n,e);else if(_(e))for(r in e)t.call(n,e[r],r,e);else if("function"==typeof e.hasOwnProperty)for(r in e)e.hasOwnProperty(r)&&t.call(n,e[r],r,e);else for(r in e)de.call(e,r)&&t.call(n,e[r],r,e);return e}function s(e,t,n){for(var r=Object.keys(e).sort(),i=0;i<r.length;i++)t.call(n,e[r[i]],r[i]);return r}function j(n){return function(e,t){n(t,e)}}function u(){return++i}function m(e,t){t?e.$$hashKey=t:delete e.$$hashKey}function v(e,t,n){for(var r=e.$$hashKey,i=0,o=t.length;i<o;++i){var a=t[i];if(Se(a)||ke(a))for(var s=Object.keys(a),u=0,c=s.length;u<c;u++){var l=s[u],f=a[l];n&&Se(f)?x(f)?e[l]=new Date(f.valueOf()):E(f)?e[l]=new RegExp(f):f.nodeName?e[l]=f.cloneNode(!0):L(f)?e[l]=f.clone():(Se(e[l])||(e[l]=Ee(f)?[]:{}),v(e[l],[f],!0)):e[l]=f}}return m(e,r),e}function $e(e){return v(e,a.call(arguments,1),!1)}function $(e){return v(e,a.call(arguments,1),!0)}function b(e){return parseInt(e,10)}pe=fe.document.documentMode;var P=Number.isNaN||function(e){return e!=e};function ye(e,t){return $e(Object.create(e),t)}function be(){}function we(e){return e}function R(e){return function(){return e}}function w(e){return ke(e.toString)&&e.toString!==ve}function _e(e){return void 0===e}function T(e){return void 0!==e}function Se(e){return null!==e&&"object"==typeof e}function _(e){return null!==e&&"object"==typeof e&&!h(e)}function xe(e){return"string"==typeof e}function S(e){return"number"==typeof e}function x(e){return"[object Date]"===ve.call(e)}function Ee(e){return Array.isArray(e)||e instanceof Array}function Ce(e){switch(ve.call(e)){case"[object Error]":case"[object Exception]":case"[object DOMException]":return!0;default:return e instanceof Error}}function ke(e){return"function"==typeof e}function E(e){return"[object RegExp]"===ve.call(e)}function C(e){return e&&e.window===e}function Oe(e){return e&&e.$evalAsync&&e.$watch}function je(e){return"boolean"==typeof e}function k(e){return e&&ke(e.then)}be.$inject=[],we.$inject=[];var A=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/;var Pe=function(e){return xe(e)?e.trim():e},M=function(e){return e.replace(/([-()[\]{}+?*.$^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")};function L(e){return!(!e||!(e.nodeName||e.prop&&e.attr&&e.find))}function Re(e){return me(e.nodeName||e[0]&&e[0].nodeName)}function V(e,t){return-1!==Array.prototype.indexOf.call(e,t)}function Te(e,t){var n=e.indexOf(t);return 0<=n&&e.splice(n,1),n}function I(e,n,t){var r,i,o=[],a=[];if(t=c(t)?t:NaN,n){if((i=n)&&S(i.length)&&A.test(ve.call(i))||(r=n,"[object ArrayBuffer]"===ve.call(r)))throw d("cpta","Can't copy! TypedArray destination cannot be mutated.");if(e===n)throw d("cpi","Can't copy! Source and destination are identical.");return Ee(n)?n.length=0:ge(n,function(e,t){"$$hashKey"!==t&&delete n[t]}),o.push(e),a.push(n),s(e,n,t)}return u(e,t);function s(e,t,n){if(--n<0)return"...";var r,i=t.$$hashKey;if(Ee(e))for(var o=0,a=e.length;o<a;o++)t.push(u(e[o],n));else if(_(e))for(r in e)t[r]=u(e[r],n);else if(e&&"function"==typeof e.hasOwnProperty)for(r in e)e.hasOwnProperty(r)&&(t[r]=u(e[r],n));else for(r in e)de.call(e,r)&&(t[r]=u(e[r],n));return m(t,i),t}function u(e,t){if(!Se(e))return e;var n=o.indexOf(e);if(-1!==n)return a[n];if(C(e)||Oe(e))throw d("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");var r=!1,i=function(e){switch(ve.call(e)){case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Float32Array]":case"[object Float64Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return new e.constructor(u(e.buffer),e.byteOffset,e.length);case"[object ArrayBuffer]":if(e.slice)return e.slice(0);var t=new ArrayBuffer(e.byteLength);return new Uint8Array(t).set(new Uint8Array(e)),t;case"[object Boolean]":case"[object Number]":case"[object String]":case"[object Date]":return new e.constructor(e.valueOf());case"[object RegExp]":var n=new RegExp(e.source,e.toString().match(/[^/]*$/)[0]);return n.lastIndex=e.lastIndex,n;case"[object Blob]":return new e.constructor([e],{type:e.type})}if(ke(e.cloneNode))return e.cloneNode(!0)}(e);return void 0===i&&(i=Ee(e)?[]:Object.create(h(e)),r=!0),o.push(e),a.push(i),r?s(e,i,t):i}}function Ae(e,t){return e===t||e!=e&&t!=t}function Me(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!=e&&t!=t)return!0;var n,r,i,o=typeof e;if(o===typeof t&&"object"===o){if(!Ee(e)){if(x(e))return!!x(t)&&Ae(e.getTime(),t.getTime());if(E(e))return!!E(t)&&e.toString()===t.toString();if(Oe(e)||Oe(t)||C(e)||C(t)||Ee(t)||x(t)||E(t))return!1;for(r in i=qe(),e)if("$"!==r.charAt(0)&&!ke(e[r])){if(!Me(e[r],t[r]))return!1;i[r]=!0}for(r in t)if(!(r in i)&&"$"!==r.charAt(0)&&T(t[r])&&!ke(t[r]))return!1;return!0}if(!Ee(t))return!1;if((n=e.length)===t.length){for(r=0;r<n;r++)if(!Me(e[r],t[r]))return!1;return!0}}return!1}var D=function(){if(!T(D.rules)){var e=fe.document.querySelector("[ng-csp]")||fe.document.querySelector("[data-ng-csp]");if(e){var t=e.getAttribute("ng-csp")||e.getAttribute("data-ng-csp");D.rules={noUnsafeEval:!t||-1!==t.indexOf("no-unsafe-eval"),noInlineStyle:!t||-1!==t.indexOf("no-inline-style")}}else D.rules={noUnsafeEval:function(){try{return new Function(""),!1}catch(e){return!0}}(),noInlineStyle:!1}}return D.rules},q=function(){if(T(q.name_))return q.name_;var e,t,n,r,i=X.length;for(t=0;t<i;++t)if(n=X[t],e=fe.document.querySelector("["+n.replace(":","\\:")+"jq]")){r=e.getAttribute(n+"jq");break}return q.name_=r};function U(e,t,n){return e.concat(a.call(t,n))}function Ne(e,t){return a.call(e,t||0)}function Le(e,t){var n=2<arguments.length?Ne(arguments,2):[];return!ke(t)||t instanceof RegExp?t:n.length?function(){return arguments.length?t.apply(e,U(n,arguments,0)):t.apply(e,n)}:function(){return arguments.length?t.apply(e,arguments):t.call(e)}}function F(e,t){var n=t;return"string"==typeof e&&"$"===e.charAt(0)&&"$"===e.charAt(1)?n=void 0:C(t)?n="$WINDOW":t&&fe.document===t?n="$DOCUMENT":Oe(t)&&(n="$SCOPE"),n}function H(e,t){if(!_e(e))return S(t)||(t=t?2:null),JSON.stringify(e,F,t)}function z(e){return xe(e)?JSON.parse(e):e}var B=/:/g;function G(e,t){e=e.replace(B,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return P(n)?t:n}function W(e,t){return(e=new Date(e.getTime())).setMinutes(e.getMinutes()+t),e}function K(e,t,n){n=n?-1:1;var r=e.getTimezoneOffset();return W(e,n*(G(t,r)-r))}function Ve(e){e=he(e).clone().empty();var t=he("<div></div>").append(e).html();try{return e[0].nodeType===Fe?me(t):t.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/,function(e,t){return"<"+me(t)})}catch(e){return me(t)}}function J(e){try{return decodeURIComponent(e)}catch(e){}}function Y(e){var i={};return ge((e||"").split("&"),function(e){var t,n,r;e&&(n=e=e.replace(/\+/g,"%20"),-1!==(t=e.indexOf("="))&&(n=e.substring(0,t),r=e.substring(t+1)),T(n=J(n))&&(r=!T(r)||J(r),de.call(i,n)?Ee(i[n])?i[n].push(r):i[n]=[i[n],r]:i[n]=r))}),i}function Q(e){return Z(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function Z(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,t?"%20":"+")}var X=["ng-","data-ng-","ng:","x-ng-"];var ee=function(n){var e=n.currentScript;if(!e)return!0;if(!(e instanceof fe.HTMLScriptElement||e instanceof fe.SVGScriptElement))return!1;var t=e.attributes;return[t.getNamedItem("src"),t.getNamedItem("href"),t.getNamedItem("xlink:href")].every(function(e){if(!e)return!0;if(!e.value)return!1;var t=n.createElement("a");if(t.href=e.value,n.location.origin===t.origin)return!0;switch(t.protocol){case"http:":case"https:":case"ftp:":case"blob:":case"file:":case"data:":return!0;default:return!1}})}(fe.document);function te(r,e){var i,o,t={};if(ge(X,function(e){var t=e+"app";!i&&r.hasAttribute&&r.hasAttribute(t)&&(o=(i=r).getAttribute(t))}),ge(X,function(e){var t,n=e+"app";!i&&(t=r.querySelector("["+n.replace(":","\\:")+"]"))&&(o=(i=t).getAttribute(n))}),i){if(!ee)return void fe.console.error("AngularJS: disabling automatic bootstrap. <script> protocol indicates an extension, document.location.href does not match.");t.strictDi=null!==function(e,t){var n,r,i=X.length;for(r=0;r<i;++r)if(n=X[r]+t,xe(n=e.getAttribute(n)))return n;return null}(i,"strict-di"),e(i,o?[o]:[],t)}}function ne(n,r,i){Se(i)||(i={});i=$e({strictDi:!1},i);var t=function(){if((n=he(n)).injector()){var e=n[0]===fe.document?"document":Ve(n);throw d("btstrpd","App already bootstrapped with this element '{0}'",e.replace(/</,"&lt;").replace(/>/,"&gt;"))}(r=r||[]).unshift(["$provide",function(e){e.value("$rootElement",n)}]),i.debugInfoEnabled&&r.push(["$compileProvider",function(e){e.debugInfoEnabled(!0)}]),r.unshift("ng");var t=Qt(r,i.strictDi);return t.invoke(["$rootScope","$rootElement","$compile","$injector",function(e,t,n,r){e.$apply(function(){t.data("$injector",r),n(t)(e)})}]),t},e=/^NG_ENABLE_DEBUG_INFO!/,o=/^NG_DEFER_BOOTSTRAP!/;if(fe&&e.test(fe.name)&&(i.debugInfoEnabled=!0,fe.name=fe.name.replace(e,"")),fe&&!o.test(fe.name))return t();fe.name=fe.name.replace(o,""),y.resumeBootstrap=function(e){return ge(e,function(e){r.push(e)}),t()},ke(y.resumeDeferredBootstrap)&&y.resumeDeferredBootstrap()}function re(){fe.name="NG_ENABLE_DEBUG_INFO!"+fe.name,fe.location.reload()}function ie(e){var t=y.element(e).injector();if(!t)throw d("test","no injector found for element argument to getTestability");return t.get("$$testability")}var oe=/[A-Z]/g;function Ie(e,n){return n=n||"_",e.replace(oe,function(e,t){return(t?n:"")+e.toLowerCase()})}var ae=!1;function De(e,t,n){if(!e)throw d("areq","Argument '{0}' is {1}",t||"?",n||"required");return e}function se(e,t,n){return n&&Ee(e)&&(e=e[e.length-1]),De(ke(e),t,"not a function, got "+(e&&"object"==typeof e?e.constructor.name||"Object":typeof e)),e}function ue(e,t){if("hasOwnProperty"===e)throw d("badname","hasOwnProperty is not a valid {0} name",t)}function ce(e){for(var t,n=e[0],r=e[e.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(t||e[i]!==n)&&(t||(t=he(a.call(e,0,i))),t.push(n));return t||e}function qe(){return Object.create(null)}function le(e){if(null==e)return"";switch(typeof e){case"string":break;case"number":e=""+e;break;default:e=!w(e)||Ee(e)||x(e)?H(e):e.toString()}return e}var Ue=1,Fe=3,He=8,ze=9,Be=11;function Ge(e,t){if(Ee(e)){t=t||[];for(var n=0,r=e.length;n<r;n++)t[n]=e[n]}else if(Se(e))for(var i in t=t||{},e)"$"===i.charAt(0)&&"$"===i.charAt(1)||(t[i]=e[i]);return t||e}function We(e,t){return"function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):_e(e)?"undefined":"string"!=typeof e?(n=e,i=[],c(r=t)&&(n=y.copy(n,null,r)),JSON.stringify(n,function(e,t){if(Se(t=F(e,t))){if(0<=i.indexOf(t))return"...";i.push(t)}return t})):e;var n,r,i}var Ke={full:"1.7.7",major:1,minor:7,dot:7,codeName:"kingly-exiting"};pt.expando="ng339";var Je=pt.cache={},Ye=1;pt._data=function(e){return this.cache[e[this.expando]]||{}};var Qe=/-([a-z])/g,Ze=/^-ms-/,Xe={mouseleave:"mouseout",mouseenter:"mouseover"},et=O("jqLite");function tt(e,t){return t.toUpperCase()}function nt(e){return e.replace(Qe,tt)}var rt=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,it=/<|&#?\w+;/,ot=/<([\w:-]+)/,at=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,st={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ut(e){return!it.test(e)}function ct(e){var t=e.nodeType;return t===Ue||!t||t===ze}function lt(e,t){var n,r,i,o,a=t.createDocumentFragment(),s=[];if(ut(e))s.push(t.createTextNode(e));else{for(n=a.appendChild(t.createElement("div")),r=(ot.exec(e)||["",""])[1].toLowerCase(),i=st[r]||st._default,n.innerHTML=i[1]+e.replace(at,"<$1></$2>")+i[2],o=i[0];o--;)n=n.lastChild;s=U(s,n.childNodes),(n=a.firstChild).textContent=""}return a.textContent="",a.innerHTML="",ge(s,function(e){a.appendChild(e)}),a}st.optgroup=st.option,st.tbody=st.tfoot=st.colgroup=st.caption=st.thead,st.th=st.td;var ft=fe.Node.prototype.contains||function(e){return!!(16&this.compareDocumentPosition(e))};function pt(e){if(e instanceof pt)return e;var t,n,r,i;if(xe(e)&&(e=Pe(e),t=!0),!(this instanceof pt)){if(t&&"<"!==e.charAt(0))throw et("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new pt(e)}t?xt(this,(n=e,r=r||fe.document,(i=rt.exec(n))?[r.createElement(i[1])]:(i=lt(n,r))?i.childNodes:[])):ke(e)?jt(e):xt(this,e)}function ht(e){return e.cloneNode(!0)}function dt(e,t){!t&&ct(e)&&he.cleanData([e]),e.querySelectorAll&&he.cleanData(e.querySelectorAll("*"))}function mt(e){var t;for(t in e)return!1;return!0}function vt(e){var t=e.ng339,n=t&&Je[t],r=n&&n.events,i=n&&n.data;i&&!mt(i)||r&&!mt(r)||(delete Je[t],e.ng339=void 0)}function gt(n,e,r,t){if(T(t))throw et("offargs","jqLite#off() does not support the `selector` argument");var i=yt(n),o=i&&i.events,a=i&&i.handle;if(a){if(e){var s=function(e){var t=o[e];T(r)&&Te(t||[],r),T(r)&&t&&0<t.length||(n.removeEventListener(e,a),delete o[e])};ge(e.split(" "),function(e){s(e),Xe[e]&&s(Xe[e])})}else for(e in o)"$destroy"!==e&&n.removeEventListener(e,a),delete o[e];vt(n)}}function $t(e,t){var n=e.ng339,r=n&&Je[n];r&&(t?delete r.data[t]:r.data={},vt(e))}function yt(e,t){var n=e.ng339,r=n&&Je[n];return t&&!r&&(e.ng339=n=++Ye,r=Je[n]={events:{},data:{},handle:void 0}),r}function bt(e,t,n){if(ct(e)){var r,i=T(n),o=!i&&t&&!Se(t),a=!t,s=yt(e,!o),u=s&&s.data;if(i)u[nt(t)]=n;else{if(a)return u;if(o)return u&&u[nt(t)];for(r in t)u[nt(r)]=t[r]}}}function wt(e,t){return!!e.getAttribute&&-1<(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+t+" ")}function _t(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," "),r=n;ge(t.split(" "),function(e){e=Pe(e),r=r.replace(" "+e+" "," ")}),r!==n&&e.setAttribute("class",Pe(r))}}function St(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," "),r=n;ge(t.split(" "),function(e){e=Pe(e),-1===r.indexOf(" "+e+" ")&&(r+=e+" ")}),r!==n&&e.setAttribute("class",Pe(r))}}function xt(e,t){if(t)if(t.nodeType)e[e.length++]=t;else{var n=t.length;if("number"==typeof n&&t.window!==t){if(n)for(var r=0;r<n;r++)e[e.length++]=t[r]}else e[e.length++]=t}}function Et(e,t){return Ct(e,"$"+(t||"ngController")+"Controller")}function Ct(e,t,n){e.nodeType===ze&&(e=e.documentElement);for(var r=Ee(t)?t:[t];e;){for(var i=0,o=r.length;i<o;i++)if(T(n=he.data(e,r[i])))return n;e=e.parentNode||e.nodeType===Be&&e.host}}function kt(e){for(dt(e,!0);e.firstChild;)e.removeChild(e.firstChild)}function Ot(e,t){t||dt(e);var n=e.parentNode;n&&n.removeChild(e)}function jt(e){function t(){fe.document.removeEventListener("DOMContentLoaded",t),fe.removeEventListener("load",t),e()}"complete"===fe.document.readyState?fe.setTimeout(e):(fe.document.addEventListener("DOMContentLoaded",t),fe.addEventListener("load",t))}var Pt=pt.prototype={ready:jt,toString:function(){var t=[];return ge(this,function(e){t.push(""+e)}),"["+t.join(", ")+"]"},eq:function(e){return he(0<=e?this[e]:this[this.length+e])},length:0,push:n,sort:[].sort,splice:[].splice},Rt={};ge("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(e){Rt[me(e)]=e});var Tt={};ge("input,select,option,textarea,button,form,details".split(","),function(e){Tt[e]=!0});var At={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern",ngStep:"step"};function Mt(e,t){var n=Rt[t.toLowerCase()];return n&&Tt[Re(e)]&&n}function Nt(e,t,n){n.call(e,t)}function Lt(e,t,n){var r=t.relatedTarget;r&&(r===e||ft.call(e,r))||n.call(e,t)}function Vt(){this.$get=function(){return $e(pt,{hasClass:function(e,t){return e.attr&&(e=e[0]),wt(e,t)},addClass:function(e,t){return e.attr&&(e=e[0]),St(e,t)},removeClass:function(e,t){return e.attr&&(e=e[0]),_t(e,t)}})}}function It(e,t){var n=e&&e.$$hashKey;if(n)return"function"==typeof n&&(n=e.$$hashKey()),n;var r=typeof e;return n="function"===r||"object"===r&&null!==e?e.$$hashKey=r+":"+(t||u)():r+":"+e}ge({data:bt,removeData:$t,hasData:function(e){for(var t in Je[e.ng339])return!0;return!1},cleanData:function(e){for(var t=0,n=e.length;t<n;t++)$t(e[t]),gt(e[t])}},function(e,t){pt[t]=e}),ge({data:bt,inheritedData:Ct,scope:function(e){return he.data(e,"$scope")||Ct(e.parentNode||e,["$isolateScope","$scope"])},isolateScope:function(e){return he.data(e,"$isolateScope")||he.data(e,"$isolateScopeNoTemplate")},controller:Et,injector:function(e){return Ct(e,"$injector")},removeAttr:function(e,t){e.removeAttribute(t)},hasClass:wt,css:function(e,t,n){if(t=nt(t.replace(Ze,"ms-")),!T(n))return e.style[t];e.style[t]=n},attr:function(e,t,n){var r,i=e.nodeType;if(i!==Fe&&2!==i&&i!==He&&e.getAttribute){var o=me(t),a=Rt[o];if(!T(n))return r=e.getAttribute(t),a&&null!==r&&(r=o),null===r?void 0:r;null===n||!1===n&&a?e.removeAttribute(t):e.setAttribute(t,a?o:n)}},prop:function(e,t,n){if(!T(n))return e[t];e[t]=n},text:function(){return e.$dv="",e;function e(e,t){if(_e(t)){var n=e.nodeType;return n===Ue||n===Fe?e.textContent:""}e.textContent=t}}(),val:function(e,t){if(_e(t)){if(e.multiple&&"select"===Re(e)){var n=[];return ge(e.options,function(e){e.selected&&n.push(e.value||e.text)}),n}return e.value}e.value=t},html:function(e,t){if(_e(t))return e.innerHTML;dt(e,!0),e.innerHTML=t},empty:kt},function(c,e){pt.prototype[e]=function(e,t){var n,r,i=this.length;if(c!==kt&&_e(2===c.length&&c!==wt&&c!==Et?e:t)){if(Se(e)){for(n=0;n<i;n++)if(c===bt)c(this[n],e);else for(r in e)c(this[n],r,e[r]);return this}for(var o=c.$dv,a=_e(o)?Math.min(i,1):i,s=0;s<a;s++){var u=c(this[s],e,t);o=o?o+u:u}return o}for(n=0;n<i;n++)c(this[n],e,t);return this}}),ge({removeData:$t,on:function(i,e,o,t){if(T(t))throw et("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(ct(i)){var s,u,n,r=yt(i,!0),a=r.events,c=r.handle;c||(c=r.handle=(u=a,(n=function(e,t){e.isDefaultPrevented=function(){return e.defaultPrevented};var n=u[t||e.type],r=n?n.length:0;if(r){if(_e(e.immediatePropagationStopped)){var i=e.stopImmediatePropagation;e.stopImmediatePropagation=function(){e.immediatePropagationStopped=!0,e.stopPropagation&&e.stopPropagation(),i&&i.call(e)}}e.isImmediatePropagationStopped=function(){return!0===e.immediatePropagationStopped};var o=n.specialHandlerWrapper||Nt;1<r&&(n=Ge(n));for(var a=0;a<r;a++)e.isImmediatePropagationStopped()||o(s,e,n[a])}}).elem=s=i,n));for(var l=0<=e.indexOf(" ")?e.split(" "):[e],f=l.length,p=function(e,t,n){var r=a[e];r||((r=a[e]=[]).specialHandlerWrapper=t,"$destroy"===e||n||i.addEventListener(e,c)),r.push(o)};f--;)e=l[f],Xe[e]?(p(Xe[e],Lt),p(e,void 0,!0)):p(e)}},off:gt,one:function(t,n,r){(t=he(t)).on(n,function e(){t.off(n,r),t.off(n,e)}),t.on(n,r)},replaceWith:function(t,e){var n,r=t.parentNode;dt(t),ge(new pt(e),function(e){n?r.insertBefore(e,n.nextSibling):r.replaceChild(e,t),n=e})},children:function(e){var t=[];return ge(e.childNodes,function(e){e.nodeType===Ue&&t.push(e)}),t},contents:function(e){return e.contentDocument||e.childNodes||[]},append:function(e,t){var n=e.nodeType;if(n===Ue||n===Be)for(var r=0,i=(t=new pt(t)).length;r<i;r++){var o=t[r];e.appendChild(o)}},prepend:function(t,e){if(t.nodeType===Ue){var n=t.firstChild;ge(new pt(e),function(e){t.insertBefore(e,n)})}},wrap:function(e,t){var n,r,i;n=e,r=he(t).eq(0).clone()[0],(i=n.parentNode)&&i.replaceChild(r,n),r.appendChild(n)},remove:Ot,detach:function(e){Ot(e,!0)},after:function(e,t){var n=e,r=e.parentNode;if(r)for(var i=0,o=(t=new pt(t)).length;i<o;i++){var a=t[i];r.insertBefore(a,n.nextSibling),n=a}},addClass:St,removeClass:_t,toggleClass:function(n,e,r){e&&ge(e.split(" "),function(e){var t=r;_e(t)&&(t=!wt(n,e)),(t?St:_t)(n,e)})},parent:function(e){var t=e.parentNode;return t&&t.nodeType!==Be?t:null},next:function(e){return e.nextElementSibling},find:function(e,t){return e.getElementsByTagName?e.getElementsByTagName(t):[]},clone:ht,triggerHandler:function(t,e,n){var r,i,o,a=e.type||e,s=yt(t),u=s&&s.events,c=u&&u[a];c&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===this.defaultPrevented},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return!0===this.immediatePropagationStopped},stopPropagation:be,type:a,target:t},e.type&&(r=$e(r,e)),i=Ge(c),o=n?[r].concat(n):[r],ge(i,function(e){r.isImmediatePropagationStopped()||e.apply(t,o)}))}},function(a,e){pt.prototype[e]=function(e,t,n){for(var r,i=0,o=this.length;i<o;i++)_e(r)?T(r=a(this[i],e,t,n))&&(r=he(r)):xt(r,a(this[i],e,t,n));return T(r)?r:this}}),pt.prototype.bind=pt.prototype.on,pt.prototype.unbind=pt.prototype.off;var Dt=Object.create(null);function qt(){this._keys=[],this._values=[],this._lastKey=NaN,this._lastIndex=-1}qt.prototype={_idx:function(e){return e!==this._lastKey&&(this._lastKey=e,this._lastIndex=this._keys.indexOf(e)),this._lastIndex},_transformKey:function(e){return P(e)?Dt:e},get:function(e){e=this._transformKey(e);var t=this._idx(e);if(-1!==t)return this._values[t]},has:function(e){return e=this._transformKey(e),-1!==this._idx(e)},set:function(e,t){e=this._transformKey(e);var n=this._idx(e);-1===n&&(n=this._lastIndex=this._keys.length),this._keys[n]=e,this._values[n]=t},delete:function(e){e=this._transformKey(e);var t=this._idx(e);return-1!==t&&(this._keys.splice(t,1),this._values.splice(t,1),this._lastKey=NaN,this._lastIndex=-1,!0)}};var Ut=qt,Ft=[function(){this.$get=[function(){return Ut}]}],Ht=/^([^(]+?)=>/,zt=/^[^(]*\(\s*([^)]*)\)/m,Bt=/,/,Gt=/^\s*(_?)(\S+?)\1\s*$/,Wt=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Kt=O("$injector");function Jt(e){return Function.prototype.toString.call(e)}function Yt(e){var t=Jt(e).replace(Wt,"");return t.match(Ht)||t.match(zt)}function Qt(e,c){c=!0===c;var i={},a="Provider",s=[],o=new Ut,l={$provide:{provider:p(h),factory:p(d),service:p(function(e,t){return d(e,["$injector",function(e){return e.instantiate(t)}])}),value:p(function(e,t){return d(e,R(t),!1)}),constant:p(function(e,t){ue(e,"constant"),l[e]=t,n[e]=t}),decorator:function(e,t){var n=u.get(e+a),r=n.$get;n.$get=function(){var e=f.invoke(r,n);return f.invoke(t,null,{$delegate:e})}}}},u=l.$injector=v(l,function(e,t){throw y.isString(t)&&s.push(t),Kt("unpr","Unknown provider: {0}",s.join(" <- "))}),n={},t=v(n,function(e,t){var n=u.get(e+a,t);return f.invoke(n.$get,n,void 0,e)}),f=t;l["$injector"+a]={$get:R(t)},f.modules=u.modules=qe();var r=m(e);return(f=t.get("$injector")).strictDi=c,ge(r,function(e){e&&f.invoke(e)}),f.loadNewModules=function(e){ge(m(e),function(e){e&&f.invoke(e)})},f;function p(n){return function(e,t){if(!Se(e))return n(e,t);ge(e,j(n))}}function h(e,t){if(ue(e,"service"),(ke(t)||Ee(t))&&(t=u.instantiate(t)),!t.$get)throw Kt("pget","Provider '{0}' must define $get factory method.",e);return l[e+a]=t}function d(e,t,n){return h(e,{$get:!1!==n?(r=e,i=t,function(){var e=f.invoke(i,this);if(_e(e))throw Kt("undef","Provider '{0}' must return a value from $get factory method.",r);return e}):t});var r,i}function m(e){De(_e(e)||Ee(e),"modulesToLoad","not an array");var n,r=[];return ge(e,function(t){if(!o.get(t)){o.set(t,!0);try{xe(t)?(n=g(t),f.modules[t]=n,r=r.concat(m(n.requires)).concat(n._runBlocks),e(n._invokeQueue),e(n._configBlocks)):ke(t)?r.push(u.invoke(t)):Ee(t)?r.push(u.invoke(t)):se(t,"module")}catch(e){throw Ee(t)&&(t=t[t.length-1]),e.message&&e.stack&&-1===e.stack.indexOf(e.message)&&(e=e.message+"\n"+e.stack),Kt("modulerr","Failed to instantiate module {0} due to:\n{1}",t,e.stack||e.message||e)}}function e(e){var t,n;for(t=0,n=e.length;t<n;t++){var r=e[t],i=u.get(r[0]);i[r[1]].apply(i,r[2])}}}),r}function v(n,r){function u(t,e){if(n.hasOwnProperty(t)){if(n[t]===i)throw Kt("cdep","Circular dependency found: {0}",t+" <- "+s.join(" <- "));return n[t]}try{return s.unshift(t),n[t]=i,n[t]=r(t,e),n[t]}catch(e){throw n[t]===i&&delete n[t],e}finally{s.shift()}}function o(e,t,n){for(var r=[],i=Qt.$$annotate(e,c,n),o=0,a=i.length;o<a;o++){var s=i[o];if("string"!=typeof s)throw Kt("itkn","Incorrect injection token! Expected service name as string, got {0}",s);r.push(t&&t.hasOwnProperty(s)?t[s]:u(s,n))}return r}return{invoke:function(e,t,n,r){"string"==typeof n&&(r=n,n=null);var i=o(e,n,r);return Ee(e)&&(e=e[e.length-1]),function(e){if(pe||"function"!=typeof e)return!1;var t=e.$$ngIsClass;return je(t)||(t=e.$$ngIsClass=/^class\b/.test(Jt(e))),t}(e)?(i.unshift(null),new(Function.prototype.bind.apply(e,i))):e.apply(t,i)},instantiate:function(e,t,n){var r=Ee(e)?e[e.length-1]:e,i=o(e,t,n);return i.unshift(null),new(Function.prototype.bind.apply(r,i))},get:u,annotate:Qt.$$annotate,has:function(e){return l.hasOwnProperty(e+a)||n.hasOwnProperty(e)}}}}function Zt(){var e=!0;this.disableAutoScrolling=function(){e=!1},this.$get=["$window","$location","$rootScope",function(r,i,o){var a=r.document;function s(e){if(e){e.scrollIntoView();var t=function(){var e=u.yOffset;if(ke(e))e=e();else if(L(e)){var t=e[0];e="fixed"!==r.getComputedStyle(t).position?0:t.getBoundingClientRect().bottom}else S(e)||(e=0);return e}();if(t){var n=e.getBoundingClientRect().top;r.scrollBy(0,n-t)}}else r.scrollTo(0,0)}function u(e){var t,n,r;(e=xe(e)?e:S(e)?e.toString():i.hash())?(t=a.getElementById(e))?s(t):(n=a.getElementsByName(e),r=null,Array.prototype.some.call(n,function(e){if("a"===Re(e))return r=e,!0}),(t=r)?s(t):"top"===e&&s(null)):s(null)}return e&&o.$watch(function(){return i.hash()},function(e,t){var n,r;e===t&&""===e||(n=function(){o.$evalAsync(u)},"complete"===(r=r||fe).document.readyState?r.setTimeout(n):he(r).on("load",n))}),u}]}Qt.$$annotate=function(e,t,n){var r,i,o;if("function"==typeof e){if(!(r=e.$inject)){if(r=[],e.length){if(t)throw xe(n)&&n||(n=e.name||((o=Yt(e))?"function("+(o[1]||"").replace(/[\s\r\n]+/," ")+")":"fn")),Kt("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);ge(Yt(e)[1].split(Bt),function(e){e.replace(Gt,function(e,t,n){r.push(n)})})}e.$inject=r}}else Ee(e)?(se(e[i=e.length-1],"fn"),r=e.slice(0,i)):se(e,"fn",!0);return r};var Xt=O("$animate"),en=1,tn="ng-animate";function nn(e,t){return e||t?e?t?(Ee(e)&&(e=e.join(" ")),Ee(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function rn(e){return Se(e)?e:{}}var on=function(){this.$get=be},an=function(){var m=new Ut,v=[];this.$get=["$$AnimateRunner","$rootScope",function(f,p){return{enabled:be,on:be,off:be,pin:be,push:function(e,t,n,r){var i,o,a,s,u,c;r&&r(),(n=n||{}).from&&e.css(n.from),n.to&&e.css(n.to),(n.addClass||n.removeClass)&&(i=e,o=n.addClass,a=n.removeClass,s=m.get(i)||{},u=h(s,o,!0),c=h(s,a,!1),(u||c)&&(m.set(i,s),v.push(i),1===v.length&&p.$$postDigest(d)));var l=new f;return l.complete(),l}};function h(t,e,n){var r=!1;return e&&ge(e=xe(e)?e.split(" "):Ee(e)?e:[],function(e){e&&(r=!0,t[e]=n)}),r}function d(){ge(v,function(e){var t=m.get(e);if(t){var n=function(e){xe(e)&&(e=e.split(" "));var t=qe();return ge(e,function(e){e.length&&(t[e]=!0)}),t}(e.attr("class")),r="",i="";ge(t,function(e,t){e!==!!n[t]&&(e?r+=(r.length?" ":"")+t:i+=(i.length?" ":"")+t)}),ge(e,function(e){r&&St(e,r),i&&_t(e,i)}),m.delete(e)}}),v.length=0}}]},sn=["$provide",function(r){var i=this,t=null,n=null;this.$$registeredAnimations=Object.create(null),this.register=function(e,t){if(e&&"."!==e.charAt(0))throw Xt("notcsel","Expecting class selector starting with '.' got '{0}'.",e);var n=e+"-animation";i.$$registeredAnimations[e.substr(1)]=n,r.factory(n,t)},this.customFilter=function(e){return 1===arguments.length&&(n=ke(e)?e:null),n},this.classNameFilter=function(e){if(1===arguments.length&&((t=e instanceof RegExp?e:null)&&new RegExp("[(\\s|\\/)]"+tn+"[(\\s|\\/)]").test(t.toString())))throw t=null,Xt("nongcls",'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',tn);return t},this.$get=["$$animateQueue",function(o){function i(e,t,n){if(n){var r=function(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.nodeType===en)return n}}(n);!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(e):t.prepend(e)}return{on:o.on,off:o.off,pin:o.pin,enabled:o.enabled,cancel:function(e){e.cancel&&e.cancel()},enter:function(e,t,n,r){return t=t&&he(t),n=n&&he(n),i(e,t=t||n.parent(),n),o.push(e,"enter",rn(r))},move:function(e,t,n,r){return t=t&&he(t),n=n&&he(n),i(e,t=t||n.parent(),n),o.push(e,"move",rn(r))},leave:function(e,t){return o.push(e,"leave",rn(t),function(){e.remove()})},addClass:function(e,t,n){return(n=rn(n)).addClass=nn(n.addclass,t),o.push(e,"addClass",n)},removeClass:function(e,t,n){return(n=rn(n)).removeClass=nn(n.removeClass,t),o.push(e,"removeClass",n)},setClass:function(e,t,n,r){return(r=rn(r)).addClass=nn(r.addClass,t),r.removeClass=nn(r.removeClass,n),o.push(e,"setClass",r)},animate:function(e,t,n,r,i){return(i=rn(i)).from=i.from?$e(i.from,t):t,i.to=i.to?$e(i.to,n):n,r=r||"ng-inline-animate",i.tempClasses=nn(i.tempClasses,r),o.push(e,"animate",i)}}}]}],un=function(){this.$get=["$$rAF",function(t){var n=[];function r(e){n.push(e),1<n.length||t(function(){for(var e=0;e<n.length;e++)n[e]();n=[]})}return function(){var t=!1;return r(function(){t=!0}),function(e){t?e():r(e)}}}]},cn=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$$isDocumentHidden","$timeout",function(t,e,n,r,i){function o(e){this.setHost(e);var t=n();this._doneCallbacks=[],this._tick=function(e){r()?i(e,0,!1):t(e)},this._state=0}return o.chain=function(e,n){var r=0;!function t(){if(r===e.length)return void n(!0);e[r](function(e){!1!==e?(r++,t()):n(!1)})}()},o.all=function(t,n){var r=0,i=!0;function o(e){i=i&&e,++r===t.length&&n(i)}ge(t,function(e){e.done(o)})},o.prototype={setHost:function(e){this.host=e||{}},done:function(e){2===this._state?e():this._doneCallbacks.push(e)},progress:be,getPromise:function(){if(!this.promise){var e=this;this.promise=t(function(t,n){e.done(function(e){!1===e?n():t()})})}return this.promise},then:function(e,t){return this.getPromise().then(e,t)},catch:function(e){return this.getPromise().catch(e)},finally:function(e){return this.getPromise().finally(e)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(e){var t=this;0===t._state&&(t._state=1,t._tick(function(){t._resolve(e)}))},_resolve:function(t){2!==this._state&&(ge(this._doneCallbacks,function(e){e(t)}),this._doneCallbacks.length=0,this._state=2)}},o}]},ln=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(a,e,s){return function(e,t){var n=t||{};n.$$prepared||(n=I(n)),n.cleanupStyles&&(n.from=n.to=null),n.from&&(e.css(n.from),n.from=null);var r,i=new s;return{start:o,end:o};function o(){return a(function(){!function(){n.addClass&&(e.addClass(n.addClass),n.addClass=null);n.removeClass&&(e.removeClass(n.removeClass),n.removeClass=null);n.to&&(e.css(n.to),n.to=null)}(),r||i.complete(),r=!0}),i}}}]};function fn(s,e,t,u,n){var c=this,l=s.location,f=s.history,i=s.setTimeout,r=s.clearTimeout,o={},a=n(t);c.isMock=!1,c.$$completeOutstandingRequest=a.completeTask,c.$$incOutstandingRequestCount=a.incTaskCount,c.notifyWhenNoOutstandingRequests=a.notifyWhenNoPendingTasks;var p,h,d=l.href,m=e.find("base"),v=null,g=u.history?function(){try{return f.state}catch(e){}}:be;_(),c.url=function(e,t,n){if(_e(n)&&(n=null),l!==s.location&&(l=s.location),f!==s.history&&(f=s.history),e){var r=h===n;if(e=pi(e).href,d===e&&(!u.history||r))return c;var i=d&&cr(d)===cr(e);return d=e,h=n,!u.history||i&&r?(i||(v=e),t?l.replace(e):i?l.hash=-1===(a=(o=e).indexOf("#"))?"":o.substr(a):l.href=e,l.href!==e&&(v=e)):(f[t?"replaceState":"pushState"](n,"",e),_()),v&&(v=e),c}return(v||l.href).replace(/#$/,"");var o,a},c.state=function(){return p};var $=[],y=!1;function b(){v=null,S()}var w=null;function _(){Me(p=_e(p=g())?null:p,w)&&(p=w),h=w=p}function S(){var e=h;_(),d===c.url()&&e===p||(d=c.url(),h=p,ge($,function(e){e(c.url(),p)}))}c.onUrlChange=function(e){return y||(u.history&&he(s).on("popstate",b),he(s).on("hashchange",b),y=!0),$.push(e),e},c.$$applicationDestroyed=function(){he(s).off("hashchange popstate",b)},c.$$checkUrlChange=S,c.baseHref=function(){var e=m.attr("href");return e?e.replace(/^(https?:)?\/\/[^/]*/,""):""},c.defer=function(e,t,n){var r;return t=t||0,n=n||a.DEFAULT_TASK_TYPE,a.incTaskCount(n),r=i(function(){delete o[r],a.completeTask(e,n)},t),o[r]=n,r},c.defer.cancel=function(e){if(o.hasOwnProperty(e)){var t=o[e];return delete o[e],r(e),a.completeTask(be,t),!0}return!1}}function pn(){this.$get=["$window","$log","$sniffer","$document","$$taskTrackerFactory",function(e,t,n,r,i){return new fn(e,r,t,n,i)}]}function hn(){this.$get=function(){var f={};function e(e,t){if(e in f)throw O("$cacheFactory")("iid","CacheId '{0}' is already taken!",e);var n=0,r=$e({},t,{id:e}),i=qe(),o=t&&t.capacity||Number.MAX_VALUE,a=qe(),s=null,u=null;return f[e]={put:function(e,t){if(!_e(t)){if(o<Number.MAX_VALUE)c(a[e]||(a[e]={key:e}));return e in i||n++,i[e]=t,o<n&&this.remove(u.key),t}},get:function(e){if(o<Number.MAX_VALUE){var t=a[e];if(!t)return;c(t)}return i[e]},remove:function(e){if(o<Number.MAX_VALUE){var t=a[e];if(!t)return;t===s&&(s=t.p),t===u&&(u=t.n),l(t.n,t.p),delete a[e]}e in i&&(delete i[e],n--)},removeAll:function(){i=qe(),n=0,a=qe(),s=u=null},destroy:function(){a=r=i=null,delete f[e]},info:function(){return $e({},r,{size:n})}};function c(e){e!==s&&(u?u===e&&(u=e.n):u=e,l(e.n,e.p),l(e,s),(s=e).n=null)}function l(e,t){e!==t&&(e&&(e.p=t),t&&(t.n=e))}}return e.info=function(){var n={};return ge(f,function(e,t){n[t]=e.info()}),n},e.get=function(e){return f[e]},e}}function dn(){this.$get=["$cacheFactory",function(e){return e("templates")}]}var mn=O("$compile");var vn=new function(){};function gn(n,t){var d={},m="Directive",z=/^\s*directive:\s*([\w-]+)\s+(.*)$/,le=/(([\w-]+)(?::([^;]+))?;?)/,v=function(e){var t,n={},r=e.split(",");for(t=0;t<r.length;t++)n[r[t]]=!0;return n}("ngSrc,ngSrcset,src,srcset"),$=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,b=/^(on[a-z]+|formaction)$/,s=qe();function r(e,r,i){var o=/^([@&]|[=<](\*?))(\??)\s*([\w$]*)$/,a=qe();return ge(e,function(e,t){if((e=e.trim())in s)a[t]=s[e];else{var n=e.match(o);if(!n)throw mn("iscp","Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}",r,t,e,i?"controller bindings definition":"isolate scope definition");a[t]={mode:n[1][0],collection:"*"===n[2],optional:"?"===n[3],attrName:n[4]||t},n[4]&&(s[e]=a[t])}}),a}function w(e,t){var n={isolateScope:null,bindToController:null};if(Se(e.scope)&&(!0===e.bindToController?(n.bindToController=r(e.scope,t,!0),n.isolateScope={}):n.isolateScope=r(e.scope,t,!1)),Se(e.bindToController)&&(n.bindToController=r(e.bindToController,t,!0)),n.bindToController&&!e.controller)throw mn("noctrl","Cannot bind to controller without directive '{0}'s controller.",t);return n}this.directive=function e(u,t){return De(u,"name"),ue(u,"directive"),xe(u)?(!function(e){var t=e.charAt(0);if(!t||t!==me(t))throw mn("baddir","Directive/Component name '{0}' is invalid. The first character must be a lowercase letter",e);if(e!==e.trim())throw mn("baddir","Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces",e)}(u),De(t,"directiveFactory"),d.hasOwnProperty(u)||(d[u]=[],n.factory(u+m,["$injector","$exceptionHandler",function(o,a){var s=[];return ge(d[u],function(e,t){try{var n=o.invoke(e);ke(n)?n={compile:R(n)}:!n.compile&&n.link&&(n.compile=R(n.link)),n.priority=n.priority||0,n.index=t,n.name=n.name||u,n.require=(!Ee(i=(r=n).require||r.controller&&r.name)&&Se(i)&&ge(i,function(e,t){var n=e.match($);e.substring(n[0].length)||(i[t]=n[0]+t)}),i),n.restrict=function(e,t){if(e&&(!xe(e)||!/[EACM]/.test(e)))throw mn("badrestrict","Restrict property '{0}' of directive '{1}' is invalid",e,t);return e||"EA"}(n.restrict,u),n.$$moduleName=e.$$moduleName,s.push(n)}catch(e){a(e)}var r,i}),s}])),d[u].push(t)):ge(u,j(e)),this},this.component=function e(t,i){if(!xe(t))return ge(t,j(Le(this,e))),this;var o=i.controller||function(){};function n(r){function e(n){return ke(n)||Ee(n)?function(e,t){return r.invoke(n,this,{$element:e,$attrs:t})}:n}var t=i.template||i.templateUrl?i.template:"",n={controller:o,controllerAs:function(e,t){if(t&&xe(t))return t;if(xe(e)){var n=En.exec(e);if(n)return n[3]}}(i.controller)||i.controllerAs||"$ctrl",template:e(t),templateUrl:e(i.templateUrl),transclude:i.transclude,scope:{},bindToController:i.bindings||{},restrict:"E",require:i.require};return ge(i,function(e,t){"$"===t.charAt(0)&&(n[t]=e)}),n}return ge(i,function(e,t){"$"===t.charAt(0)&&(n[t]=e,ke(o)&&(o[t]=e))}),n.$inject=["$injector"],this.directive(t,n)},this.aHrefSanitizationWhitelist=function(e){return T(e)?(t.aHrefSanitizationWhitelist(e),this):t.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(e){return T(e)?(t.imgSrcSanitizationWhitelist(e),this):t.imgSrcSanitizationWhitelist()};var _=!0,S=!(this.debugInfoEnabled=function(e){return T(e)?(_=e,this):_});this.strictComponentBindingsEnabled=function(e){return T(e)?(S=e,this):S};var x=10;this.onChangesTtl=function(e){return arguments.length?(x=e,this):x};var E=!0;this.commentDirectivesEnabled=function(e){return arguments.length?(E=e,this):E};var C=!0;this.cssClassDirectivesEnabled=function(e){return arguments.length?(C=e,this):C};var k=qe();this.addPropertySecurityContext=function(e,t,n){var r=e.toLowerCase()+"|"+t.toLowerCase();if(r in k&&k[r]!==n)throw mn("ctxoverride","Property context '{0}.{1}' already set to '{2}', cannot override to '{3}'.",e,t,k[r],n);return k[r]=n,this},function(){function e(t,e){ge(e,function(e){k[e.toLowerCase()]=t})}e(Kr.HTML,["iframe|srcdoc","*|innerHTML","*|outerHTML"]),e(Kr.CSS,["*|style"]),e(Kr.URL,["area|href","area|ping","a|href","a|ping","blockquote|cite","body|background","del|cite","input|src","ins|cite","q|cite"]),e(Kr.MEDIA_URL,["audio|src","img|src","img|srcset","source|src","source|srcset","track|src","video|src","video|poster"]),e(Kr.RESOURCE_URL,["*|formAction","applet|code","applet|codebase","base|href","embed|src","frame|src","form|action","head|profile","html|manifest","iframe|src","link|href","media|src","object|codebase","object|data","script|src"])}(),this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate",function(h,j,B,e,P,G,R,p,i){var o,u=/^\w/,c=fe.document.createElement("div"),T=E,A=C,t=x;function a(){try{if(!--t)throw o=void 0,mn("infchng","{0} $onChanges() iterations reached. Aborting!\n",x);R.$apply(function(){for(var e=0,t=o.length;e<t;++e)try{o[e]()}catch(e){B(e)}o=void 0})}finally{t++}}function l(e,t){if(!e)return e;if(!xe(e))throw mn("srcset",'Can\'t pass trusted values to `{0}`: "{1}"',t,e.toString());for(var n="",r=Pe(e),i=/\s/.test(r)?/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/:/(,)/,o=r.split(i),a=Math.floor(o.length/2),s=0;s<a;s++){var u=2*s;n+=p.getTrustedMediaUrl(Pe(o[u])),n+=" "+Pe(o[u+1])}var c=Pe(o[2*s]).split(/\s/);return n+=p.getTrustedMediaUrl(Pe(c[0])),2===c.length&&(n+=" "+Pe(c[1])),n}function W(e,t){if(t){var n,r,i,o=Object.keys(t);for(n=0,r=o.length;n<r;n++)this[i=o[n]]=t[i]}else this.$attr={};this.$$element=e}function O(e,t){try{e.addClass(t)}catch(e){}}W.prototype={$normalize:wn,$addClass:function(e){e&&0<e.length&&i.addClass(this.$$element,e)},$removeClass:function(e){e&&0<e.length&&i.removeClass(this.$$element,e)},$updateClass:function(e,t){var n=_n(e,t);n&&n.length&&i.addClass(this.$$element,n);var r=_n(t,e);r&&r.length&&i.removeClass(this.$$element,r)},$set:function(e,t,n,r){var i=Mt(this.$$element[0],e),o=At[e],a=e;i?(this.$$element.prop(e,t),r=i):o&&(this[o]=t,a=o),this[e]=t,r?this.$attr[e]=r:(r=this.$attr[e])||(this.$attr[e]=r=Ie(e,"-")),"img"===Re(this.$$element)&&"srcset"===e&&(this[e]=t=l(t,"$set('srcset', value)")),!1!==n&&(null===t||_e(t)?this.$$element.removeAttr(r):u.test(r)?i&&!1===t?this.$$element.removeAttr(r):this.$$element.attr(r,t):function(e,t,n){c.innerHTML="<span "+t+">";var r=c.firstChild.attributes,i=r[0];r.removeNamedItem(i.name),i.value=n,e.attributes.setNamedItem(i)}(this.$$element[0],r,t));var s=this.$$observers;s&&ge(s[a],function(e){try{e(t)}catch(e){B(e)}})},$observe:function(e,t){var n=this,r=n.$$observers||(n.$$observers=qe()),i=r[e]||(r[e]=[]);return i.push(t),R.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(e)||_e(n[e])||t(n[e])}),function(){Te(i,t)}}};var n=j.startSymbol(),r=j.endSymbol(),K="{{"===n&&"}}"===r?we:function(e){return e.replace(/\{\{/g,n).replace(/}}/g,r)},M=/^ng(Attr|Prop|On)([A-Z].*)$/,N=/^(.+)Start$/;return J.$$addBindingInfo=_?function(e,t){var n=e.data("$binding")||[];Ee(t)?n=n.concat(t):n.push(t),e.data("$binding",n)}:be,J.$$addBindingClass=_?function(e){O(e,"ng-binding")}:be,J.$$addScopeInfo=_?function(e,t,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";e.data(i,t)}:be,J.$$addScopeClass=_?function(e,t){O(e,t?"ng-isolate-scope":"ng-scope")}:be,J.$$createComment=function(e,t){var n="";return _&&(n=" "+(e||"")+": ",t&&(n+=t+" ")),fe.document.createComment(n)},J;function J(l,e,t,n,f){l instanceof he||(l=he(l));var p=L(l,e,l,t,n,f);J.$$addScopeClass(l);var h=null;return function(e,t,n){if(!l)throw mn("multilink","This element has already been linked.");De(e,"scope"),f&&f.needsNewScope&&(e=e.$parent.$new());var r,i,o,a=(n=n||{}).parentBoundTranscludeFn,s=n.transcludeControllers,u=n.futureParentElement;if(a&&a.$$boundTransclude&&(a=a.$$boundTransclude),h||(i=(r=u)&&r[0],h=i&&"foreignobject"!==Re(i)&&ve.call(i).match(/SVG/)?"svg":"html"),o="html"!==h?he(oe(h,he("<div></div>").append(l).html())):t?Pt.clone.call(l):l,s)for(var c in s)o.data("$"+c+"Controller",s[c].instance);return J.$$addScopeInfo(o,e),t&&t(o,e),p&&p(e,o,o,a),t||(l=p=null),o}}function L(e,d,t,n,r,i){for(var o,a,s,u,c,l,m,v=[],f=Ee(e)||e instanceof he,p=0;p<e.length;p++)o=new W,11===pe&&g(e,p,f),(s=(a=Y(e[p],[],o,0===p?n:void 0,r)).length?I(a,e[p],o,d,t,null,[],[],i):null)&&s.scope&&J.$$addScopeClass(o.$$element),c=s&&s.terminal||!(u=e[p].childNodes)||!u.length?null:L(u,s?(s.transcludeOnThisElement||!s.templateOnThisElement)&&s.transclude:d),(s||c)&&(v.push(p,s,c),l=!0,m=m||s),i=null;return l?function(e,t,n,r){var i,o,a,s,u,c,l,f,p;if(m){var h=t.length;for(p=new Array(h),u=0;u<v.length;u+=3)l=v[u],p[l]=t[l]}else p=t;for(u=0,c=v.length;u<c;)a=p[v[u++]],i=v[u++],o=v[u++],i?(i.scope?(s=e.$new(),J.$$addScopeInfo(he(a),s)):s=e,f=i.transcludeOnThisElement?V(e,i.transclude,r):!i.templateOnThisElement&&r?r:!r&&d?V(e,d):null,i(o,s,a,n,f)):o&&o(e,a.childNodes,void 0,r)}:null}function g(e,t,n){var r,i=e[t],o=i.parentNode;if(i.nodeType===Fe)for(;(r=o?i.nextSibling:e[t+1])&&r.nodeType===Fe;)i.nodeValue=i.nodeValue+r.nodeValue,r.parentNode&&r.parentNode.removeChild(r),n&&r===e[t+1]&&e.splice(t+1,1)}function V(o,a,s){function e(e,t,n,r,i){return e||((e=o.$new(!1,i)).$$transcluded=!0),a(e,t,{parentBoundTranscludeFn:s,transcludeControllers:n,futureParentElement:r})}var t=e.$$slots=qe();for(var n in a.$$slots)a.$$slots[n]?t[n]=V(o,a.$$slots[n],s):t[n]=null;return e}function Y(e,t,n,r,i){var o,a,s,u,c,l,f,p,h=e.nodeType,d=n.$attr;switch(h){case Ue:D(t,wn(a=Re(e)),"E",r,i);for(var m,v,g,$,y,b=e.attributes,w=0,_=b&&b.length;w<_;w++){var S,x=!1,E=!1,C=!1,k=!1,O=!1;v=(m=b[w]).name,$=m.value,(y=(g=wn(v.toLowerCase())).match(M))?(C="Attr"===y[1],k="Prop"===y[1],O="On"===y[1],v=v.replace(yn,"").toLowerCase().substr(4+y[1].length).replace(/_(.)/g,function(e,t){return t.toUpperCase()})):(S=g.match(N))&&q(S[1])&&(E=(x=v).substr(0,v.length-5)+"end",v=v.substr(0,v.length-6)),k||O?(n[g]=$,d[g]=m.name,k?F(e,t,g,v):(f=g,p=v,t.push(Fo(P,R,B,f,p,!1)))):(d[g=wn(v.toLowerCase())]=v,!C&&n.hasOwnProperty(g)||(n[g]=$,Mt(e,g)&&(n[g]=!0)),H(e,t,$,g,C),D(t,g,"A",r,i,x,E))}if("input"===a&&"hidden"===e.getAttribute("type")&&e.setAttribute("autocomplete","off"),!A)break;if(Se(s=e.className)&&(s=s.animVal),xe(s)&&""!==s)for(;o=le.exec(s);)D(t,g=wn(o[2]),"C",r,i)&&(n[g]=Pe(o[3])),s=s.substr(o.index+o[0].length);break;case Fe:u=t,c=e.nodeValue,(l=j(c,!0))&&u.push({priority:0,compile:function(e){var t=e.parent(),r=!!t.length;return r&&J.$$addBindingClass(t),function(e,t){var n=t.parent();r||J.$$addBindingClass(n),J.$$addBindingInfo(n,l.expressions),e.$watch(l,function(e){t[0].nodeValue=e})}}});break;case He:if(!T)break;!function(e,t,n,r,i){try{var o=z.exec(e.nodeValue);if(o){var a=wn(o[1]);D(t,a,"M",r,i)&&(n[a]=Pe(o[2]))}}catch(e){}}(e,t,n,r,i)}return t.sort(U),t}function Q(e,t,n){var r=[],i=0;if(t&&e.hasAttribute&&e.hasAttribute(t))do{if(!e)throw mn("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",t,n);e.nodeType===Ue&&(e.hasAttribute(t)&&i++,e.hasAttribute(n)&&i--),r.push(e),e=e.nextSibling}while(0<i);else r.push(e);return he(r)}function Z(o,a,s){return function(e,t,n,r,i){return t=Q(t[0],a,s),o(e,t,n,r,i)}}function X(e,t,n,r,i,o){var a;return e?J(t,n,r,i,o):function(){return a||(a=J(t,n,r,i,o),t=n=o=null),a.apply(this,arguments)}}function I(e,b,w,t,n,r,_,S,i){i=i||{};for(var o,a,s,u,c,l=-Number.MAX_VALUE,x=i.newScopeDirective,E=i.controllerDirectives,C=i.newIsolateScopeDirective,k=i.templateDirective,f=i.nonTlbTranscludeDirective,p=!1,h=!1,O=i.hasElementTranscludeDirective,d=w.$$element=he(b),m=r,v=t,g=!1,$=!1,y=0,j=e.length;y<j;y++){var P=(o=e[y]).$$start,R=o.$$end;if(P&&(d=Q(b,P,R)),s=void 0,l>o.priority)break;if((c=o.scope)&&(o.templateUrl||(Se(c)?(ie("new/isolated scope",C||x,o,d),C=o):ie("new/isolated scope",C,o,d)),x=x||o),a=o.name,!g&&(o.replace&&(o.templateUrl||o.template)||o.transclude&&!o.$$tlb)){for(var T,A=y+1;T=e[A++];)if(T.transclude&&!T.$$tlb||T.replace&&(T.templateUrl||T.template)){$=!0;break}g=!0}if(!o.templateUrl&&o.controller&&(E=E||qe(),ie("'"+a+"' controller",E[a],o,d),E[a]=o),c=o.transclude)if(p=!0,o.$$tlb||(ie("transclusion",f,o,d),f=o),"element"===c)O=!0,l=o.priority,s=d,d=w.$$element=he(J.$$createComment(a,w[a])),b=d[0],ae(n,Ne(s),b),v=X($,s,t,l,m&&m.name,{nonTlbTranscludeDirective:f});else{var M=qe();if(Se(c)){s=fe.document.createDocumentFragment();var N=qe(),L=qe();for(var V in ge(c,function(e,t){var n="?"===e.charAt(0);e=n?e.substring(1):e,N[e]=t,M[t]=null,L[t]=n}),ge(d.contents(),function(e){var t=N[wn(Re(e))];t?(L[t]=!0,M[t]=M[t]||fe.document.createDocumentFragment(),M[t].appendChild(e)):s.appendChild(e)}),ge(L,function(e,t){if(!e)throw mn("reqslot","Required transclusion slot `{0}` was not filled.",t)}),M)if(M[V]){var I=he(M[V].childNodes);M[V]=X($,I,t)}s=he(s.childNodes)}else s=he(ht(b)).contents();d.empty(),(v=X($,s,t,void 0,void 0,{needsNewScope:o.$$isolateScope||o.$$newScope})).$$slots=M}if(o.template)if(h=!0,ie("template",k,o,d),c=ke((k=o).template)?o.template(d,w):o.template,c=K(c),o.replace){if(m=o,s=ut(c)?[]:Sn(oe(o.templateNamespace,Pe(c))),b=s[0],1!==s.length||b.nodeType!==Ue)throw mn("tplrt","Template for directive '{0}' must have exactly one root element. {1}",a,"");ae(n,d,b);var D={$attr:{}},q=Y(b,[],D),U=e.splice(y+1,e.length-(y+1));(C||x)&&te(q,C,x),e=e.concat(q).concat(U),ne(w,D),j=e.length}else d.html(c);if(o.templateUrl)h=!0,ie("template",k,o,d),(k=o).replace&&(m=o),z=re(e.splice(y,e.length-y),d,w,n,p&&v,_,S,{controllerDirectives:E,newScopeDirective:x!==o&&x,newIsolateScopeDirective:C,templateDirective:k,nonTlbTranscludeDirective:f}),j=e.length;else if(o.compile)try{u=o.compile(d,w,v);var F=o.$$originalDirective||o;ke(u)?H(null,Le(F,u),P,R):u&&H(Le(F,u.pre),Le(F,u.post),P,R)}catch(e){B(e,Ve(d))}o.terminal&&(z.terminal=!0,l=Math.max(l,o.priority))}return z.scope=x&&!0===x.scope,z.transcludeOnThisElement=p,z.templateOnThisElement=h,z.transclude=v,i.hasElementTranscludeDirective=O,z;function H(e,t,n,r){e&&(n&&(e=Z(e,n,r)),e.require=o.require,e.directiveName=a,(C===o||o.$$isolateScope)&&(e=se(e,{isolateScope:!0})),_.push(e)),t&&(n&&(t=Z(t,n,r)),t.require=o.require,t.directiveName=a,(C===o||o.$$isolateScope)&&(t=se(t,{isolateScope:!0})),S.push(t))}function z(e,t,n,r,a){var i,o,s,u,c,l,f,p,h,d;for(var m in b===n?p=(h=w).$$element:h=new W(p=he(n),w),c=t,C?u=t.$new(!0):x&&(c=t.$parent),a&&((f=function(e,t,n,r){var i;Oe(e)||(r=n,n=t,t=e,e=void 0);O&&(i=l);n||(n=O?p.parent():p);{if(!r)return a(e,t,i,n,y);var o=a.$$slots[r];if(o)return o(e,t,i,n,y);if(_e(o))throw mn("noslot",'No parent directive that requires a transclusion with slot name "{0}". Element: {1}',r,Ve(p))}}).$$boundTransclude=a,f.isSlotFilled=function(e){return!!a.$$slots[e]}),E&&(l=function(e,t,n,r,i,o,a){var s=qe();for(var u in r){var c=r[u],l={$scope:c===a||c.$$isolateScope?i:o,$element:e,$attrs:t,$transclude:n},f=c.controller;"@"===f&&(f=t[c.name]);var p=G(f,l,!0,c.controllerAs);s[c.name]=p,e.data("$"+c.name+"Controller",p.instance)}return s}(p,h,f,E,u,t,C)),C&&(J.$$addScopeInfo(p,u,!0,!(k&&(k===C||k===C.$$originalDirective))),J.$$addScopeClass(p,!0),u.$$isolateBindings=C.$$isolateBindings,(d=ce(t,h,u,u.$$isolateBindings,C)).removeWatches&&u.$on("$destroy",d.removeWatches)),l){var v=E[m],g=l[m],$=v.$$bindings.bindToController;g.instance=g(),p.data("$"+v.name+"Controller",g.instance),g.bindingInfo=ce(c,h,g.instance,$,v)}for(ge(E,function(e,t){var n=e.require;e.bindToController&&!Ee(n)&&Se(n)&&$e(l[t].instance,ee(t,n,p,l))}),ge(l,function(e){var t=e.instance;if(ke(t.$onChanges))try{t.$onChanges(e.bindingInfo.initialChanges)}catch(e){B(e)}if(ke(t.$onInit))try{t.$onInit()}catch(e){B(e)}ke(t.$doCheck)&&(c.$watch(function(){t.$doCheck()}),t.$doCheck()),ke(t.$onDestroy)&&c.$on("$destroy",function(){t.$onDestroy()})}),i=0,o=_.length;i<o;i++)ue(s=_[i],s.isolateScope?u:t,p,h,s.require&&ee(s.directiveName,s.require,p,l),f);var y=t;for(C&&(C.template||null===C.templateUrl)&&(y=u),e&&e(y,n.childNodes,void 0,a),i=S.length-1;0<=i;i--)ue(s=S[i],s.isolateScope?u:t,p,h,s.require&&ee(s.directiveName,s.require,p,l),f);ge(l,function(e){var t=e.instance;ke(t.$postLink)&&t.$postLink()})}}function ee(n,e,r,i){var o;if(xe(e)){var t=e.match($),a=e.substring(t[0].length),s=t[1]||t[3],u="?"===t[2];if("^^"===s?r=r.parent():o=(o=i&&i[a])&&o.instance,!o){var c="$"+a+"Controller";o="^^"===s&&r[0]&&r[0].nodeType===ze?null:s?r.inheritedData(c):r.data(c)}if(!o&&!u)throw mn("ctreq","Controller '{0}', required by directive '{1}', can't be found!",a,n)}else if(Ee(e)){o=[];for(var l=0,f=e.length;l<f;l++)o[l]=ee(n,e[l],r,i)}else Se(e)&&(o={},ge(e,function(e,t){o[t]=ee(n,e,r,i)}));return o||null}function te(e,t,n){for(var r=0,i=e.length;r<i;r++)e[r]=ye(e[r],{$$isolateScope:t,$$newScope:n})}function D(e,t,n,r,i,o,a){if(t===i)return null;var s=null;if(d.hasOwnProperty(t))for(var u,c=h.get(t+m),l=0,f=c.length;l<f;l++)if(u=c[l],(_e(r)||r>u.priority)&&-1!==u.restrict.indexOf(n)){if(o&&(u=ye(u,{$$start:o,$$end:a})),!u.$$bindings){var p=u.$$bindings=w(u,u.name);Se(p.isolateScope)&&(u.$$isolateBindings=p.isolateScope)}e.push(u),s=u}return s}function q(e){if(d.hasOwnProperty(e))for(var t=h.get(e+m),n=0,r=t.length;n<r;n++)if(t[n].multiElement)return!0;return!1}function ne(n,r){var i=r.$attr,o=n.$attr;ge(n,function(e,t){"$"!==t.charAt(0)&&(r[t]&&r[t]!==e&&(e.length?e+=("style"===t?";":" ")+r[t]:e=r[t]),n.$set(t,e,!0,i[t]))}),ge(r,function(e,t){n.hasOwnProperty(t)||"$"===t.charAt(0)||(n[t]=e,"class"!==t&&"style"!==t&&(o[t]=i[t]))})}function re(p,h,d,m,v,g,$,y){var b,w,_=[],S=h[0],x=p.shift(),E=ye(x,{templateUrl:null,transclude:null,replace:null,$$originalDirective:x}),C=ke(x.templateUrl)?x.templateUrl(h,d):x.templateUrl,k=x.templateNamespace;return h.empty(),e(C).then(function(e){var n,t,r,i;if(e=K(e),x.replace){if(r=ut(e)?[]:Sn(oe(k,Pe(e))),n=r[0],1!==r.length||n.nodeType!==Ue)throw mn("tplrt","Template for directive '{0}' must have exactly one root element. {1}",x.name,C);t={$attr:{}},ae(m,h,n);var o=Y(n,[],t);Se(x.scope)&&te(o,!0),p=o.concat(p),ne(d,t)}else n=S,h.html(e);for(p.unshift(E),b=I(p,n,d,v,h,x,g,$,y),ge(m,function(e,t){e===n&&(m[t]=h[0])}),w=L(h[0].childNodes,v);_.length;){var a=_.shift(),s=_.shift(),u=_.shift(),c=_.shift(),l=h[0];if(!a.$$destroyed){if(s!==S){var f=s.className;y.hasElementTranscludeDirective&&x.replace||(l=ht(n)),ae(u,he(s),l),O(he(l),f)}i=b.transcludeOnThisElement?V(a,b.transclude,c):c,b(w,a,l,m,i)}}_=null}).catch(function(e){Ce(e)&&B(e)}),function(e,t,n,r,i){var o=i;t.$$destroyed||(_?_.push(t,n,r,o):(b.transcludeOnThisElement&&(o=V(t,b.transclude,i)),b(w,t,n,r,o)))}}function U(e,t){var n=t.priority-e.priority;return 0!==n?n:e.name!==t.name?e.name<t.name?-1:1:e.index-t.index}function ie(e,t,n,r){function i(e){return e?" (module: "+e+")":""}if(t)throw mn("multidir","Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}",t.name,i(t.$$moduleName),n.name,i(n.$$moduleName),e,Ve(r))}function oe(e,t){switch(e=me(e||"html")){case"svg":case"math":var n=fe.document.createElement("div");return n.innerHTML="<"+e+">"+t+"</"+e+">",n.childNodes[0].childNodes;default:return t}}function f(e){return l(p.valueOf(e),"ng-prop-srcset")}function F(e,t,n,o){if(b.test(o))throw mn("nodomevents","Property bindings for HTML DOM event properties are disallowed");var r,i,a=Re(e),s=(r=a,i=o.toLowerCase(),k[r+"|"+i]||k["*|"+i]),u=we;"srcset"!==o||"img"!==a&&"source"!==a?s&&(u=p.getTrusted.bind(p,s)):u=f,t.push({priority:100,compile:function(e,t){var r=P(t[n]),i=P(t[n],function(e){return p.valueOf(e)});return{pre:function(t,n){function e(){var e=r(t);n[0][o]=u(e)}e(),t.$watch(i,e)}}}})}function H(e,t,o,a,n){var r,i,s=Re(e),u=(r=s,"srcdoc"===(i=a)?p.HTML:"src"===i||"ngSrc"===i?-1===["img","video","audio","source","track"].indexOf(r)?p.RESOURCE_URL:p.MEDIA_URL:"xlinkHref"===i?"image"===r?p.MEDIA_URL:"a"===r?p.URL:p.RESOURCE_URL:"form"===r&&"action"===i||"base"===r&&"href"===i||"link"===r&&"href"===i?p.RESOURCE_URL:"a"!==r||"href"!==i&&"ngHref"!==i?void 0:p.URL),c=!n,l=v[a]||n,f=j(o,c,u,l);if(f){if("multiple"===a&&"select"===s)throw mn("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",Ve(e));if(b.test(a))throw mn("nodomevents","Interpolations for HTML DOM event attributes are disallowed");t.push({priority:100,compile:function(){return{pre:function(e,t,n){var r=n.$$observers||(n.$$observers=qe()),i=n[a];i!==o&&(f=i&&j(i,!0,u,l),o=i),f&&(n[a]=f(e),(r[a]||(r[a]=[])).$$inter=!0,(n.$$observers&&n.$$observers[a].$$scope||e).$watch(f,function(e,t){"class"===a&&e!==t?n.$updateClass(e,t):n.$set(a,e)}))}}}})}}function ae(e,t,n){var r,i,o=t[0],a=t.length,s=o.parentNode;if(e)for(r=0,i=e.length;r<i;r++)if(e[r]===o){e[r++]=n;for(var u=r,c=u+a-1,l=e.length;u<l;u++,c++)c<l?e[u]=e[c]:delete e[u];e.length-=a-1,e.context===o&&(e.context=n);break}s&&s.replaceChild(n,o);var f=fe.document.createDocumentFragment();for(r=0;r<a;r++)f.appendChild(t[r]);for(he.hasData(o)&&(he.data(n,he.data(o)),he(o).off("$destroy")),he.cleanData(f.querySelectorAll("*")),r=1;r<a;r++)delete t[r];t[0]=n,t.length=1}function se(e,t){return $e(function(){return e.apply(null,arguments)},e,t)}function ue(e,t,n,r,i,o){try{e(t,n,r,i,o)}catch(e){B(e,Ve(n))}}function y(e,t){if(S)throw mn("missingattr","Attribute '{0}' of '{1}' is non-optional and must be set!",e,t)}function ce(p,h,d,e,m){var r,v=[],g={};function $(e,t,n){ke(d.$onChanges)&&!Ae(t,n)&&(o||(p.$$postDigest(a),o=[]),r||(r={},o.push(i)),r[e]&&(n=r[e].previousValue),r[e]=new $n(n,t))}function i(){d.$onChanges(r),r=void 0}return ge(e,function(e,n){var t,r,i,o,a,s=e.attrName,u=e.optional;switch(e.mode){case"@":u||de.call(h,s)||(y(s,m.name),d[n]=h[s]=void 0),a=h.$observe(s,function(e){if(xe(e)||je(e)){var t=d[n];$(n,e,t),d[n]=e}}),h.$$observers[s].$$scope=p,xe(t=h[s])?d[n]=j(t)(p):je(t)&&(d[n]=t),g[n]=new $n(vn,d[n]),v.push(a);break;case"=":if(!de.call(h,s)){if(u)break;y(s,m.name),h[s]=void 0}if(u&&!h[s])break;r=P(h[s]),o=r.literal?Me:Ae,i=r.assign||function(){throw t=d[n]=r(p),mn("nonassign","Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!",h[s],s,m.name)},t=d[n]=r(p);var c=function(e){return o(e,d[n])||(o(e,t)?i(p,e=d[n]):d[n]=e),t=e};c.$stateful=!0,a=e.collection?p.$watchCollection(h[s],c):p.$watch(P(h[s],c),null,r.literal),v.push(a);break;case"<":if(!de.call(h,s)){if(u)break;y(s,m.name),h[s]=void 0}if(u&&!h[s])break;var l=(r=P(h[s])).literal,f=d[n]=r(p);g[n]=new $n(vn,d[n]),a=p[e.collection?"$watchCollection":"$watch"](r,function(e,t){if(t===e){if(t===f||l&&Me(t,f))return;t=f}$(n,e,t),d[n]=e}),v.push(a);break;case"&":if(u||de.call(h,s)||y(s,m.name),(r=h.hasOwnProperty(s)?P(h[s]):be)===be&&u)break;d[n]=function(e){return r(p,e)}}}),{initialChanges:g,removeWatches:v.length&&function(){for(var e=0,t=v.length;e<t;++e)v[e]()}}}}]}function $n(e,t){this.previousValue=e,this.currentValue=t}gn.$inject=["$provide","$$sanitizeUriProvider"],$n.prototype.isFirstChange=function(){return this.previousValue===vn};var yn=/^((?:x|data)[:\-_])/i,bn=/[:\-_]+(.)/g;function wn(e){return e.replace(yn,"").replace(bn,function(e,t,n){return n?t.toUpperCase():t})}function _n(e,t){var n="",r=e.split(/\s+/),i=t.split(/\s+/);e:for(var o=0;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a===i[s])continue e;n+=(0<n.length?" ":"")+a}return n}function Sn(e){var t=(e=he(e)).length;if(t<=1)return e;for(;t--;){var n=e[t];(n.nodeType===He||n.nodeType===Fe&&""===n.nodeValue.trim())&&r.call(e,t,1)}return e}var xn=O("$controller"),En=/^(\S+)(\s+as\s+([\w$]+))?$/;function Cn(){var f={};this.has=function(e){return f.hasOwnProperty(e)},this.register=function(e,t){ue(e,"controller"),Se(e)?$e(f,e):f[e]=t},this.$get=["$injector",function(c){return function(t,n,e,r){var i,o,a,s;if(e=!0===e,r&&xe(r)&&(s=r),xe(t)){if(!(o=t.match(En)))throw xn("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",t);if(a=o[1],s=s||o[3],!(t=f.hasOwnProperty(a)?f[a]:function(e,t,n){if(!t)return e;for(var r,i=t.split("."),o=e,a=i.length,s=0;s<a;s++)r=i[s],e&&(e=(o=e)[r]);return!n&&ke(e)?Le(o,e):e}(n.$scope,a,!0)))throw xn("ctrlreg","The controller with the name '{0}' is not registered.",a);se(t,a,!0)}if(e){var u=(Ee(t)?t[t.length-1]:t).prototype;return i=Object.create(u||null),s&&l(n,s,i,a||t.name),$e(function(){var e=c.invoke(t,i,n,a);return e!==i&&(Se(e)||ke(e))&&(i=e,s&&l(n,s,i,a||t.name)),i},{instance:i,identifier:s})}return i=c.instantiate(t,n,a),s&&l(n,s,i,a||t.name),i};function l(e,t,n,r){if(!e||!Se(e.$scope))throw O("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",r,t);e.$scope[t]=n}}]}function kn(){this.$get=["$window",function(e){return he(e.document)}]}function On(){this.$get=["$document","$rootScope",function(e,t){var n=e[0],r=n&&n.hidden;function i(){r=n.hidden}return e.on("visibilitychange",i),t.$on("$destroy",function(){e.off("visibilitychange",i)}),function(){return r}}]}function jn(){this.$get=["$log",function(n){return function(e,t){n.error.apply(n,arguments)}}]}var Pn=function(){this.$get=["$document",function(t){return function(e){return e?!e.nodeType&&e instanceof he&&(e=e[0]):e=t[0].body,e.offsetWidth+1}}]},Rn="application/json",Tn={"Content-Type":Rn+";charset=utf-8"},An=/^\[|^\{(?!\{)/,Mn={"[":/]$/,"{":/}$/},Nn=/^\)]\}',?\n/,Ln=O("$http");function Vn(e){return Se(e)?x(e)?e.toISOString():H(e):e}function In(){this.$get=function(){return function(e){if(!e)return"";var n=[];return s(e,function(e,t){null===e||_e(e)||ke(e)||(Ee(e)?ge(e,function(e){n.push(Z(t)+"="+Z(Vn(e)))}):n.push(Z(t)+"="+Z(Vn(e))))}),n.join("&")}}}function Dn(){this.$get=function(){return function(e){if(!e)return"";var t=[];return function n(e,r,i){Ee(e)?ge(e,function(e,t){n(e,r+"["+(Se(e)?t:"")+"]")}):Se(e)&&!x(e)?s(e,function(e,t){n(e,r+(i?"":"[")+t+(i?"":"]"))}):(ke(e)&&(e=e()),t.push(Z(r)+"="+(null==e?"":Z(Vn(e)))))}(e,"",!0),t.join("&")}}}function qn(t,e){if(xe(t)){var n=t.replace(Nn,"").trim();if(n){var r=e("Content-Type"),i=r&&0===r.indexOf(Rn);if(i||(a=(o=n).match(An))&&Mn[a[0]].test(o))try{t=z(n)}catch(e){if(!i)return t;throw Ln("baddata",'Data must be a valid JSON object. Received: "{0}". Parse error: "{1}"',t,e)}}}var o,a;return t}function Un(e){var t,n=qe();function r(e,t){e&&(n[e]=n[e]?n[e]+", "+t:t)}return xe(e)?ge(e.split("\n"),function(e){t=e.indexOf(":"),r(me(Pe(e.substr(0,t))),Pe(e.substr(t+1)))}):Se(e)&&ge(e,function(e,t){r(me(t),Pe(e))}),n}function Fn(n){var r;return function(e){if(r||(r=Un(n)),e){var t=r[me(e)];return void 0===t&&(t=null),t}return r}}function Hn(t,n,r,e){return ke(e)?e(t,n,r):(ge(e,function(e){t=e(t,n,r)}),t)}function zn(e){return 200<=e&&e<300}function Bn(){var x=this.defaults={transformResponse:[qn],transformRequest:[function(e){return Se(e)&&(r=e,"[object File]"!==ve.call(r))&&(n=e,"[object Blob]"!==ve.call(n))&&(t=e,"[object FormData]"!==ve.call(t))?H(e):e;var t,n,r}],headers:{common:{Accept:"application/json, text/plain, */*"},post:Ge(Tn),put:Ge(Tn),patch:Ge(Tn)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer",jsonpCallbackParam:"callback"},E=!1;this.useApplyAsync=function(e){return T(e)?(E=!!e,this):E};var t=this.interceptors=[],r=this.xsrfWhitelistedOrigins=[];this.$get=["$browser","$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector","$sce",function(s,v,g,e,$,y,u,b){var w=e("$http");x.paramSerializer=xe(x.paramSerializer)?u.get(x.paramSerializer):x.paramSerializer;var c=[];ge(t,function(e){c.unshift(xe(e)?u.get(e):u.invoke(e))});var n,_=(n=[li].concat(r.map(pi)),function(e){var t=pi(e);return n.some(hi.bind(null,t))});function S(e){if(!Se(e))throw O("$http")("badreq","Http request configuration must be an object.  Received: {0}",e);if(!xe(b.valueOf(e.url)))throw O("$http")("badreq","Http request configuration url must be a string or a $sce trusted object.  Received: {0}",e.url);var n=$e({method:"get",transformRequest:x.transformRequest,transformResponse:x.transformResponse,paramSerializer:x.paramSerializer,jsonpCallbackParam:x.jsonpCallbackParam},e);n.headers=function(e){var t,n,r,i=x.headers,o=$e({},e.headers);i=$e({},i.common,i[me(e.method)]);e:for(t in i){for(r in n=me(t),o)if(me(r)===n)continue e;o[t]=i[t]}return a=o,s=Ge(e),c={},ge(a,function(e,t){ke(e)?null!=(u=e(s))&&(c[t]=u):c[t]=e}),c;var a,s,u,c}(e),n.method=p(n.method),n.paramSerializer=xe(n.paramSerializer)?u.get(n.paramSerializer):n.paramSerializer,s.$$incOutstandingRequestCount("$http");var t=[],r=[],i=y.resolve(n);return ge(c,function(e){(e.request||e.requestError)&&t.unshift(e.request,e.requestError),(e.response||e.responseError)&&r.push(e.response,e.responseError)}),i=(i=o(i=(i=o(i,t)).then(function(e){var n=e.headers,t=Hn(e.data,Fn(n),void 0,e.transformRequest);_e(t)&&ge(n,function(e,t){"content-type"===me(t)&&delete n[t]});_e(e.withCredentials)&&!_e(x.withCredentials)&&(e.withCredentials=x.withCredentials);return function(o,e){var a,t,s=y.defer(),n=s.promise,r=o.headers,i="jsonp"===me(o.method),u=o.url;i?u=b.getTrustedResourceUrl(u):xe(u)||(u=b.valueOf(u));c=u,l=o.paramSerializer(o.params),0<l.length&&(c+=(-1===c.indexOf("?")?"?":"&")+l),u=c,i&&(u=function(n,r){var e=n.split("?");if(2<e.length)throw Ln("badjsonp",'Illegal use more than one "?", in url, "{1}"',n);return ge(Y(e[1]),function(e,t){if("JSON_CALLBACK"===e)throw Ln("badjsonp",'Illegal use of JSON_CALLBACK in url, "{0}"',n);if(t===r)throw Ln("badjsonp",'Illegal use of callback param, "{0}", in url, "{1}"',r,n)}),n+=(-1===n.indexOf("?")?"?":"&")+r+"=JSON_CALLBACK"}(u,o.jsonpCallbackParam));var c,l;S.pendingRequests.push(o),n.then(m,m),!o.cache&&!x.cache||!1===o.cache||"GET"!==o.method&&"JSONP"!==o.method||(a=Se(o.cache)?o.cache:Se(x.cache)?x.cache:w);a&&(T(t=a.get(u))?k(t)?t.then(d,d):Ee(t)?h(t[1],t[0],Ge(t[2]),t[3],t[4]):h(t,200,{},"OK","complete"):a.put(u,n));if(_e(t)){var f=_(o.url)?g()[o.xsrfCookieName||x.xsrfCookieName]:void 0;f&&(r[o.xsrfHeaderName||x.xsrfHeaderName]=f),v(o.method,u,e,function(e,t,n,r,i){a&&(zn(e)?a.put(u,[e,t,Un(n),r,i]):a.remove(u));function o(){h(t,e,n,r,i)}E?$.$applyAsync(o):(o(),$.$$phase||$.$apply())},r,o.timeout,o.withCredentials,o.responseType,p(o.eventHandlers),p(o.uploadEventHandlers))}return n;function p(e){if(e){var t={};return ge(e,function(n,e){t[e]=function(e){function t(){n(e)}E?$.$applyAsync(t):$.$$phase?t():$.$apply(t)}}),t}}function h(e,t,n,r,i){(zn(t=-1<=t?t:0)?s.resolve:s.reject)({data:e,status:t,headers:Fn(n),config:o,statusText:r,xhrStatus:i})}function d(e){h(e.data,e.status,Ge(e.headers()),e.statusText,e.xhrStatus)}function m(){var e=S.pendingRequests.indexOf(o);-1!==e&&S.pendingRequests.splice(e,1)}}(e,t).then(a,a)}),r)).finally(function(){s.$$completeOutstandingRequest(be,"$http")});function o(e,t){for(var n=0,r=t.length;n<r;){var i=t[n++],o=t[n++];e=e.then(i,o)}return t.length=0,e}function a(e){var t=$e({},e);return t.data=Hn(e.data,e.headers,e.status,n.transformResponse),zn(e.status)?t:y.reject(t)}}return S.pendingRequests=[],function(e){ge(arguments,function(n){S[n]=function(e,t){return S($e({},t||{},{method:n,url:e}))}})}("get","delete","head","jsonp"),function(e){ge(arguments,function(r){S[r]=function(e,t,n){return S($e({},n||{},{method:r,url:e,data:t}))}})}("post","put","patch"),S.defaults=x,S}]}function Gn(){this.$get=function(){return function(){return new fe.XMLHttpRequest}}}function Wn(){this.$get=["$browser","$jsonpCallbacks","$document","$xhrFactory",function(e,t,n,r){return $=r,y=(g=e).defer,b=t,w=n[0],function(e,r,t,i,n,o,a,s,u,c){if(r=r||g.url(),"jsonp"===me(e))var l=b.createCallback(r),f=function(e,r,i){e=e.replace("JSON_CALLBACK",r);var o=w.createElement("script"),a=null;return o.type="text/javascript",o.src=e,o.async=!0,a=function(e){o.removeEventListener("load",a),o.removeEventListener("error",a),w.body.removeChild(o),o=null;var t=-1,n="unknown";e&&("load"!==e.type||b.wasCalled(r)||(e={type:"error"}),n=e.type,t="error"===e.type?404:200),i&&i(t,n)},o.addEventListener("load",a),o.addEventListener("error",a),w.body.appendChild(o),a}(r,l,function(e,t){var n=200===e&&b.getResponse(l);v(i,e,n,"",t,"complete"),b.removeCallback(l)});else{var p=$(e,r),h=!1;if(p.open(e,r,!0),ge(n,function(e,t){T(e)&&p.setRequestHeader(t,e)}),p.onload=function(){var e=p.statusText||"",t="response"in p?p.response:p.responseText,n=1223===p.status?204:p.status;0===n&&(n=t?200:"file"===pi(r).protocol?404:0),v(i,n,t,p.getAllResponseHeaders(),e,"complete")},p.onerror=function(){v(i,-1,null,null,"","error")},p.ontimeout=function(){v(i,-1,null,null,"","timeout")},p.onabort=function(){v(i,-1,null,null,"",h?"timeout":"abort")},ge(u,function(e,t){p.addEventListener(t,e)}),ge(c,function(e,t){p.upload.addEventListener(t,e)}),a&&(p.withCredentials=!0),s)try{p.responseType=s}catch(e){if("json"!==s)throw e}p.send(_e(t)?null:t)}if(0<o)var d=y(function(){m("timeout")},o);else k(o)&&o.then(function(){m(T(o.$$timeoutId)?"timeout":"abort")});function m(e){h="timeout"===e,f&&f(),p&&p.abort()}function v(e,t,n,r,i,o){T(d)&&y.cancel(d),f=p=null,e(t,n,r,i,o)}};var g,$,y,b,w}]}var Kn=y.$interpolateMinErr=O("$interpolate");function Jn(){var C="{{",k="}}";this.startSymbol=function(e){return e?(C=e,this):C},this.endSymbol=function(e){return e?(k=e,this):k},this.$get=["$parse","$exceptionHandler","$sce",function(y,b,w){var _=C.length,S=k.length,t=new RegExp(C.replace(/./g,e),"g"),n=new RegExp(k.replace(/./g,e),"g");function e(e){return"\\\\\\"+e}function x(e){return e.replace(t,C).replace(n,k)}function E(e,t,n,r){var i=e.$watch(function(e){return i(),r(e)},t,n);return i}function r(i,e,r,o){var a=r===w.URL||r===w.MEDIA_URL;if(!i.length||-1===i.indexOf(C)){if(e)return;var t=x(i);a&&(t=w.getTrusted(r,t));var n=R(t);return n.exp=i,n.expressions=[],n.$$watchDelegate=E,n}o=!!o;for(var s,u,c,l,f,p=0,h=[],d=i.length,m=[],v=[];p<d;){if(-1===(s=i.indexOf(C,p))||-1===(u=i.indexOf(k,s+_))){p!==d&&m.push(x(i.substring(p)));break}p!==s&&m.push(x(i.substring(p,s))),l=i.substring(s+_,u),h.push(l),p=u+S,v.push(m.length),m.push("")}f=1===m.length&&1===v.length;var g=a&&f?void 0:function(e){try{return e=r&&!a?w.getTrusted(r,e):w.valueOf(e),o&&!T(e)?e:le(e)}catch(e){b(Kn.interr(i,e))}};if(c=h.map(function(e){return y(e,g)}),!e||h.length){var $=function(e){for(var t=0,n=h.length;t<n;t++){if(o&&_e(e[t]))return;m[v[t]]=e[t]}return a?w.getTrusted(r,f?m[0]:m.join("")):(r&&1<m.length&&Kn.throwNoconcat(i),m.join(""))};return $e(function(e){var t=0,n=h.length,r=new Array(n);try{for(;t<n;t++)r[t]=c[t](e);return $(r)}catch(e){b(Kn.interr(i,e))}},{exp:i,expressions:h,$$watchDelegate:function(r,i){var o;return r.$watchGroup(c,function(e,t){var n=$(e);i.call(this,n,e!==t?o:n,r),o=n})}})}}return r.startSymbol=function(){return C},r.endSymbol=function(){return k},r}]}Kn.throwNoconcat=function(e){throw Kn("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",e)},Kn.interr=function(e,t){return Kn("interr","Can't interpolate: {0}\n{1}",e,t.toString())};var Yn=O("$interval");function Qn(){this.$get=["$$intervalFactory","$window",function(e,i){var o={},r=function(e){i.clearInterval(e),delete o[e]},t=e(function(e,t,n){var r=i.setInterval(e,t);return o[r]=n,r},r);return t.cancel=function(e){if(!e)return!1;if(!e.hasOwnProperty("$$intervalId"))throw Yn("badprom","`$interval.cancel()` called with a promise that was not generated by `$interval()`.");if(!o.hasOwnProperty(e.$$intervalId))return!1;var t=e.$$intervalId,n=o[t];return Hr(n.promise),n.reject("canceled"),r(t),!0},t}]}function Zn(){this.$get=["$browser","$q","$$q","$rootScope",function(h,d,m,v){return function(f,p){return function(e,t,n,r){var i=4<arguments.length,o=i?Ne(arguments,4):[],a=0,s=T(r)&&!r,u=(s?m:d).defer(),c=u.promise;function l(){i?e.apply(null,o):e(a)}return n=T(n)?n:0,c.$$intervalId=f(function(){s?h.defer(l):v.$evalAsync(l),u.notify(a++),0<n&&n<=a&&(u.resolve(a),p(c.$$intervalId)),s||v.$apply()},t,u,s),c}}}]}var Xn=function(){this.$get=function(){var o=y.callbacks,a={};return{createCallback:function(e){var t,n="_"+(o.$$counter++).toString(36),r="angular.callbacks."+n,i=((t=function(e){t.data=e,t.called=!0}).id=n,t);return a[r]=o[n]=i,r},wasCalled:function(e){return a[e].called},getResponse:function(e){return a[e].data},removeCallback:function(e){var t=a[e];delete o[t.id],delete a[e]}}}},er=/^([^?#]*)(\?([^#]*))?(#(.*))?$/,tr={http:80,https:443,ftp:21},nr=O("$location");function rr(e,t,n){var r,i=(r=[],ge(t,function(e,t){Ee(e)?ge(e,function(e){r.push(Z(t,!0)+(!0===e?"":"="+Z(e,!0)))}):r.push(Z(t,!0)+(!0===e?"":"="+Z(e,!0)))}),r.length?r.join("&"):""),o=n?"#"+Q(n):"";return function(e){for(var t=e.split("/"),n=t.length;n--;)t[n]=Q(t[n].replace(/%2F/g,"/"));return t.join("/")}(e)+(i?"?"+i:"")+o}function ir(e,t){var n=pi(e);t.$$protocol=n.protocol,t.$$host=n.hostname,t.$$port=b(n.port)||tr[n.protocol]||null}var or=/^\s*[\\/]{2,}/;function ar(e,t,n){if(or.test(e))throw nr("badpath",'Invalid url "{0}".',e);var r="/"!==e.charAt(0);r&&(e="/"+e);var i=pi(e),o=r&&"/"===i.pathname.charAt(0)?i.pathname.substring(1):i.pathname;t.$$path=function(e,t){for(var n=e.split("/"),r=n.length;r--;)n[r]=decodeURIComponent(n[r]),t&&(n[r]=n[r].replace(/\//g,"%2F"));return n.join("/")}(o,n),t.$$search=Y(i.search),t.$$hash=decodeURIComponent(i.hash),t.$$path&&"/"!==t.$$path.charAt(0)&&(t.$$path="/"+t.$$path)}function sr(e,t){return e.slice(0,t.length)===t}function ur(e,t){if(sr(t,e))return t.substr(e.length)}function cr(e){var t=e.indexOf("#");return-1===t?e:e.substr(0,t)}function lr(o,a,s){this.$$html5=!0,s=s||"",ir(o,this),this.$$parse=function(e){var t=ur(a,e);if(!xe(t))throw nr("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',e,a);ar(t,this,!0),this.$$path||(this.$$path="/"),this.$$compose()},this.$$normalizeUrl=function(e){return a+e.substr(1)},this.$$parseLinkUrl=function(e,t){return t&&"#"===t[0]?(this.hash(t.slice(1)),!0):(T(n=ur(o,e))?(r=n,i=s&&T(n=ur(s,n))?a+(ur("/",n)||n):o+r):T(n=ur(a,e))?i=a+n:a===e+"/"&&(i=a),i&&this.$$parse(i),!!i);var n,r,i}}function fr(r,i,o){ir(r,this),this.$$parse=function(e){var t,n=ur(r,e)||ur(i,e);_e(n)||"#"!==n.charAt(0)?this.$$html5?t=n:(t="",_e(n)&&(r=e,this.replace())):_e(t=ur(o,n))&&(t=n),ar(t,this,!1),this.$$path=function(e,t,n){var r,i=/^\/[A-Z]:(\/.*)/;sr(t,n)&&(t=t.replace(n,""));if(i.exec(t))return e;return(r=i.exec(e))?r[1]:e}(this.$$path,t,r),this.$$compose()},this.$$normalizeUrl=function(e){return r+(e?o+e:"")},this.$$parseLinkUrl=function(e,t){return cr(r)===cr(e)&&(this.$$parse(e),!0)}}function pr(i,o,a){this.$$html5=!0,fr.apply(this,arguments),this.$$parseLinkUrl=function(e,t){return t&&"#"===t[0]?(this.hash(t.slice(1)),!0):(i===cr(e)?n=e:(r=ur(o,e))?n=i+a+r:o===e+"/"&&(n=o),n&&this.$$parse(n),!!n);var n,r},this.$$normalizeUrl=function(e){return i+a+e}}var hr={$$absUrl:"",$$html5:!1,$$replace:!1,$$compose:function(){this.$$url=rr(this.$$path,this.$$search,this.$$hash),this.$$absUrl=this.$$normalizeUrl(this.$$url),this.$$urlUpdatedByLocation=!0},absUrl:dr("$$absUrl"),url:function(e){if(_e(e))return this.$$url;var t=er.exec(e);return(t[1]||""===e)&&this.path(decodeURIComponent(t[1])),(t[2]||t[1]||""===e)&&this.search(t[3]||""),this.hash(t[5]||""),this},protocol:dr("$$protocol"),host:dr("$$host"),port:dr("$$port"),path:mr("$$path",function(e){return"/"===(e=null!==e?e.toString():"").charAt(0)?e:"/"+e}),search:function(n,e){switch(arguments.length){case 0:return this.$$search;case 1:if(xe(n)||S(n))n=n.toString(),this.$$search=Y(n);else{if(!Se(n))throw nr("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");ge(n=I(n,{}),function(e,t){null==e&&delete n[t]}),this.$$search=n}break;default:_e(e)||null===e?delete this.$$search[n]:this.$$search[n]=e}return this.$$compose(),this},hash:mr("$$hash",function(e){return null!==e?e.toString():""}),replace:function(){return this.$$replace=!0,this}};function dr(e){return function(){return this[e]}}function mr(t,n){return function(e){return _e(e)?this[t]:(this[t]=n(e),this.$$compose(),this)}}function vr(){var g="!",$={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(e){return T(e)?(g=e,this):g},this.html5Mode=function(e){return je(e)?($.enabled=e,this):Se(e)?(je(e.enabled)&&($.enabled=e.enabled),je(e.requireBase)&&($.requireBase=e.requireBase),(je(e.rewriteLinks)||xe(e.rewriteLinks))&&($.rewriteLinks=e.rewriteLinks),this):$},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(s,u,c,o,e){var l,t,n,r,i=u.baseHref(),a=u.url();if($.enabled){if(!i&&$.requireBase)throw nr("nobase","$location in HTML5 mode requires a <base> tag to be present!");n=(r=a).substring(0,r.indexOf("/",r.indexOf("//")+2))+(i||"/"),t=c.history?lr:pr}else n=cr(a),t=fr;var f,p=(f=n).substr(0,cr(f).lastIndexOf("/")+1);(l=new t(n,p,"#"+g)).$$parseLinkUrl(a,a),l.$$state=u.state();var h=/^\s*(javascript|mailto):/i;function d(e,t,n){var r=l.url(),i=l.$$state;try{u.url(e,t,n),l.$$state=u.state()}catch(e){throw l.url(r),l.$$state=i,e}}o.on("click",function(e){var t=$.rewriteLinks;if(t&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey&&2!==e.which&&2!==e.button){for(var n=he(e.target);"a"!==Re(n[0]);)if(n[0]===o[0]||!(n=n.parent())[0])return;if(!xe(t)||!_e(n.attr(t))){var r=n.prop("href"),i=n.attr("href")||n.attr("xlink:href");Se(r)&&"[object SVGAnimatedString]"===r.toString()&&(r=pi(r.animVal).href),h.test(r)||!r||n.attr("target")||e.isDefaultPrevented()||l.$$parseLinkUrl(r,i)&&(e.preventDefault(),l.absUrl()!==u.url()&&s.$apply())}}}),l.absUrl()!==a&&u.url(l.absUrl(),!0);var m=!0;return u.onUrlChange(function(r,i){sr(r,p)?(s.$evalAsync(function(){var e,t=l.absUrl(),n=l.$$state;l.$$parse(r),l.$$state=i,e=s.$broadcast("$locationChangeStart",r,t,i,n).defaultPrevented,l.absUrl()===r&&(e?(l.$$parse(t),d(t,!1,l.$$state=n)):(m=!1,v(t,n)))}),s.$$phase||s.$digest()):e.location.href=r}),s.$watch(function(){if(m||l.$$urlUpdatedByLocation){l.$$urlUpdatedByLocation=!1;var n=u.url(),e=l.absUrl(),r=u.state(),i=l.$$replace,o=!((t=n)===(a=e)||pi(t).href===pi(a).href)||l.$$html5&&c.history&&r!==l.$$state;(m||o)&&(m=!1,s.$evalAsync(function(){var e=l.absUrl(),t=s.$broadcast("$locationChangeStart",e,n,l.$$state,r).defaultPrevented;l.absUrl()===e&&(t?(l.$$parse(n),l.$$state=r):(o&&d(e,i,r===l.$$state?null:l.$$state),v(n,r)))}))}var t,a;l.$$replace=!1}),l;function v(e,t){s.$broadcast("$locationChangeSuccess",l.absUrl(),e,l.$$state,t)}}]}function gr(){var r=!0,o=this;this.debugEnabled=function(e){return T(e)?(r=e,this):r},this.$get=["$window",function(n){var e,i=pe||/\bEdge\//.test(n.navigator&&n.navigator.userAgent);return{log:t("log"),info:t("info"),warn:t("warn"),error:t("error"),debug:(e=t("debug"),function(){r&&e.apply(o,arguments)})};function t(e){var t=n.console||{},r=t[e]||t.log||be;return function(){var n=[];return ge(arguments,function(e){var t;n.push((Ce(t=e)&&(t.stack&&i?t=t.message&&-1===t.stack.indexOf(t.message)?"Error: "+t.message+"\n"+t.stack:t.stack:t.sourceURL&&(t=t.message+"\n"+t.sourceURL+":"+t.line)),t))}),Function.prototype.apply.call(r,t,n)}}}]}ge([pr,fr,lr],function(t){t.prototype=Object.create(hr),t.prototype.state=function(e){if(!arguments.length)return this.$$state;if(t!==lr||!this.$$html5)throw nr("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=_e(e)?null:e,this.$$urlUpdatedByLocation=!0,this}});var $r=O("$parse"),yr={}.constructor.prototype.valueOf;function br(e){return e+""}var wr=qe();ge("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(e){wr[e]=!0});var _r={n:"\n",f:"\f",r:"\r",t:"\t",v:"\v","'":"'",'"':'"'},Sr=function(e){this.options=e};Sr.prototype={constructor:Sr,lex:function(e){for(this.text=e,this.index=0,this.tokens=[];this.index<this.text.length;){var t=this.text.charAt(this.index);if('"'===t||"'"===t)this.readString(t);else if(this.isNumber(t)||"."===t&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(t,"(){}[].,;:?"))this.tokens.push({index:this.index,text:t}),this.index++;else if(this.isWhitespace(t))this.index++;else{var n=t+this.peek(),r=n+this.peek(2),i=wr[t],o=wr[n],a=wr[r];if(i||o||a){var s=a?r:o?n:t;this.tokens.push({index:this.index,text:s,operator:!0}),this.index+=s.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(e,t){return-1!==t.indexOf(e)},peek:function(e){var t=e||1;return this.index+t<this.text.length&&this.text.charAt(this.index+t)},isNumber:function(e){return"0"<=e&&e<="9"&&"string"==typeof e},isWhitespace:function(e){return" "===e||"\r"===e||"\t"===e||"\n"===e||"\v"===e||"Â "===e},isIdentifierStart:function(e){return this.options.isIdentifierStart?this.options.isIdentifierStart(e,this.codePointAt(e)):this.isValidIdentifierStart(e)},isValidIdentifierStart:function(e){return"a"<=e&&e<="z"||"A"<=e&&e<="Z"||"_"===e||"$"===e},isIdentifierContinue:function(e){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(e,this.codePointAt(e)):this.isValidIdentifierContinue(e)},isValidIdentifierContinue:function(e,t){return this.isValidIdentifierStart(e,t)||this.isNumber(e)},codePointAt:function(e){return 1===e.length?e.charCodeAt(0):(e.charCodeAt(0)<<10)+e.charCodeAt(1)-56613888},peekMultichar:function(){var e=this.text.charAt(this.index),t=this.peek();if(!t)return e;var n=e.charCodeAt(0),r=t.charCodeAt(0);return 55296<=n&&n<=56319&&56320<=r&&r<=57343?e+t:e},isExpOperator:function(e){return"-"===e||"+"===e||this.isNumber(e)},throwError:function(e,t,n){n=n||this.index;var r=T(t)?"s "+t+"-"+this.index+" ["+this.text.substring(t,n)+"]":" "+n;throw $r("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",e,r,this.text)},readNumber:function(){for(var e="",t=this.index;this.index<this.text.length;){var n=me(this.text.charAt(this.index));if("."===n||this.isNumber(n))e+=n;else{var r=this.peek();if("e"===n&&this.isExpOperator(r))e+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"===e.charAt(e.length-1))e+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!==e.charAt(e.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:t,text:e,constant:!0,value:Number(e)})},readIdent:function(){var e=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var t=this.peekMultichar();if(!this.isIdentifierContinue(t))break;this.index+=t.length}this.tokens.push({index:e,text:this.text.slice(e,this.index),identifier:!0})},readString:function(e){var t=this.index;this.index++;for(var n="",r=e,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);if(r+=o,i){if("u"===o){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{n+=_r[o]||o}i=!1}else if("\\"===o)i=!0;else{if(o===e)return this.index++,void this.tokens.push({index:t,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",t)}};var xr=function(e,t){this.lexer=e,this.options=t};function Er(e,t){return void 0!==e?e:t}function Cr(e,t){return void 0===e?t:void 0===t?e:e+t}xr.Program="Program",xr.ExpressionStatement="ExpressionStatement",xr.AssignmentExpression="AssignmentExpression",xr.ConditionalExpression="ConditionalExpression",xr.LogicalExpression="LogicalExpression",xr.BinaryExpression="BinaryExpression",xr.UnaryExpression="UnaryExpression",xr.CallExpression="CallExpression",xr.MemberExpression="MemberExpression",xr.Identifier="Identifier",xr.Literal="Literal",xr.ArrayExpression="ArrayExpression",xr.Property="Property",xr.ObjectExpression="ObjectExpression",xr.ThisExpression="ThisExpression",xr.LocalsExpression="LocalsExpression",xr.NGValueParameter="NGValueParameter",xr.prototype={ast:function(e){this.text=e,this.tokens=this.lexer.lex(e);var t=this.program();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),t},program:function(){for(var e=[];;)if(0<this.tokens.length&&!this.peek("}",")",";","]")&&e.push(this.expressionStatement()),!this.expect(";"))return{type:xr.Program,body:e}},expressionStatement:function(){return{type:xr.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var e=this.expression();this.expect("|");)e=this.filter(e);return e},expression:function(){return this.assignment()},assignment:function(){var e=this.ternary();if(this.expect("=")){if(!Rr(e))throw $r("lval","Trying to assign a value to a non l-value");e={type:xr.AssignmentExpression,left:e,right:this.assignment(),operator:"="}}return e},ternary:function(){var e,t,n=this.logicalOR();return this.expect("?")&&(e=this.expression(),this.consume(":"))?(t=this.expression(),{type:xr.ConditionalExpression,test:n,alternate:e,consequent:t}):n},logicalOR:function(){for(var e=this.logicalAND();this.expect("||");)e={type:xr.LogicalExpression,operator:"||",left:e,right:this.logicalAND()};return e},logicalAND:function(){for(var e=this.equality();this.expect("&&");)e={type:xr.LogicalExpression,operator:"&&",left:e,right:this.equality()};return e},equality:function(){for(var e,t=this.relational();e=this.expect("==","!=","===","!==");)t={type:xr.BinaryExpression,operator:e.text,left:t,right:this.relational()};return t},relational:function(){for(var e,t=this.additive();e=this.expect("<",">","<=",">=");)t={type:xr.BinaryExpression,operator:e.text,left:t,right:this.additive()};return t},additive:function(){for(var e,t=this.multiplicative();e=this.expect("+","-");)t={type:xr.BinaryExpression,operator:e.text,left:t,right:this.multiplicative()};return t},multiplicative:function(){for(var e,t=this.unary();e=this.expect("*","/","%");)t={type:xr.BinaryExpression,operator:e.text,left:t,right:this.unary()};return t},unary:function(){var e;return(e=this.expect("+","-","!"))?{type:xr.UnaryExpression,operator:e.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var e,t;for(this.expect("(")?(e=this.filterChain(),this.consume(")")):this.expect("[")?e=this.arrayDeclaration():this.expect("{")?e=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?e=I(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?e={type:xr.Literal,value:this.options.literals[this.consume().text]}:this.peek().identifier?e=this.identifier():this.peek().constant?e=this.constant():this.throwError("not a primary expression",this.peek());t=this.expect("(","[",".");)"("===t.text?(e={type:xr.CallExpression,callee:e,arguments:this.parseArguments()},this.consume(")")):"["===t.text?(e={type:xr.MemberExpression,object:e,property:this.expression(),computed:!0},this.consume("]")):"."===t.text?e={type:xr.MemberExpression,object:e,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return e},filter:function(e){for(var t=[e],n={type:xr.CallExpression,callee:this.identifier(),arguments:t,filter:!0};this.expect(":");)t.push(this.expression());return n},parseArguments:function(){var e=[];if(")"!==this.peekToken().text)for(;e.push(this.filterChain()),this.expect(","););return e},identifier:function(){var e=this.consume();return e.identifier||this.throwError("is not a valid identifier",e),{type:xr.Identifier,name:e.text}},constant:function(){return{type:xr.Literal,value:this.consume().value}},arrayDeclaration:function(){var e=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;e.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:xr.ArrayExpression,elements:e}},object:function(){var e,t=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;e={type:xr.Property,kind:"init"},this.peek().constant?(e.key=this.constant(),e.computed=!1,this.consume(":"),e.value=this.expression()):this.peek().identifier?(e.key=this.identifier(),e.computed=!1,this.peek(":")?(this.consume(":"),e.value=this.expression()):e.value=e.key):this.peek("[")?(this.consume("["),e.key=this.expression(),this.consume("]"),e.computed=!0,this.consume(":"),e.value=this.expression()):this.throwError("invalid key",this.peek()),t.push(e)}while(this.expect(","));return this.consume("}"),{type:xr.ObjectExpression,properties:t}},throwError:function(e,t){throw $r("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",t.text,e,t.index+1,this.text,this.text.substring(t.index))},consume:function(e){if(0===this.tokens.length)throw $r("ueoe","Unexpected end of expression: {0}",this.text);var t=this.expect(e);return t||this.throwError("is unexpected, expecting ["+e+"]",this.peek()),t},peekToken:function(){if(0===this.tokens.length)throw $r("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(e,t,n,r){return this.peekAhead(0,e,t,n,r)},peekAhead:function(e,t,n,r,i){if(this.tokens.length>e){var o=this.tokens[e],a=o.text;if(a===t||a===n||a===r||a===i||!t&&!n&&!r&&!i)return o}return!1},expect:function(e,t,n,r){var i=this.peek(e,t,n,r);return!!i&&(this.tokens.shift(),i)},selfReferential:{this:{type:xr.ThisExpression},$locals:{type:xr.LocalsExpression}}};var kr=1,Or=2;function jr(e,t,n){var r,i,o,a,s,u=e.isPure=function(e,t){switch(e.type){case xr.MemberExpression:if(e.computed)return!1;break;case xr.UnaryExpression:return kr;case xr.BinaryExpression:return"+"!==e.operator&&kr;case xr.CallExpression:return!1}return void 0===t?Or:t}(e,n);switch(e.type){case xr.Program:r=!0,ge(e.body,function(e){jr(e.expression,t,u),r=r&&e.expression.constant}),e.constant=r;break;case xr.Literal:e.constant=!0,e.toWatch=[];break;case xr.UnaryExpression:jr(e.argument,t,u),e.constant=e.argument.constant,e.toWatch=e.argument.toWatch;break;case xr.BinaryExpression:jr(e.left,t,u),jr(e.right,t,u),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.left.toWatch.concat(e.right.toWatch);break;case xr.LogicalExpression:jr(e.left,t,u),jr(e.right,t,u),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.constant?[]:[e];break;case xr.ConditionalExpression:jr(e.test,t,u),jr(e.alternate,t,u),jr(e.consequent,t,u),e.constant=e.test.constant&&e.alternate.constant&&e.consequent.constant,e.toWatch=e.constant?[]:[e];break;case xr.Identifier:e.constant=!1,e.toWatch=[e];break;case xr.MemberExpression:jr(e.object,t,u),e.computed&&jr(e.property,t,u),e.constant=e.object.constant&&(!e.computed||e.property.constant),e.toWatch=e.constant?[]:[e];break;case xr.CallExpression:o=!!e.filter&&(a=t,s=e.callee.name,!a(s).$stateful),r=o,i=[],ge(e.arguments,function(e){jr(e,t,u),r=r&&e.constant,i.push.apply(i,e.toWatch)}),e.constant=r,e.toWatch=o?i:[e];break;case xr.AssignmentExpression:jr(e.left,t,u),jr(e.right,t,u),e.constant=e.left.constant&&e.right.constant,e.toWatch=[e];break;case xr.ArrayExpression:r=!0,i=[],ge(e.elements,function(e){jr(e,t,u),r=r&&e.constant,i.push.apply(i,e.toWatch)}),e.constant=r,e.toWatch=i;break;case xr.ObjectExpression:r=!0,i=[],ge(e.properties,function(e){jr(e.value,t,u),r=r&&e.value.constant,i.push.apply(i,e.value.toWatch),e.computed&&(jr(e.key,t,!1),r=r&&e.key.constant,i.push.apply(i,e.key.toWatch))}),e.constant=r,e.toWatch=i;break;case xr.ThisExpression:case xr.LocalsExpression:e.constant=!1,e.toWatch=[]}}function Pr(e){if(1===e.length){var t=e[0].expression,n=t.toWatch;return 1!==n.length?n:n[0]!==t?n:void 0}}function Rr(e){return e.type===xr.Identifier||e.type===xr.MemberExpression}function Tr(e){if(1===e.body.length&&Rr(e.body[0].expression))return{type:xr.AssignmentExpression,left:e.body[0].expression,right:{type:xr.NGValueParameter},operator:"="}}function Ar(e){this.$filter=e}function Mr(e){this.$filter=e}function Nr(e,t,n){this.ast=new xr(e,n),this.astCompiler=n.csp?new Mr(t):new Ar(t)}function Lr(e){return ke(e.valueOf)?e.valueOf():yr.call(e)}function Vr(){var s,u,c=qe(),l={true:!0,false:!1,null:null,undefined:void 0};this.addLiteral=function(e,t){l[e]=t},this.setIdentifierFns=function(e,t){return s=e,u=t,this},this.$get=["$filter",function(i){var o={csp:D().noUnsafeEval,literals:I(l),isIdentifierStart:ke(s)&&s,isIdentifierContinue:ke(u)&&u};return e.$$getAst=function(e){return new Nr(new Sr(o),i,o).getAst(e).ast},e;function e(e,t){var n,r;switch(typeof e){case"string":if(e=e.trim(),!(n=c[r=e]))n=new Nr(new Sr(o),i,o).parse(e),c[r]=d(n);return a(n,t);case"function":return a(e,t);default:return a(be,t)}}function p(e,t,n){return null==e||null==t?e===t:!("object"==typeof e&&"object"==typeof(e=Lr(e))&&!n)&&(e===t||e!=e&&t!=t)}function t(e,t,n,o,r){var a,s=o.inputs;if(1===s.length){var i=p;return s=s[0],e.$watch(function(e){var t=s(e);return p(t,i,s.isPure)||(a=o(e,void 0,void 0,[t]),i=t&&Lr(t)),a},t,n,r)}for(var u=[],c=[],l=0,f=s.length;l<f;l++)u[l]=p,c[l]=null;return e.$watch(function(e){for(var t=!1,n=0,r=s.length;n<r;n++){var i=s[n](e);(t||(t=!p(i,u[n],s[n].isPure)))&&(c[n]=i,u[n]=i&&Lr(i))}return t&&(a=o(e,void 0,void 0,c)),a},t,n,r)}function n(e,t,n,r,i){var o,a,s=r.literal?h:T,u=r.$$intercepted||r,c=r.$$interceptor||we,l=r.inputs&&!u.inputs;return p.literal=r.literal,p.constant=r.constant,p.inputs=r.inputs,d(p),o=e.$watch(p,t,n,i);function f(){s(a)&&o()}function p(e,t,n,r){return a=l&&r?r[0]:u(e,t,n,r),s(a)&&e.$$postDigest(f),c(a)}}function h(e){var t=!0;return ge(e,function(e){T(e)||(t=!1)}),t}function r(e,t,n,r){var i=e.$watch(function(e){return i(),r(e)},t,n);return i}function d(e){return e.constant?e.$$watchDelegate=r:e.oneTime?e.$$watchDelegate=n:e.inputs&&(e.$$watchDelegate=t),e}function a(o,a){if(!a)return o;o.$$interceptor&&(a=function(t,n){function e(e){return n(t(e))}return e.$stateful=t.$stateful||n.$stateful,e.$$pure=t.$$pure&&n.$$pure,e}(o.$$interceptor,a),o=o.$$intercepted);var s=!1,e=function(e,t,n,r){var i=s&&r?r[0]:o(e,t,n,r);return a(i)};return e.$$intercepted=o,e.$$interceptor=a,e.literal=o.literal,e.oneTime=o.oneTime,e.constant=o.constant,a.$stateful||(s=!o.inputs,e.inputs=o.inputs?o.inputs:[o],a.$$pure||(e.inputs=e.inputs.map(function(t){return t.isPure===Or?function(e){return t(e)}:t}))),d(e)}}]}function Ir(){var n=!0;this.$get=["$rootScope","$exceptionHandler",function(t,e){return qr(function(e){t.$evalAsync(e)},e,n)}],this.errorOnUnhandledRejections=function(e){return T(e)?(n=e,this):n}}function Dr(){var n=!0;this.$get=["$browser","$exceptionHandler",function(t,e){return qr(function(e){t.defer(e)},e,n)}],this.errorOnUnhandledRejections=function(e){return T(e)?(n=e,this):n}}function qr(a,s,u){var n=O("$q",TypeError),c=0,r=[];function i(){return new e}function e(){var t=this.promise=new o;this.resolve=function(e){p(t,e)},this.reject=function(e){h(t,e)},this.notify=function(e){m(t,e)}}function o(){this.$$state={status:0}}function l(){for(;!c&&r.length;){var e=r.shift();if(!Ur(e)){Fr(e);var t="Possibly unhandled rejection: "+We(e.value);Ce(e.value)?s(e.value,t):s(t)}}}function f(e){!u||e.pending||2!==e.status||Ur(e)||(0===c&&0===r.length&&a(l),r.push(e)),!e.processScheduled&&e.pending&&(e.processScheduled=!0,++c,a(function(){!function(e){var t,n,r;r=e.pending,e.processScheduled=!1,e.pending=void 0;try{for(var i=0,o=r.length;i<o;++i){Fr(e),n=r[i][0],t=r[i][e.status];try{ke(t)?p(n,t(e.value)):1===e.status?p(n,e.value):h(n,e.value)}catch(e){h(n,e),e&&!0===e.$$passToExceptionHandler&&s(e)}}}finally{--c,u&&0===c&&a(l)}}(e)}))}function p(e,t){e.$$state.status||(t===e?d(e,n("qcycle","Expected promise to be resolved with value other than itself '{0}'",t)):function t(n,e){var r;var i=!1;try{(Se(e)||ke(e))&&(r=e.then),ke(r)?(n.$$state.status=-1,r.call(e,o,a,s)):(n.$$state.value=e,n.$$state.status=1,f(n.$$state))}catch(e){a(e)}function o(e){i||(i=!0,t(n,e))}function a(e){i||(i=!0,d(n,e))}function s(e){m(n,e)}}(e,t))}function h(e,t){e.$$state.status||d(e,t)}function d(e,t){e.$$state.value=t,e.$$state.status=2,f(e.$$state)}function m(e,i){var o=e.$$state.pending;e.$$state.status<=0&&o&&o.length&&a(function(){for(var e,t,n=0,r=o.length;n<r;n++){t=o[n][0],e=o[n][3];try{m(t,ke(e)?e(i):i)}catch(e){s(e)}}})}function v(e){var t=new o;return h(t,e),t}function g(e,t,n){var r=null;try{ke(n)&&(r=n())}catch(e){return v(e)}return k(r)?r.then(function(){return t(e)},v):t(e)}function $(e,t,n,r){var i=new o;return p(i,e),i.then(t,n,r)}$e(o.prototype,{then:function(e,t,n){if(_e(e)&&_e(t)&&_e(n))return this;var r=new o;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,e,t,n]),0<this.$$state.status&&f(this.$$state),r},catch:function(e){return this.then(null,e)},finally:function(t,e){return this.then(function(e){return g(e,y,t)},function(e){return g(e,v,t)},e)}});var y=$;function t(e){if(!ke(e))throw n("norslvr","Expected resolverFn, got '{0}'",e);var t=new o;return e(function(e){p(t,e)},function(e){h(t,e)}),t}return t.prototype=o.prototype,t.defer=i,t.reject=v,t.when=$,t.resolve=y,t.all=function(e){var n=new o,r=0,i=Ee(e)?[]:{};return ge(e,function(e,t){r++,$(e).then(function(e){i[t]=e,--r||p(n,i)},function(e){h(n,e)})}),0===r&&p(n,i),n},t.race=function(e){var t=i();return ge(e,function(e){$(e).then(t.resolve,t.reject)}),t.promise},t}function Ur(e){return!!e.pur}function Fr(e){e.pur=!0}function Hr(e){e.$$state&&Fr(e.$$state)}function zr(){this.$get=["$window","$timeout",function(e,n){var r=e.requestAnimationFrame||e.webkitRequestAnimationFrame,i=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,t=!!r,o=t?function(e){var t=r(e);return function(){i(t)}}:function(e){var t=n(e,16.66,!1);return function(){n.cancel(t)}};return o.supported=t,o}]}function Br(){var x=10,E=O("$rootScope"),C=null,k=null;this.digestTtl=function(e){return arguments.length&&(x=e),x},this.$get=["$exceptionHandler","$parse","$browser",function(h,d,m){function r(e){e.currentScope.$$destroyed=!0}function i(){this.$id=u(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,(this.$root=this).$$destroyed=!1,this.$$suspended=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}i.prototype={constructor:i,$new:function(e,t){var n;return t=t||this,e?(n=new i).$root=this.$root:(this.$$ChildScope||(this.$$ChildScope=function(e){function t(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=u(),this.$$ChildScope=null,this.$$suspended=!1}return t.prototype=e,t}(this)),n=new this.$$ChildScope),n.$parent=t,n.$$prevSibling=t.$$childTail,t.$$childHead?(t.$$childTail.$$nextSibling=n,t.$$childTail=n):t.$$childHead=t.$$childTail=n,(e||t!==this)&&n.$on("$destroy",r),n},$watch:function(e,t,n,r){var i=d(e),o=ke(t)?t:be;if(i.$$watchDelegate)return i.$$watchDelegate(this,o,n,i,e);var a=this,s=a.$$watchers,u={fn:o,last:_,get:i,exp:r||e,eq:!!n};return C=null,s||((s=a.$$watchers=[]).$$digestWatchIndex=-1),s.unshift(u),s.$$digestWatchIndex++,c(this,1),function(){var e=Te(s,u);0<=e&&(c(a,-1),e<s.$$digestWatchIndex&&s.$$digestWatchIndex--),C=null}},$watchGroup:function(t,r){var i=new Array(t.length),o=new Array(t.length),a=[],s=this,u=!1,n=!0;if(!t.length){var e=!0;return s.$evalAsync(function(){e&&r(o,o,s)}),function(){e=!1}}if(1===t.length)return this.$watch(t[0],function(e,t,n){o[0]=e,i[0]=t,r(o,e===t?o:i,n)});function c(){u=!1;try{n?(n=!1,r(o,o,s)):r(o,i,s)}finally{for(var e=0;e<t.length;e++)i[e]=o[e]}}return ge(t,function(e,t){var n=s.$watch(e,function(e){o[t]=e,u||(u=!0,s.$evalAsync(c))});a.push(n)}),function(){for(;a.length;)a.shift()()}},$watchCollection:function(e,n){h.$$pure=d(e).literal,h.$stateful=!h.$$pure;var a,s,r,i=this,o=1<n.length,u=0,t=d(e,h),c=[],l={},f=!0,p=0;function h(e){var t,n,r,i;if(!_e(a=e)){if(Se(a))if(N(a)){s!==c&&(p=(s=c).length=0,u++),t=a.length,p!==t&&(u++,s.length=p=t);for(var o=0;o<t;o++)i=s[o],r=a[o],i!=i&&r!=r||i===r||(u++,s[o]=r)}else{for(n in s!==l&&(s=l={},p=0,u++),t=0,a)de.call(a,n)&&(t++,r=a[n],i=s[n],n in s?i!=i&&r!=r||i===r||(u++,s[n]=r):(p++,s[n]=r,u++));if(t<p)for(n in u++,s)de.call(a,n)||(p--,delete s[n])}else s!==a&&(s=a,u++);return u}}return this.$watch(t,function(){if(f?(f=!1,n(a,a,i)):n(a,r,i),o)if(Se(a))if(N(a)){r=new Array(a.length);for(var e=0;e<a.length;e++)r[e]=a[e]}else for(var t in r={},a)de.call(a,t)&&(r[t]=a[t]);else r=a})},$digest:function(){var e,t,n,r,i,o,a,s,u,c=x,l=g.length?v:this,f=[];b("$digest"),m.$$checkUrlChange(),this===v&&null!==k&&(m.defer.cancel(k),S()),C=null;do{i=!1,a=l;for(var p=0;p<g.length;p++){try{(0,(u=g[p]).fn)(u.scope,u.locals)}catch(e){h(e)}C=null}g.length=0;e:do{if(r=!a.$$suspended&&a.$$watchers)for(r.$$digestWatchIndex=r.length;r.$$digestWatchIndex--;)try{if(e=r[r.$$digestWatchIndex])if((t=(0,e.get)(a))===(n=e.last)||(e.eq?Me(t,n):P(t)&&P(n))){if(e===C){i=!1;break e}}else i=!0,(C=e).last=e.eq?I(t,null):t,(0,e.fn)(t,n===_?t:n,a),c<5&&(f[s=4-c]||(f[s]=[]),f[s].push({msg:ke(e.exp)?"fn: "+(e.exp.name||e.exp.toString()):e.exp,newVal:t,oldVal:n}))}catch(e){h(e)}if(!(o=!a.$$suspended&&a.$$watchersCount&&a.$$childHead||a!==l&&a.$$nextSibling))for(;a!==l&&!(o=a.$$nextSibling);)a=a.$parent}while(a=o);if((i||g.length)&&!c--)throw w(),E("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",x,f)}while(i||g.length);for(w();y<$.length;)try{$[y++]()}catch(e){h(e)}$.length=y=0,m.$$checkUrlChange()},$suspend:function(){this.$$suspended=!0},$isSuspended:function(){return this.$$suspended},$resume:function(){this.$$suspended=!1},$destroy:function(){if(!this.$$destroyed){var e=this.$parent;for(var t in this.$broadcast("$destroy"),this.$$destroyed=!0,this===v&&m.$$applicationDestroyed(),c(this,-this.$$watchersCount),this.$$listenerCount)o(this,this.$$listenerCount[t],t);e&&e.$$childHead===this&&(e.$$childHead=this.$$nextSibling),e&&e.$$childTail===this&&(e.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=be,this.$on=this.$watch=this.$watchGroup=function(){return be},this.$$listeners={},this.$$nextSibling=null,function e(t){9===pe&&(t.$$childHead&&e(t.$$childHead),t.$$nextSibling&&e(t.$$nextSibling)),t.$parent=t.$$nextSibling=t.$$prevSibling=t.$$childHead=t.$$childTail=t.$root=t.$$watchers=null}(this)}},$eval:function(e,t){return d(e)(this,t)},$evalAsync:function(e,t){v.$$phase||g.length||m.defer(function(){g.length&&v.$digest()},null,"$evalAsync"),g.push({scope:this,fn:d(e),locals:t})},$$postDigest:function(e){$.push(e)},$apply:function(e){try{b("$apply");try{return this.$eval(e)}finally{w()}}catch(e){h(e)}finally{try{v.$digest()}catch(e){throw h(e),e}}},$applyAsync:function(e){var t=this;e&&n.push(function(){t.$eval(e)}),e=d(e),null===k&&(k=m.defer(function(){v.$apply(S)},null,"$applyAsync"))},$on:function(t,n){var r=this.$$listeners[t];r||(this.$$listeners[t]=r=[]),r.push(n);for(var e=this;e.$$listenerCount[t]||(e.$$listenerCount[t]=0),e.$$listenerCount[t]++,e=e.$parent;);var i=this;return function(){var e=r.indexOf(n);-1!==e&&(delete r[e],o(i,1,t))}},$emit:function(e,t){var n,r,i,o=[],a=this,s=!1,u={name:e,targetScope:a,stopPropagation:function(){s=!0},preventDefault:function(){u.defaultPrevented=!0},defaultPrevented:!1},c=U([u],arguments,1);do{for(n=a.$$listeners[e]||o,u.currentScope=a,r=0,i=n.length;r<i;r++)if(n[r])try{n[r].apply(null,c)}catch(e){h(e)}else n.splice(r,1),r--,i--;if(s)break;a=a.$parent}while(a);return u.currentScope=null,u},$broadcast:function(e,t){var n=this,r=this,i={name:e,targetScope:this,preventDefault:function(){i.defaultPrevented=!0},defaultPrevented:!1};if(!this.$$listenerCount[e])return i;for(var o,a,s,u=U([i],arguments,1);n=r;){for(a=0,s=(o=(i.currentScope=n).$$listeners[e]||[]).length;a<s;a++)if(o[a])try{o[a].apply(null,u)}catch(e){h(e)}else o.splice(a,1),a--,s--;if(!(r=n.$$listenerCount[e]&&n.$$childHead||n!==this&&n.$$nextSibling))for(;n!==this&&!(r=n.$$nextSibling);)n=n.$parent}return i.currentScope=null,i}};var v=new i,g=v.$$asyncQueue=[],$=v.$$postDigestQueue=[],n=v.$$applyAsyncQueue=[],y=0;return v;function b(e){if(v.$$phase)throw E("inprog","{0} already in progress",v.$$phase);v.$$phase=e}function w(){v.$$phase=null}function c(e,t){for(;e.$$watchersCount+=t,e=e.$parent;);}function o(e,t,n){for(;e.$$listenerCount[n]-=t,0===e.$$listenerCount[n]&&delete e.$$listenerCount[n],e=e.$parent;);}function _(){}function S(){for(;n.length;)try{n.shift()()}catch(e){h(e)}k=null}}]}function Gr(){var i=/^\s*(https?|s?ftp|mailto|tel|file):/,o=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(e){return T(e)?(i=e,this):i},this.imgSrcSanitizationWhitelist=function(e){return T(e)?(o=e,this):o},this.$get=function(){return function(e,t){var n=t?o:i,r=pi(e&&e.trim()).href;return""===r||r.match(n)?e:"unsafe:"+r}}}Ar.prototype={compile:function(e){var i=this;this.state={nextId:0,filters:{},fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},jr(e,i.$filter);var t,n="";if(this.stage="assign",t=Tr(e)){this.state.computing="assign";var r=this.nextId();this.recurse(t,r),this.return_(r),n="fn.assign="+this.generateFunction("assign","s,v,l")}var o=Pr(e.body);i.stage="inputs",ge(o,function(e,t){var n="fn"+t;i.state[n]={vars:[],body:[],own:{}},i.state.computing=n;var r=i.nextId();i.recurse(e,r),i.return_(r),i.state.inputs.push({name:n,isPure:e.isPure}),e.watchId=t}),this.state.computing="fn",this.stage="main",this.recurse(e);var a='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+n+this.watchFns()+"return fn;",s=new Function("$filter","getStringValue","ifDefined","plus",a)(this.$filter,br,Er,Cr);return this.state=this.stage=void 0,s},USE:"use",STRICT:"strict",watchFns:function(){var t=[],e=this.state.inputs,n=this;return ge(e,function(e){t.push("var "+e.name+"="+n.generateFunction(e.name,"s")),e.isPure&&t.push(e.name,".isPure="+JSON.stringify(e.isPure)+";")}),e.length&&t.push("fn.inputs=["+e.map(function(e){return e.name}).join(",")+"];"),t.join("")},generateFunction:function(e,t){return"function("+t+"){"+this.varsPrefix(e)+this.body(e)+"};"},filterPrefix:function(){var n=[],r=this;return ge(this.state.filters,function(e,t){n.push(e+"=$filter("+r.escape(t)+")")}),n.length?"var "+n.join(",")+";":""},varsPrefix:function(e){return this.state[e].vars.length?"var "+this.state[e].vars.join(",")+";":""},body:function(e){return this.state[e].body.join("")},recurse:function(n,t,e,r,i,o){var a,s,u,c,l,f=this;if(r=r||be,!o&&T(n.watchId))return t=t||this.nextId(),void this.if_("i",this.lazyAssign(t,this.computedMember("i",n.watchId)),this.lazyRecurse(n,t,e,r,i,!0));switch(n.type){case xr.Program:ge(n.body,function(e,t){f.recurse(e.expression,void 0,void 0,function(e){s=e}),t!==n.body.length-1?f.current().body.push(s,";"):f.return_(s)});break;case xr.Literal:c=this.escape(n.value),this.assign(t,c),r(t||c);break;case xr.UnaryExpression:this.recurse(n.argument,void 0,void 0,function(e){s=e}),c=n.operator+"("+this.ifDefined(s,0)+")",this.assign(t,c),r(c);break;case xr.BinaryExpression:this.recurse(n.left,void 0,void 0,function(e){a=e}),this.recurse(n.right,void 0,void 0,function(e){s=e}),c="+"===n.operator?this.plus(a,s):"-"===n.operator?this.ifDefined(a,0)+n.operator+this.ifDefined(s,0):"("+a+")"+n.operator+"("+s+")",this.assign(t,c),r(c);break;case xr.LogicalExpression:t=t||this.nextId(),f.recurse(n.left,t),f.if_("&&"===n.operator?t:f.not(t),f.lazyRecurse(n.right,t)),r(t);break;case xr.ConditionalExpression:t=t||this.nextId(),f.recurse(n.test,t),f.if_(t,f.lazyRecurse(n.alternate,t),f.lazyRecurse(n.consequent,t)),r(t);break;case xr.Identifier:t=t||this.nextId(),e&&(e.context="inputs"===f.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",n.name)+"?l:s"),e.computed=!1,e.name=n.name),f.if_("inputs"===f.stage||f.not(f.getHasOwnProperty("l",n.name)),function(){f.if_("inputs"===f.stage||"s",function(){i&&1!==i&&f.if_(f.isNull(f.nonComputedMember("s",n.name)),f.lazyAssign(f.nonComputedMember("s",n.name),"{}")),f.assign(t,f.nonComputedMember("s",n.name))})},t&&f.lazyAssign(t,f.nonComputedMember("l",n.name))),r(t);break;case xr.MemberExpression:a=e&&(e.context=this.nextId())||this.nextId(),t=t||this.nextId(),f.recurse(n.object,a,void 0,function(){f.if_(f.notNull(a),function(){n.computed?(s=f.nextId(),f.recurse(n.property,s),f.getStringValue(s),i&&1!==i&&f.if_(f.not(f.computedMember(a,s)),f.lazyAssign(f.computedMember(a,s),"{}")),c=f.computedMember(a,s),f.assign(t,c),e&&(e.computed=!0,e.name=s)):(i&&1!==i&&f.if_(f.isNull(f.nonComputedMember(a,n.property.name)),f.lazyAssign(f.nonComputedMember(a,n.property.name),"{}")),c=f.nonComputedMember(a,n.property.name),f.assign(t,c),e&&(e.computed=!1,e.name=n.property.name))},function(){f.assign(t,"undefined")}),r(t)},!!i);break;case xr.CallExpression:t=t||this.nextId(),n.filter?(s=f.filter(n.callee.name),u=[],ge(n.arguments,function(e){var t=f.nextId();f.recurse(e,t),u.push(t)}),c=s+"("+u.join(",")+")",f.assign(t,c),r(t)):(s=f.nextId(),a={},u=[],f.recurse(n.callee,s,a,function(){f.if_(f.notNull(s),function(){ge(n.arguments,function(e){f.recurse(e,n.constant?void 0:f.nextId(),void 0,function(e){u.push(e)})}),c=a.name?f.member(a.context,a.name,a.computed)+"("+u.join(",")+")":s+"("+u.join(",")+")",f.assign(t,c)},function(){f.assign(t,"undefined")}),r(t)}));break;case xr.AssignmentExpression:s=this.nextId(),a={},this.recurse(n.left,void 0,a,function(){f.if_(f.notNull(a.context),function(){f.recurse(n.right,s),c=f.member(a.context,a.name,a.computed)+n.operator+s,f.assign(t,c),r(t||c)})},1);break;case xr.ArrayExpression:u=[],ge(n.elements,function(e){f.recurse(e,n.constant?void 0:f.nextId(),void 0,function(e){u.push(e)})}),c="["+u.join(",")+"]",this.assign(t,c),r(t||c);break;case xr.ObjectExpression:l=!(u=[]),ge(n.properties,function(e){e.computed&&(l=!0)}),l?(t=t||this.nextId(),this.assign(t,"{}"),ge(n.properties,function(e){e.computed?(a=f.nextId(),f.recurse(e.key,a)):a=e.key.type===xr.Identifier?e.key.name:""+e.key.value,s=f.nextId(),f.recurse(e.value,s),f.assign(f.member(t,a,e.computed),s)})):(ge(n.properties,function(t){f.recurse(t.value,n.constant?void 0:f.nextId(),void 0,function(e){u.push(f.escape(t.key.type===xr.Identifier?t.key.name:""+t.key.value)+":"+e)})}),c="{"+u.join(",")+"}",this.assign(t,c)),r(t||c);break;case xr.ThisExpression:this.assign(t,"s"),r(t||"s");break;case xr.LocalsExpression:this.assign(t,"l"),r(t||"l");break;case xr.NGValueParameter:this.assign(t,"v"),r(t||"v")}},getHasOwnProperty:function(e,t){var n=e+"."+t,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,e+"&&("+this.escape(t)+" in "+e+")")),r[n]},assign:function(e,t){if(e)return this.current().body.push(e,"=",t,";"),e},filter:function(e){return this.state.filters.hasOwnProperty(e)||(this.state.filters[e]=this.nextId(!0)),this.state.filters[e]},ifDefined:function(e,t){return"ifDefined("+e+","+this.escape(t)+")"},plus:function(e,t){return"plus("+e+","+t+")"},return_:function(e){this.current().body.push("return ",e,";")},if_:function(e,t,n){if(!0===e)t();else{var r=this.current().body;r.push("if(",e,"){"),t(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(e){return"!("+e+")"},isNull:function(e){return e+"==null"},notNull:function(e){return e+"!=null"},nonComputedMember:function(e,t){return/^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(t)?e+"."+t:e+'["'+t.replace(/[^$_a-zA-Z0-9]/g,this.stringEscapeFn)+'"]'},computedMember:function(e,t){return e+"["+t+"]"},member:function(e,t,n){return n?this.computedMember(e,t):this.nonComputedMember(e,t)},getStringValue:function(e){this.assign(e,"getStringValue("+e+")")},lazyRecurse:function(e,t,n,r,i,o){var a=this;return function(){a.recurse(e,t,n,r,i,o)}},lazyAssign:function(e,t){var n=this;return function(){n.assign(e,t)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)},escape:function(e){if(xe(e))return"'"+e.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(S(e))return e.toString();if(!0===e)return"true";if(!1===e)return"false";if(null===e)return"null";if(void 0===e)return"undefined";throw $r("esc","IMPOSSIBLE")},nextId:function(e,t){var n="v"+this.state.nextId++;return e||this.current().vars.push(n+(t?"="+t:"")),n},current:function(){return this.state[this.state.computing]}},Mr.prototype={compile:function(e){var t,r,i=this;jr(e,i.$filter),(t=Tr(e))&&(r=this.recurse(t));var o,n=Pr(e.body);n&&(o=[],ge(n,function(e,t){var n=i.recurse(e);n.isPure=e.isPure,e.input=n,o.push(n),e.watchId=t}));var a=[];ge(e.body,function(e){a.push(i.recurse(e.expression))});var s=0===e.body.length?be:1===e.body.length?a[0]:function(t,n){var r;return ge(a,function(e){r=e(t,n)}),r};return r&&(s.assign=function(e,t,n){return r(e,n,t)}),o&&(s.inputs=o),s},recurse:function(e,u,t){var a,c,l,n=this;if(e.input)return this.inputs(e.input,e.watchId);switch(e.type){case xr.Literal:return this.value(e.value,u);case xr.UnaryExpression:return c=this.recurse(e.argument),this["unary"+e.operator](c,u);case xr.BinaryExpression:case xr.LogicalExpression:return a=this.recurse(e.left),c=this.recurse(e.right),this["binary"+e.operator](a,c,u);case xr.ConditionalExpression:return this["ternary?:"](this.recurse(e.test),this.recurse(e.alternate),this.recurse(e.consequent),u);case xr.Identifier:return n.identifier(e.name,u,t);case xr.MemberExpression:return a=this.recurse(e.object,!1,!!t),e.computed||(c=e.property.name),e.computed&&(c=this.recurse(e.property)),e.computed?this.computedMember(a,c,u,t):this.nonComputedMember(a,c,u,t);case xr.CallExpression:return l=[],ge(e.arguments,function(e){l.push(n.recurse(e))}),e.filter&&(c=this.$filter(e.callee.name)),e.filter||(c=this.recurse(e.callee,!0)),e.filter?function(e,t,n,r){for(var i=[],o=0;o<l.length;++o)i.push(l[o](e,t,n,r));var a=c.apply(void 0,i,r);return u?{context:void 0,name:void 0,value:a}:a}:function(e,t,n,r){var i,o=c(e,t,n,r);if(null!=o.value){for(var a=[],s=0;s<l.length;++s)a.push(l[s](e,t,n,r));i=o.value.apply(o.context,a)}return u?{value:i}:i};case xr.AssignmentExpression:return a=this.recurse(e.left,!0,1),c=this.recurse(e.right),function(e,t,n,r){var i=a(e,t,n,r),o=c(e,t,n,r);return i.context[i.name]=o,u?{value:o}:o};case xr.ArrayExpression:return l=[],ge(e.elements,function(e){l.push(n.recurse(e))}),function(e,t,n,r){for(var i=[],o=0;o<l.length;++o)i.push(l[o](e,t,n,r));return u?{value:i}:i};case xr.ObjectExpression:return l=[],ge(e.properties,function(e){e.computed?l.push({key:n.recurse(e.key),computed:!0,value:n.recurse(e.value)}):l.push({key:e.key.type===xr.Identifier?e.key.name:""+e.key.value,computed:!1,value:n.recurse(e.value)})}),function(e,t,n,r){for(var i={},o=0;o<l.length;++o)l[o].computed?i[l[o].key(e,t,n,r)]=l[o].value(e,t,n,r):i[l[o].key]=l[o].value(e,t,n,r);return u?{value:i}:i};case xr.ThisExpression:return function(e){return u?{value:e}:e};case xr.LocalsExpression:return function(e,t){return u?{value:t}:t};case xr.NGValueParameter:return function(e,t,n){return u?{value:n}:n}}},"unary+":function(o,a){return function(e,t,n,r){var i=o(e,t,n,r);return i=T(i)?+i:0,a?{value:i}:i}},"unary-":function(o,a){return function(e,t,n,r){var i=o(e,t,n,r);return i=T(i)?-i:-0,a?{value:i}:i}},"unary!":function(o,a){return function(e,t,n,r){var i=!o(e,t,n,r);return a?{value:i}:i}},"binary+":function(o,a,s){return function(e,t,n,r){var i=Cr(o(e,t,n,r),a(e,t,n,r));return s?{value:i}:i}},"binary-":function(s,u,c){return function(e,t,n,r){var i=s(e,t,n,r),o=u(e,t,n,r),a=(T(i)?i:0)-(T(o)?o:0);return c?{value:a}:a}},"binary*":function(o,a,s){return function(e,t,n,r){var i=o(e,t,n,r)*a(e,t,n,r);return s?{value:i}:i}},"binary/":function(o,a,s){return function(e,t,n,r){var i=o(e,t,n,r)/a(e,t,n,r);return s?{value:i}:i}},"binary%":function(o,a,s){return function(e,t,n,r){var i=o(e,t,n,r)%a(e,t,n,r);return s?{value:i}:i}},"binary===":function(o,a,s){return function(e,t,n,r){var i=o(e,t,n,r)===a(e,t,n,r);return s?{value:i}:i}},"binary!==":function(o,a,s){return function(e,t,n,r){var i=o(e,t,n,r)!==a(e,t,n,r);return s?{value:i}:i}},"binary==":function(o,a,s){return function(e,t,n,r){var i=o(e,t,n,r)==a(e,t,n,r);return s?{value:i}:i}},"binary!=":function(o,a,s){return function(e,t,n,r){var i=o(e,t,n,r)!=a(e,t,n,r);return s?{value:i}:i}},"binary<":function(o,a,s){return function(e,t,n,r){var i=o(e,t,n,r)<a(e,t,n,r);return s?{value:i}:i}},"binary>":function(o,a,s){return function(e,t,n,r){var i=o(e,t,n,r)>a(e,t,n,r);return s?{value:i}:i}},"binary<=":function(o,a,s){return function(e,t,n,r){var i=o(e,t,n,r)<=a(e,t,n,r);return s?{value:i}:i}},"binary>=":function(o,a,s){return function(e,t,n,r){var i=o(e,t,n,r)>=a(e,t,n,r);return s?{value:i}:i}},"binary&&":function(o,a,s){return function(e,t,n,r){var i=o(e,t,n,r)&&a(e,t,n,r);return s?{value:i}:i}},"binary||":function(o,a,s){return function(e,t,n,r){var i=o(e,t,n,r)||a(e,t,n,r);return s?{value:i}:i}},"ternary?:":function(o,a,s,u){return function(e,t,n,r){var i=o(e,t,n,r)?a(e,t,n,r):s(e,t,n,r);return u?{value:i}:i}},value:function(e,t){return function(){return t?{context:void 0,name:void 0,value:e}:e}},identifier:function(a,s,u){return function(e,t,n,r){var i=t&&a in t?t:e;u&&1!==u&&i&&null==i[a]&&(i[a]={});var o=i?i[a]:void 0;return s?{context:i,name:a,value:o}:o}},computedMember:function(s,u,c,l){return function(e,t,n,r){var i,o,a=s(e,t,n,r);return null!=a&&(i=br(i=u(e,t,n,r)),l&&1!==l&&a&&!a[i]&&(a[i]={}),o=a[i]),c?{context:a,name:i,value:o}:o}},nonComputedMember:function(a,s,u,c){return function(e,t,n,r){var i=a(e,t,n,r);c&&1!==c&&i&&null==i[s]&&(i[s]={});var o=null!=i?i[s]:void 0;return u?{context:i,name:s,value:o}:o}},inputs:function(i,o){return function(e,t,n,r){return r?r[o]:i(e,t,n)}}},Nr.prototype={constructor:Nr,parse:function(e){var t,n=this.getAst(e),r=this.astCompiler.compile(n.ast);return r.literal=0===(t=n.ast).body.length||1===t.body.length&&(t.body[0].expression.type===xr.Literal||t.body[0].expression.type===xr.ArrayExpression||t.body[0].expression.type===xr.ObjectExpression),r.constant=n.ast.constant,r.oneTime=n.oneTime,r},getAst:function(e){var t=!1;return":"===(e=e.trim()).charAt(0)&&":"===e.charAt(1)&&(t=!0,e=e.substring(2)),{ast:this.ast.ast(e),oneTime:t}}};var Wr=O("$sce"),Kr={HTML:"html",CSS:"css",MEDIA_URL:"mediaUrl",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Jr=/_([a-z])/g;function Yr(e){return e.replace(Jr,tt)}function Qr(e){var t=[];return T(e)&&ge(e,function(e){t.push(function(e){if("self"===e)return e;if(xe(e)){if(-1<e.indexOf("***"))throw Wr("iwcard","Illegal sequence *** in string matcher.  String: {0}",e);return e=M(e).replace(/\\\*\\\*/g,".*").replace(/\\\*/g,"[^:/.?&;]*"),new RegExp("^"+e+"$")}if(E(e))return new RegExp("^"+e.source+"$");throw Wr("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}(e))}),t}function Zr(){this.SCE_CONTEXTS=Kr;var s=["self"],u=[];this.resourceUrlWhitelist=function(e){return arguments.length&&(s=Qr(e)),s},this.resourceUrlBlacklist=function(e){return arguments.length&&(u=Qr(e)),u},this.$get=["$injector","$$sanitizeUri",function(e,r){var i=function(e){throw Wr("unsafe","Attempting to use an unsafe value in a safe context.")};function o(e,t){return"self"===e?hi(t,li)||hi(t,fe.document.baseURI?fe.document.baseURI:(ui||((ui=fe.document.createElement("a")).href=".",ui=ui.cloneNode(!1)),ui.href)):!!e.exec(t.href)}function t(e){var t=function(e){this.$$unwrapTrustedValue=function(){return e}};return e&&(t.prototype=new e),t.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},t.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},t}e.has("$sanitize")&&(i=e.get("$sanitize"));var n=t(),a={};return a[Kr.HTML]=t(n),a[Kr.CSS]=t(n),a[Kr.MEDIA_URL]=t(n),a[Kr.URL]=t(a[Kr.MEDIA_URL]),a[Kr.JS]=t(n),a[Kr.RESOURCE_URL]=t(a[Kr.URL]),{trustAs:function(e,t){var n=a.hasOwnProperty(e)?a[e]:null;if(!n)throw Wr("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",e,t);if(null===t||_e(t)||""===t)return t;if("string"!=typeof t)throw Wr("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",e);return new n(t)},getTrusted:function(e,t){if(null===t||_e(t)||""===t)return t;var n=a.hasOwnProperty(e)?a[e]:null;if(n&&t instanceof n)return t.$$unwrapTrustedValue();if(ke(t.$$unwrapTrustedValue)&&(t=t.$$unwrapTrustedValue()),e===Kr.MEDIA_URL||e===Kr.URL)return r(t.toString(),e===Kr.MEDIA_URL);if(e===Kr.RESOURCE_URL){if(function(e){var t,n,r=pi(e.toString()),i=!1;for(t=0,n=s.length;t<n;t++)if(o(s[t],r)){i=!0;break}if(i)for(t=0,n=u.length;t<n;t++)if(o(u[t],r)){i=!1;break}return i}(t))return t;throw Wr("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",t.toString())}if(e===Kr.HTML)return i(t);throw Wr("unsafe","Attempting to use an unsafe value in a safe context.")},valueOf:function(e){return e instanceof n?e.$$unwrapTrustedValue():e}}}]}function Xr(){var t=!0;this.enabled=function(e){return arguments.length&&(t=!!e),t},this.$get=["$parse","$sceDelegate",function(r,e){if(t&&pe<8)throw Wr("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var i=Ge(Kr);i.isEnabled=function(){return t},i.trustAs=e.trustAs,i.getTrusted=e.getTrusted,i.valueOf=e.valueOf,t||(i.trustAs=i.getTrusted=function(e,t){return t},i.valueOf=we),i.parseAs=function(t,e){var n=r(e);return n.literal&&n.constant?n:r(e,function(e){return i.getTrusted(t,e)})};var o=i.parseAs,a=i.getTrusted,s=i.trustAs;return ge(Kr,function(t,e){var n=me(e);i[Yr("parse_as_"+n)]=function(e){return o(t,e)},i[Yr("get_trusted_"+n)]=function(e){return a(t,e)},i[Yr("trust_as_"+n)]=function(e){return s(t,e)}}),i}]}function ei(){this.$get=["$window","$document",function(e,t){var n={},r=!(!(e.nw&&e.nw.process)&&e.chrome&&(e.chrome.app&&e.chrome.app.runtime||!e.chrome.app&&e.chrome.runtime&&e.chrome.runtime.id))&&e.history&&e.history.pushState,i=b((/android (\d+)/.exec(me((e.navigator||{}).userAgent))||[])[1]),o=/Boxee/i.test((e.navigator||{}).userAgent),a=t[0]||{},s=a.body&&a.body.style,u=!1,c=!1;return s&&(u=!!("transition"in s||"webkitTransition"in s),c=!!("animation"in s||"webkitAnimation"in s)),{history:!(!r||i<4||o),hasEvent:function(e){if("input"===e&&pe)return!1;if(_e(n[e])){var t=a.createElement("div");n[e]="on"+e in t}return n[e]},csp:D(),transitions:u,animations:c,android:i}}]}function ti(){this.$get=R(function(e){return new ni(e)})}function ni(s){var u={},r=[],c=this.ALL_TASKS_TYPE="$$all$$",l=this.DEFAULT_TASK_TYPE="$$default$$";function f(){var e=r.pop();return e&&e.cb}function p(e){for(var t=r.length-1;0<=t;--t){var n=r[t];if(n.type===e)return r.splice(t,1),n.cb}}this.completeTask=function(e,t){t=t||l;try{e()}finally{u[a=(a=t)||l]&&(u[a]--,u[c]--);var n=u[t],r=u[c];if(!r||!n)for(var i,o=r?p:f;i=o(t);)try{i()}catch(e){s.error(e)}}var a},this.incTaskCount=function(e){u[e=e||l]=(u[e]||0)+1,u[c]=(u[c]||0)+1},this.notifyWhenNoPendingTasks=function(e,t){u[t=t||c]?r.push({type:t,cb:e}):e()}}var ri=O("$templateRequest");function ii(){var c;this.httpOptions=function(e){return e?(c=e,this):c},this.$get=["$exceptionHandler","$templateCache","$http","$q","$sce",function(r,i,o,a,s){function u(t,n){u.totalPendingRequests++,xe(t)&&!_e(i.get(t))||(t=s.getTrustedResourceUrl(t));var e=o.defaults&&o.defaults.transformResponse;return Ee(e)?e=e.filter(function(e){return e!==qn}):e===qn&&(e=null),o.get(t,$e({cache:i,transformResponse:e},c)).finally(function(){u.totalPendingRequests--}).then(function(e){return i.put(t,e.data)},function(e){n||(e=ri("tpload","Failed to load template: {0} (HTTP status: {1} {2})",t,e.status,e.statusText),r(e));return a.reject(e)})}return u.totalPendingRequests=0,u}]}function oi(){this.$get=["$rootScope","$browser","$location",function(t,n,r){var e={findBindings:function(e,n,r){var t=e.getElementsByClassName("ng-binding"),i=[];return ge(t,function(t){var e=y.element(t).data("$binding");e&&ge(e,function(e){r?new RegExp("(^|\\s)"+M(n)+"(\\s|\\||$)").test(e)&&i.push(t):-1!==e.indexOf(n)&&i.push(t)})}),i},findModels:function(e,t,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o="["+r[i]+"model"+(n?"=":"*=")+'"'+t+'"]',a=e.querySelectorAll(o);if(a.length)return a}},getLocation:function(){return r.url()},setLocation:function(e){e!==r.url()&&(r.url(e),t.$digest())},whenStable:function(e){n.notifyWhenNoOutstandingRequests(e)}};return e}]}var ai=O("$timeout");function si(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(u,c,l,f,p){var h={};function e(e,t,n){ke(e)||(n=t,t=e,e=be);var r,i=Ne(arguments,3),o=T(n)&&!n,a=(o?f:l).defer(),s=a.promise;return r=c.defer(function(){try{a.resolve(e.apply(null,i))}catch(e){a.reject(e),p(e)}finally{delete h[s.$$timeoutId]}o||u.$apply()},t,"$timeout"),s.$$timeoutId=r,h[r]=a,s}return e.cancel=function(e){if(!e)return!1;if(!e.hasOwnProperty("$$timeoutId"))throw ai("badprom","`$timeout.cancel()` called with a promise that was not generated by `$timeout()`.");if(!h.hasOwnProperty(e.$$timeoutId))return!1;var t=e.$$timeoutId,n=h[t];return Hr(n.promise),n.reject("canceled"),delete h[t],c.defer.cancel(t)},e}]}var ui,ci=fe.document.createElement("a"),li=pi(fe.location.href);ci.href="http://[::1]";var fi="[::1]"===ci.hostname;function pi(e){if(!xe(e))return e;var t=e;pe&&(ci.setAttribute("href",t),t=ci.href),ci.setAttribute("href",t);var n=ci.hostname;return!fi&&-1<n.indexOf(":")&&(n="["+n+"]"),{href:ci.href,protocol:ci.protocol?ci.protocol.replace(/:$/,""):"",host:ci.host,search:ci.search?ci.search.replace(/^\?/,""):"",hash:ci.hash?ci.hash.replace(/^#/,""):"",hostname:n,port:ci.port,pathname:"/"===ci.pathname.charAt(0)?ci.pathname:"/"+ci.pathname}}function hi(e,t){return e=pi(e),t=pi(t),e.protocol===t.protocol&&e.host===t.host}function di(){this.$get=R(fe)}function mi(e){var a=e[0]||{},s={},u="";function c(t){try{return decodeURIComponent(t)}catch(e){return t}}return function(){var e,t,n,r,i,o=function(e){try{return e.cookie||""}catch(e){return""}}(a);if(o!==u)for(e=(u=o).split("; "),s={},n=0;n<e.length;n++)0<(r=(t=e[n]).indexOf("="))&&(i=c(t.substring(0,r)),_e(s[i])&&(s[i]=c(t.substring(r+1))));return s}}function vi(){this.$get=mi}function gi(r){var i="Filter";function o(e,t){if(Se(e)){var n={};return ge(e,function(e,t){n[t]=o(t,e)}),n}return r.factory(e+i,t)}this.register=o,this.$get=["$injector",function(t){return function(e){return t.get(e+i)}}],o("currency",xi),o("date",Li),o("filter",$i),o("json",Vi),o("limitTo",qi),o("lowercase",Ii),o("number",Ei),o("orderBy",Fi),o("uppercase",Di)}function $i(){return function(e,t,n,r){if(!N(e)){if(null==e)return e;throw O("filter")("notarray","Expected array but received: {0}",e)}var i,o;switch(r=r||"$",bi(t)){case"function":i=t;break;case"boolean":case"null":case"number":case"string":o=!0;case"object":i=function(t,n,r,i){var o=Se(t)&&r in t;!0===n?n=Me:ke(n)||(n=function(e,t){return!_e(e)&&(null===e||null===t?e===t:!(Se(t)||Se(e)&&!w(e))&&(e=me(""+e),t=me(""+t),-1!==e.indexOf(t)))});return function(e){return o&&!Se(e)?yi(e,t[r],n,r,!1):yi(e,t,n,r,i)}}(t,n,r,o);break;default:return e}return Array.prototype.filter.call(e,i)}}function yi(e,t,n,r,i,o){var a=bi(e),s=bi(t);if("string"===s&&"!"===t.charAt(0))return!yi(e,t.substring(1),n,r,i);if(Ee(e))return e.some(function(e){return yi(e,t,n,r,i)});switch(a){case"object":var u;if(i){for(u in e)if(u.charAt&&"$"!==u.charAt(0)&&yi(e[u],t,n,r,!0))return!0;return!o&&yi(e,t,n,r,!1)}if("object"!==s)return n(e,t);for(u in t){var c=t[u];if(!ke(c)&&!_e(c)){var l=u===r;if(!yi(l?e:e[u],c,n,r,l,l))return!1}}return!0;case"function":return!1;default:return n(e,t)}}function bi(e){return null===e?"null":typeof e}mi.$inject=["$document"],gi.$inject=["$provide"];var wi=22,_i=".",Si="0";function xi(e){var i=e.NUMBER_FORMATS;return function(e,t,n){_e(t)&&(t=i.CURRENCY_SYM),_e(n)&&(n=i.PATTERNS[1].maxFrac);var r=t?/\u00A4/g:/\s*\u00A4\s*/g;return null==e?e:Ci(e,i.PATTERNS[1],i.GROUP_SEP,i.DECIMAL_SEP,n).replace(r,t)}}function Ei(e){var n=e.NUMBER_FORMATS;return function(e,t){return null==e?e:Ci(e,n.PATTERNS[0],n.GROUP_SEP,n.DECIMAL_SEP,t)}}function Ci(e,t,n,r,i){if(!xe(e)&&!S(e)||isNaN(e))return"";var o,a=!isFinite(e),s=!1,u=Math.abs(e)+"",c="";if(a)c="â";else{(function(e,t,n,r){var i=e.d,o=i.length-e.i,a=(t=_e(t)?Math.min(Math.max(n,o),r):+t)+e.i,s=i[a];if(0<a){i.splice(Math.max(e.i,a));for(var u=a;u<i.length;u++)i[u]=0}else{o=Math.max(0,o),e.i=1,i.length=Math.max(1,a=t+1),i[0]=0;for(var c=1;c<a;c++)i[c]=0}if(5<=s)if(a-1<0){for(var l=0;a<l;l--)i.unshift(0),e.i++;i.unshift(1),e.i++}else i[a-1]++;for(;o<Math.max(0,t);o++)i.push(0);var f=i.reduceRight(function(e,t,n,r){return t+=e,r[n]=t%10,Math.floor(t/10)},0);f&&(i.unshift(f),e.i++)})(o=function(e){var t,n,r,i,o,a=0;for(-1<(n=e.indexOf(_i))&&(e=e.replace(_i,"")),0<(r=e.search(/e/i))?(n<0&&(n=r),n+=+e.slice(r+1),e=e.substring(0,r)):n<0&&(n=e.length),r=0;e.charAt(r)===Si;r++);if(r===(o=e.length))t=[0],n=1;else{for(o--;e.charAt(o)===Si;)o--;for(n-=r,t=[],i=0;r<=o;r++,i++)t[i]=+e.charAt(r)}return wi<n&&(t=t.splice(0,wi-1),a=n-1,n=1),{d:t,e:a,i:n}}(u),i,t.minFrac,t.maxFrac);var l=o.d,f=o.i,p=o.e,h=[];for(s=l.reduce(function(e,t){return e&&!t},!0);f<0;)l.unshift(0),f++;0<f?h=l.splice(f,l.length):(h=l,l=[0]);var d=[];for(l.length>=t.lgSize&&d.unshift(l.splice(-t.lgSize,l.length).join(""));l.length>t.gSize;)d.unshift(l.splice(-t.gSize,l.length).join(""));l.length&&d.unshift(l.join("")),c=d.join(n),h.length&&(c+=r+h.join("")),p&&(c+="e+"+p)}return e<0&&!s?t.negPre+c+t.negSuf:t.posPre+c+t.posSuf}function ki(e,t,n,r){var i="";for((e<0||r&&e<=0)&&(r?e=1-e:(e=-e,i="-")),e=""+e;e.length<t;)e=Si+e;return n&&(e=e.substr(e.length-t)),i+e}function Oi(n,r,i,o,a){return i=i||0,function(e){var t=e["get"+n]();return(0<i||-i<t)&&(t+=i),0===t&&-12===i&&(t=12),ki(t,r,o,a)}}function ji(r,i,o){return function(e,t){var n=e["get"+r]();return t[p((o?"STANDALONE":"")+(i?"SHORT":"")+r)][n]}}function Pi(e){var t=new Date(e,0,1).getDay();return new Date(e,0,(t<=4?5:12)-t)}function Ri(i){return function(e){var t,n=Pi(e.getFullYear()),r=+(t=e,new Date(t.getFullYear(),t.getMonth(),t.getDate()+(4-t.getDay())))-+n;return ki(1+Math.round(r/6048e5),i)}}function Ti(e,t){return e.getFullYear()<=0?t.ERAS[0]:t.ERAS[1]}xi.$inject=["$locale"];var Ai={yyyy:Oi("FullYear",4,0,!(Ei.$inject=["$locale"]),!0),yy:Oi("FullYear",2,0,!0,!0),y:Oi("FullYear",1,0,!1,!0),MMMM:ji("Month"),MMM:ji("Month",!0),MM:Oi("Month",2,1),M:Oi("Month",1,1),LLLL:ji("Month",!1,!0),dd:Oi("Date",2),d:Oi("Date",1),HH:Oi("Hours",2),H:Oi("Hours",1),hh:Oi("Hours",2,-12),h:Oi("Hours",1,-12),mm:Oi("Minutes",2),m:Oi("Minutes",1),ss:Oi("Seconds",2),s:Oi("Seconds",1),sss:Oi("Milliseconds",3),EEEE:ji("Day"),EEE:ji("Day",!0),a:function(e,t){return e.getHours()<12?t.AMPMS[0]:t.AMPMS[1]},Z:function(e,t,n){var r=-1*n,i=0<=r?"+":"";return i+=ki(Math[0<r?"floor":"ceil"](r/60),2)+ki(Math.abs(r%60),2)},ww:Ri(2),w:Ri(1),G:Ti,GG:Ti,GGG:Ti,GGGG:function(e,t){return e.getFullYear()<=0?t.ERANAMES[0]:t.ERANAMES[1]}},Mi=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\s\S]*)/,Ni=/^-?\d+$/;function Li(u){var f=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(t,e,n){var r,i,o="",a=[];if(e=e||"mediumDate",e=u.DATETIME_FORMATS[e]||e,xe(t)&&(t=Ni.test(t)?b(t):function(e){var t;if(t=e.match(f)){var n=new Date(0),r=0,i=0,o=t[8]?n.setUTCFullYear:n.setFullYear,a=t[8]?n.setUTCHours:n.setHours;t[9]&&(r=b(t[9]+t[10]),i=b(t[9]+t[11])),o.call(n,b(t[1]),b(t[2])-1,b(t[3]));var s=b(t[4]||0)-r,u=b(t[5]||0)-i,c=b(t[6]||0),l=Math.round(1e3*parseFloat("0."+(t[7]||0)));return a.call(n,s,u,c,l),n}return e}(t)),S(t)&&(t=new Date(t)),!x(t)||!isFinite(t.getTime()))return t;for(;e;)e=(i=Mi.exec(e))?(a=U(a,i,1)).pop():(a.push(e),null);var s=t.getTimezoneOffset();return n&&(s=G(n,s),t=K(t,n,!0)),ge(a,function(e){r=Ai[e],o+=r?r(t,u.DATETIME_FORMATS,s):"''"===e?"'":e.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),o}}function Vi(){return function(e,t){return _e(t)&&(t=2),H(e,t)}}Li.$inject=["$locale"];var Ii=R(me),Di=R(p);function qi(){return function(e,t,n){return t=Math.abs(Number(t))===1/0?Number(t):b(t),P(t)?e:(S(e)&&(e=e.toString()),N(e)?(n=(n=!n||isNaN(n)?0:b(n))<0?Math.max(0,e.length+n):n,0<=t?Ui(e,n,n+t):0===n?Ui(e,t,e.length):Ui(e,Math.max(0,n+t),n)):e)}}function Ui(e,t,n){return xe(e)?e.slice(t,n):a.call(e,t,n)}function Fi(u){return function(e,t,n,r){if(null==e)return e;if(!N(e))throw O("orderBy")("notarray","Expected array but received: {0}",e);Ee(t)||(t=[t]),0===t.length&&(t=["+"]);var o=t.map(function(e){var t=1,n=we;if(ke(e))n=e;else if(xe(e)&&("+"!==e.charAt(0)&&"-"!==e.charAt(0)||(t="-"===e.charAt(0)?-1:1,e=e.substring(1)),""!==e&&(n=u(e)).constant)){var r=n();n=function(e){return e[r]}}return{get:n,descending:t}}),a=n?-1:1,s=ke(r)?r:l,i=Array.prototype.map.call(e,function(t,n){return{value:t,tieBreaker:{value:n,type:"number",index:n},predicateValues:o.map(function(e){return function(e,t){var n=typeof e;null===e?n="null":"object"===n&&(e=function(e){if(ke(e.valueOf)&&c(e=e.valueOf()))return e;if(w(e)&&c(e=e.toString()))return e;return e}(e));return{value:e,type:n,index:t}}(e.get(t),n)})}});return i.sort(function(e,t){for(var n=0,r=o.length;n<r;n++){var i=s(e.predicateValues[n],t.predicateValues[n]);if(i)return i*o[n].descending*a}return(s(e.tieBreaker,t.tieBreaker)||l(e.tieBreaker,t.tieBreaker))*a}),e=i.map(function(e){return e.value})};function c(e){switch(typeof e){case"number":case"boolean":case"string":return!0;default:return!1}}function l(e,t){var n=0,r=e.type,i=t.type;if(r===i){var o=e.value,a=t.value;"string"===r?(o=o.toLowerCase(),a=a.toLowerCase()):"object"===r&&(Se(o)&&(o=e.index),Se(a)&&(a=t.index)),o!==a&&(n=o<a?-1:1)}else n="undefined"===r?1:"undefined"===i?-1:"null"===r?1:"null"===i?-1:r<i?-1:1;return n}}function Hi(e){return ke(e)&&(e={link:e}),e.restrict=e.restrict||"AC",R(e)}Fi.$inject=["$parse"];var zi=R({restrict:"E",compile:function(e,t){if(!t.href&&!t.xlinkHref)return function(e,t){if("a"===t[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===ve.call(t.prop("href"))?"xlink:href":"href";t.on("click",function(e){t.attr(n)||e.preventDefault()})}}}}),Bi={};ge(Rt,function(e,r){if("multiple"!==e){var i=wn("ng-"+r),t=o;"checked"===e&&(t=function(e,t,n){n.ngModel!==n[i]&&o(e,0,n)}),Bi[i]=function(){return{restrict:"A",priority:100,link:t}}}function o(e,t,n){e.$watch(n[i],function(e){n.$set(r,!!e)})}}),ge(At,function(e,i){Bi[i]=function(){return{priority:100,link:function(e,t,n){if("ngPattern"===i&&"/"===n.ngPattern.charAt(0)){var r=n.ngPattern.match(o);if(r)return void n.$set("ngPattern",new RegExp(r[1],r[2]))}e.$watch(n[i],function(e){n.$set(i,e)})}}}}),ge(["src","srcset","href"],function(a){var s=wn("ng-"+a);Bi[s]=["$sce",function(o){return{priority:99,link:function(e,t,n){var r=a,i=a;"href"===a&&"[object SVGAnimatedString]"===ve.call(t.prop("href"))&&(i="xlinkHref",n.$attr[i]="xlink:href",r=null),n.$set(s,o.getTrustedMediaUrl(n[s])),n.$observe(s,function(e){e?(n.$set(i,e),pe&&r&&t.prop(r,n[i])):"href"===a&&n.$set(i,null)})}}}]});var Gi={$addControl:be,$getControls:R([]),$$renameControl:function(e,t){e.$name=t},$removeControl:be,$setValidity:be,$setDirty:be,$setPristine:be,$setSubmitted:be,$$setSubmitted:be},Wi="ng-pending",Ki="ng-submitted";function Ji(e,t,n,r,i){this.$$controls=[],this.$error={},this.$$success={},this.$pending=void 0,this.$name=i(t.name||t.ngForm||"")(n),this.$dirty=!1,this.$pristine=!0,this.$valid=!0,this.$invalid=!1,this.$submitted=!1,this.$$parentForm=Gi,this.$$element=e,this.$$animate=r,Xi(this)}Ji.$inject=["$element","$attrs","$scope","$animate","$interpolate"],Ji.prototype={$rollbackViewValue:function(){ge(this.$$controls,function(e){e.$rollbackViewValue()})},$commitViewValue:function(){ge(this.$$controls,function(e){e.$commitViewValue()})},$addControl:function(e){ue(e.$name,"input"),this.$$controls.push(e),e.$name&&(this[e.$name]=e),e.$$parentForm=this},$getControls:function(){return Ge(this.$$controls)},$$renameControl:function(e,t){var n=e.$name;this[n]===e&&delete this[n],(this[t]=e).$name=t},$removeControl:function(n){n.$name&&this[n.$name]===n&&delete this[n.$name],ge(this.$pending,function(e,t){this.$setValidity(t,null,n)},this),ge(this.$error,function(e,t){this.$setValidity(t,null,n)},this),ge(this.$$success,function(e,t){this.$setValidity(t,null,n)},this),Te(this.$$controls,n),n.$$parentForm=Gi},$setDirty:function(){this.$$animate.removeClass(this.$$element,Yo),this.$$animate.addClass(this.$$element,Qo),this.$dirty=!0,this.$pristine=!1,this.$$parentForm.$setDirty()},$setPristine:function(){this.$$animate.setClass(this.$$element,Yo,Qo+" "+Ki),this.$dirty=!1,this.$pristine=!0,this.$submitted=!1,ge(this.$$controls,function(e){e.$setPristine()})},$setUntouched:function(){ge(this.$$controls,function(e){e.$setUntouched()})},$setSubmitted:function(){for(var e=this;e.$$parentForm&&e.$$parentForm!==Gi;)e=e.$$parentForm;e.$$setSubmitted()},$$setSubmitted:function(){this.$$animate.addClass(this.$$element,Ki),this.$submitted=!0,ge(this.$$controls,function(e){e.$$setSubmitted&&e.$$setSubmitted()})}},eo({clazz:Ji,set:function(e,t,n){var r=e[t];r?-1===r.indexOf(n)&&r.push(n):e[t]=[n]},unset:function(e,t,n){var r=e[t];r&&(Te(r,n),0===r.length&&delete e[t])}});var Yi=function(n){return["$timeout","$parse",function(u,t){return{name:"form",restrict:n?"EAC":"E",require:["form","^^?form"],controller:Ji,compile:function(e,t){e.addClass(Yo).addClass(Ko);var s=t.name?"name":!(!n||!t.ngForm)&&"ngForm";return{pre:function(t,e,n,r){var i=r[0];if(!("action"in n)){var o=function(e){t.$apply(function(){i.$commitViewValue(),i.$setSubmitted()}),e.preventDefault()};e[0].addEventListener("submit",o),e.on("$destroy",function(){u(function(){e[0].removeEventListener("submit",o)},0,!1)})}(r[1]||i.$$parentForm).$addControl(i);var a=s?c(i.$name):be;s&&(a(t,i),n.$observe(s,function(e){i.$name!==e&&(a(t,void 0),i.$$parentForm.$$renameControl(i,e),(a=c(i.$name))(t,i))})),e.on("$destroy",function(){i.$$parentForm.$removeControl(i),a(t,void 0),$e(i,Gi)})}}}};function c(e){return""===e?t('this[""]').assign:t(e).assign||be}}]},Qi=Yi(),Zi=Yi(!0);function Xi(e){e.$$classCache={},e.$$classCache[Jo]=!(e.$$classCache[Ko]=e.$$element.hasClass(Ko))}function eo(e){var t=e.clazz,i=e.set,o=e.unset;function a(e,t,n){n&&!e.$$classCache[t]?(e.$$animate.addClass(e.$$element,t),e.$$classCache[t]=!0):!n&&e.$$classCache[t]&&(e.$$animate.removeClass(e.$$element,t),e.$$classCache[t]=!1)}function s(e,t,n){t=t?"-"+Ie(t,"-"):"",a(e,Ko+t,!0===n),a(e,Jo+t,!1===n)}t.prototype.$setValidity=function(e,t,n){var r;_e(t)?function(e,t,n,r){e[t]||(e[t]={});i(e[t],n,r)}(this,"$pending",e,n):function(e,t,n,r){e[t]&&o(e[t],n,r);to(e[t])&&(e[t]=void 0)}(this,"$pending",e,n),je(t)?t?(o(this.$error,e,n),i(this.$$success,e,n)):(i(this.$error,e,n),o(this.$$success,e,n)):(o(this.$error,e,n),o(this.$$success,e,n)),this.$pending?(a(this,Wi,!0),this.$valid=this.$invalid=void 0,s(this,"",null)):(a(this,Wi,!1),this.$valid=to(this.$error),this.$invalid=!this.$valid,s(this,"",this.$valid)),s(this,e,r=this.$pending&&this.$pending[e]?void 0:!this.$error[e]&&(!!this.$$success[e]||null)),this.$$parentForm.$setValidity(e,r,this)}}function to(e){if(e)for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}var no=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,ro=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,io=/^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/,oo=/^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,ao=/^(\d{4,})-(\d{2})-(\d{2})$/,so=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,uo=/^(\d{4,})-W(\d\d)$/,co=/^(\d{4,})-(\d\d)$/,lo=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,fo="keydown wheel mousedown",po=qe();ge("date,datetime-local,month,time,week".split(","),function(e){po[e]=!0});var ho={text:function(e,t,n,r,i,o){vo(e,t,n,r,i,o),mo(r)},date:$o("date",ao,go(ao,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":$o("datetimelocal",so,go(so,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:$o("time",lo,go(lo,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:$o("week",uo,function(e,t){if(x(e))return e;if(xe(e)){uo.lastIndex=0;var n=uo.exec(e);if(n){var r=+n[1],i=+n[2],o=0,a=0,s=0,u=0,c=Pi(r),l=7*(i-1);return t&&(o=t.getHours(),a=t.getMinutes(),s=t.getSeconds(),u=t.getMilliseconds()),new Date(r,0,c.getDate()+l,o,a,s,u)}}return NaN},"yyyy-Www"),month:$o("month",co,go(co,["yyyy","MM"]),"yyyy-MM"),number:function(e,t,n,r,i,o,a,s){var u;if(yo(e,t,n,r,"number"),bo(r),vo(e,t,n,r,i,o),T(n.min)||n.ngMin){var c=n.min||s(n.ngMin)(e);u=wo(c),r.$validators.min=function(e,t){return r.$isEmpty(t)||_e(u)||u<=t},n.$observe("min",function(e){e!==c&&(u=wo(e),c=e,r.$validate())})}if(T(n.max)||n.ngMax){var l=n.max||s(n.ngMax)(e),f=wo(l);r.$validators.max=function(e,t){return r.$isEmpty(t)||_e(f)||t<=f},n.$observe("max",function(e){e!==l&&(f=wo(e),l=e,r.$validate())})}if(T(n.step)||n.ngStep){var p=n.step||s(n.ngStep)(e),h=wo(p);r.$validators.step=function(e,t){return r.$isEmpty(t)||_e(h)||xo(t,u||0,h)},n.$observe("step",function(e){e!==p&&(h=wo(e),p=e,r.$validate())})}},url:function(e,t,n,r,i,o){vo(e,t,n,r,i,o),mo(r),r.$validators.url=function(e,t){var n=e||t;return r.$isEmpty(n)||ro.test(n)}},email:function(e,t,n,r,i,o){vo(e,t,n,r,i,o),mo(r),r.$validators.email=function(e,t){var n=e||t;return r.$isEmpty(n)||io.test(n)}},radio:function(e,n,r,i){var o=!r.ngTrim||"false"!==Pe(r.ngTrim);_e(r.name)&&n.attr("name",u());n.on("change",function(e){var t;n[0].checked&&(t=r.value,o&&(t=Pe(t)),i.$setViewValue(t,e&&e.type))}),i.$render=function(){var e=r.value;o&&(e=Pe(e)),n[0].checked=e===i.$viewValue},r.$observe("value",i.$render)},range:function(e,r,i,n,t,o){yo(e,r,i,n,"range"),bo(n),vo(e,r,i,n,t,o);var a=n.$$hasNativeValidators&&"range"===r[0].type,s=a?0:void 0,u=a?100:void 0,c=a?1:void 0,l=r[0].validity,f=T(i.min),p=T(i.max),h=T(i.step),d=n.$render;n.$render=a&&T(l.rangeUnderflow)&&T(l.rangeOverflow)?function(){d(),n.$setViewValue(r.val())}:d,f&&(s=wo(i.min),n.$validators.min=a?function(){return!0}:function(e,t){return n.$isEmpty(t)||_e(s)||s<=t},m("min",function(e){if(s=wo(e),P(n.$modelValue))return;if(a){var t=r.val();t<s&&(t=s,r.val(t)),n.$setViewValue(t)}else n.$validate()}));p&&(u=wo(i.max),n.$validators.max=a?function(){return!0}:function(e,t){return n.$isEmpty(t)||_e(u)||t<=u},m("max",function(e){if(u=wo(e),P(n.$modelValue))return;if(a){var t=r.val();u<t&&(r.val(u),t=u<s?s:u),n.$setViewValue(t)}else n.$validate()}));h&&(c=wo(i.step),n.$validators.step=a?function(){return!l.stepMismatch}:function(e,t){return n.$isEmpty(t)||_e(c)||xo(t,s||0,c)},m("step",function(e){if(c=wo(e),P(n.$modelValue))return;a?n.$viewValue!==r.val()&&n.$setViewValue(r.val()):n.$validate()}));function m(e,t){r.attr(e,i[e]);var n=i[e];i.$observe(e,function(e){e!==n&&t(n=e)})}},checkbox:function(e,t,n,r,i,o,a,s){var u=Eo(s,e,"ngTrueValue",n.ngTrueValue,!0),c=Eo(s,e,"ngFalseValue",n.ngFalseValue,!1);t.on("change",function(e){r.$setViewValue(t[0].checked,e&&e.type)}),r.$render=function(){t[0].checked=r.$viewValue},r.$isEmpty=function(e){return!1===e},r.$formatters.push(function(e){return Me(e,u)}),r.$parsers.push(function(e){return e?u:c})},hidden:be,button:be,submit:be,reset:be,file:be};function mo(t){t.$formatters.push(function(e){return t.$isEmpty(e)?e:e.toString()})}function vo(e,r,i,o,t,a){var s,u=me(r[0].type);if(!t.android){var c=!1;r.on("compositionstart",function(){c=!0}),r.on("compositionupdate",function(e){(_e(e.data)||""===e.data)&&(c=!1)}),r.on("compositionend",function(){c=!1,l()})}var l=function(e){if(s&&(a.defer.cancel(s),s=null),!c){var t=r.val(),n=e&&e.type;"password"===u||i.ngTrim&&"false"===i.ngTrim||(t=Pe(t)),(o.$viewValue!==t||""===t&&o.$$hasNativeValidators)&&o.$setViewValue(t,n)}};if(t.hasEvent("input"))r.on("input",l);else{var n=function(e,t,n){s||(s=a.defer(function(){s=null,t&&t.value===n||l(e)}))};r.on("keydown",function(e){var t=e.keyCode;91===t||15<t&&t<19||37<=t&&t<=40||n(e,this,this.value)}),t.hasEvent("paste")&&r.on("paste cut drop",n)}r.on("change",l),po[u]&&o.$$hasNativeValidators&&u===i.type&&r.on(fo,function(e){if(!s){var t=this[f],n=t.badInput,r=t.typeMismatch;s=a.defer(function(){s=null,t.badInput===n&&t.typeMismatch===r||l(e)})}}),o.$render=function(){var e=o.$isEmpty(o.$viewValue)?"":o.$viewValue;r.val()!==e&&r.val(e)}}function go(o,a){return function(e,t){var n,r;if(x(e))return e;if(xe(e)){if('"'===e.charAt(0)&&'"'===e.charAt(e.length-1)&&(e=e.substring(1,e.length-1)),no.test(e))return new Date(e);if(o.lastIndex=0,n=o.exec(e)){n.shift(),r=t?{yyyy:t.getFullYear(),MM:t.getMonth()+1,dd:t.getDate(),HH:t.getHours(),mm:t.getMinutes(),ss:t.getSeconds(),sss:t.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},ge(n,function(e,t){t<a.length&&(r[a[t]]=+e)});var i=new Date(r.yyyy,r.MM-1,r.dd,r.HH,r.mm,r.ss||0,1e3*r.sss||0);return r.yyyy<100&&i.setFullYear(r.yyyy),i}}return NaN}}function $o($,y,b,w){return function(e,t,n,i,r,o,a,s){yo(e,t,n,i,$),vo(0,t,n,i,r,o);var u,c,l="time"===$||"datetimelocal"===$;if(i.$parsers.push(function(e){return i.$isEmpty(e)?null:y.test(e)?g(e,u):void(i.$$parserName=$)}),i.$formatters.push(function(e){if(e&&!x(e))throw ta("datefmt","Expected `{0}` to be a date",e);if(m(e)){u=e;var t=i.$options.getOption("timezone");return t&&(u=K(u,c=t,!0)),function(e,t){var n=w;l&&xe(i.$options.getOption("timeSecondsFormat"))&&(n=w.replace("ss.sss",i.$options.getOption("timeSecondsFormat")).replace(/:$/,""));var r=a("date")(e,n,t);l&&i.$options.getOption("timeStripZeroSeconds")&&(r=r.replace(/(?::00)?(?:\.000)?$/,""));return r}(e,t)}return c=u=null,""}),T(n.min)||n.ngMin){var f=n.min||s(n.ngMin)(e),p=v(f);i.$validators.min=function(e){return!m(e)||_e(p)||b(e)>=p},n.$observe("min",function(e){e!==f&&(p=v(e),f=e,i.$validate())})}if(T(n.max)||n.ngMax){var h=n.max||s(n.ngMax)(e),d=v(h);i.$validators.max=function(e){return!m(e)||_e(d)||b(e)<=d},n.$observe("max",function(e){e!==h&&(d=v(e),h=e,i.$validate())})}function m(e){return e&&!(e.getTime&&e.getTime()!=e.getTime())}function v(e){return T(e)&&!x(e)?g(e)||void 0:e}function g(e,t){var n=i.$options.getOption("timezone");c&&c!==n&&(t=W(t,G(c)));var r=b(e,t);return!isNaN(r)&&n&&(r=K(r,n)),r}}}function yo(e,n,t,r,i){var o=n[0];(r.$$hasNativeValidators=Se(o.validity))&&r.$parsers.push(function(e){var t=n.prop(f)||{};if(!t.badInput&&!t.typeMismatch)return e;r.$$parserName=i})}function bo(t){t.$parsers.push(function(e){return t.$isEmpty(e)?null:oo.test(e)?parseFloat(e):void(t.$$parserName="number")}),t.$formatters.push(function(e){if(!t.$isEmpty(e)){if(!S(e))throw ta("numfmt","Expected `{0}` to be a number",e);e=e.toString()}return e})}function wo(e){return T(e)&&!S(e)&&(e=parseFloat(e)),P(e)?void 0:e}function _o(e){return(0|e)===e}function So(e){var t=e.toString(),n=t.indexOf(".");if(-1!==n)return t.length-n-1;if(-1<e&&e<1){var r=/e-(\d+)$/.exec(t);if(r)return Number(r[1])}return 0}function xo(e,t,n){var r=Number(e),i=!_o(r),o=!_o(t),a=!_o(n);if(i||o||a){var s=i?So(r):0,u=o?So(t):0,c=a?So(n):0,l=Math.max(s,u,c),f=Math.pow(10,l);r*=f,t*=f,n*=f,i&&(r=Math.round(r)),o&&(t=Math.round(t)),a&&(n=Math.round(n))}return(r-t)%n==0}function Eo(e,t,n,r,i){var o;if(T(r)){if(!(o=e(r)).constant)throw ta("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,r);return o(t)}return i}var Co=["$browser","$sniffer","$filter","$parse",function(i,o,a,s){return{restrict:"E",require:["?ngModel"],link:{pre:function(e,t,n,r){r[0]&&(ho[me(n.type)]||ho.text)(e,t,n,r[0],o,i,a,s)}}}}],ko=function(){var o={configurable:!0,enumerable:!1,get:function(){return this.getAttribute("value")||""},set:function(e){this.setAttribute("value",e)}};return{restrict:"E",priority:200,compile:function(e,t){if("hidden"===me(t.type))return{pre:function(e,t,n,r){var i=t[0];i.parentNode&&i.parentNode.insertBefore(i,i.nextSibling),Object.defineProperty&&Object.defineProperty(i,"value",o)}}}}},Oo=/^(true|false|\d+)$/,jo=function(){function r(e,t,n){var r=T(n)?n:9===pe?"":null;e.prop("value",r),t.$set("value",n)}return{restrict:"A",priority:100,compile:function(e,t){return Oo.test(t.ngValue)?function(e,t,n){r(t,n,e.$eval(n.ngValue))}:function(e,t,n){e.$watch(n.ngValue,function(e){r(t,n,e)})}}}},Po=["$compile",function(r){return{restrict:"AC",compile:function(e){return r.$$addBindingClass(e),function(e,t,n){r.$$addBindingInfo(t,n.ngBind),t=t[0],e.$watch(n.ngBind,function(e){t.textContent=le(e)})}}}}],Ro=["$interpolate","$compile",function(i,o){return{compile:function(e){return o.$$addBindingClass(e),function(e,t,n){var r=i(t.attr(n.$attr.ngBindTemplate));o.$$addBindingInfo(t,r.expressions),t=t[0],n.$observe("ngBindTemplate",function(e){t.textContent=_e(e)?"":e})}}}}],To=["$sce","$parse","$compile",function(o,n,a){return{restrict:"A",compile:function(e,t){var r=n(t.ngBindHtml),i=n(t.ngBindHtml,function(e){return o.valueOf(e)});return a.$$addBindingClass(e),function(t,n,e){a.$$addBindingInfo(n,e.ngBindHtml),t.$watch(i,function(){var e=r(t);n.html(o.getTrustedHtml(e)||"")})}}}}],Ao=R({restrict:"A",require:"ngModel",link:function(e,t,n,r){r.$viewChangeListeners.push(function(){e.$eval(n.ngChange)})}});function Mo(i,p){var o;return i="ngClass"+i,["$parse",function(n){return{restrict:"AC",link:function(e,t,u){var c,r=t.data("$classCounts"),l=!0;function f(e,t){var n=[];return ge(e,function(e){(0<t||r[e])&&(r[e]=(r[e]||0)+t,r[e]===+(0<t)&&n.push(e))}),n.join(" ")}r||(r=qe(),t.data("$classCounts",r)),"ngClass"!==i&&(o||(o=n("$index",function(e){return 1&e})),e.$watch(o,function(e){e===p?(n=f(d(n=c),1),u.$addClass(n)):(t=f(d(t=c),-1),u.$removeClass(t));var t;var n;l=e})),e.$watch(n(u[i],a),function(e){l===p&&(t=e,n=d(c),r=d(t),i=h(n,r),o=h(r,n),a=f(i,-1),s=f(o,1),u.$addClass(s),u.$removeClass(a));var t,n,r,i,o,a,s;c=e})}}}];function h(e,t){if(!e||!e.length)return[];if(!t||!t.length)return e;var n=[];e:for(var r=0;r<e.length;r++){for(var i=e[r],o=0;o<t.length;o++)if(i===t[o])continue e;n.push(i)}return n}function d(e){return e&&e.split(" ")}function a(t){if(!t)return t;var e=t;return Ee(t)?e=t.map(a).join(" "):Se(t)?e=Object.keys(t).filter(function(e){return t[e]}).join(" "):xe(t)||(e=t+""),e}}var No=Mo("",!0),Lo=Mo("Odd",0),Vo=Mo("Even",1),Io=Hi({compile:function(e,t){t.$set("ngCloak",void 0),e.removeClass("ng-cloak")}}),Do=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],qo={},Uo={blur:!0,focus:!0};function Fo(n,i,o,a,s,u){return{restrict:"A",compile:function(e,t){var r=n(t[a]);return function(n,e){e.on(s,function(e){var t=function(){r(n,{$event:e})};if(i.$$phase)if(u)n.$evalAsync(t);else try{t()}catch(e){o(e)}else n.$apply(t)})}}}}ge("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(r){var i=wn("ng-"+r);qo[i]=["$parse","$rootScope","$exceptionHandler",function(e,t,n){return Fo(e,t,n,i,r,Uo[r])}]});var Ho=["$animate","$compile",function(u,c){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(e,n,r,t,i){var o,a,s;e.$watch(r.ngIf,function(e){e?a||i(function(e,t){a=t,e[e.length++]=c.$$createComment("end ngIf",r.ngIf),o={clone:e},u.enter(e,n.parent(),n)}):(s&&(s.remove(),s=null),a&&(a.$destroy(),a=null),o&&(s=ce(o.clone),u.leave(s).done(function(e){!1!==e&&(s=null)}),o=null))})}}}],zo=["$templateRequest","$anchorScroll","$animate",function(v,g,$){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:y.noop,compile:function(e,t){var n=t.ngInclude||t.src,d=t.onload||"",m=t.autoscroll;return function(a,s,e,u,c){var l,t,f,p=0,h=function(){t&&(t.remove(),t=null),l&&(l.$destroy(),l=null),f&&($.leave(f).done(function(e){!1!==e&&(t=null)}),t=f,f=null)};a.$watch(n,function(r){var i=function(e){!1===e||!T(m)||m&&!a.$eval(m)||g()},o=++p;r?(v(r,!0).then(function(e){if(!a.$$destroyed&&o===p){var t=a.$new();u.template=e;var n=c(t,function(e){h(),$.enter(e,null,s).done(i)});f=n,(l=t).$emit("$includeContentLoaded",r),a.$eval(d)}},function(){a.$$destroyed||o===p&&(h(),a.$emit("$includeContentError",r))}),a.$emit("$includeContentRequested",r)):(h(),u.template=null)})}}}}],Bo=["$compile",function(i){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(e,t,n,r){if(ve.call(t[0]).match(/SVG/))return t.empty(),void i(lt(r.template,fe.document).childNodes)(e,function(e){t.append(e)},{futureParentElement:t});t.html(r.template),i(t.contents())(e)}}}],Go=Hi({priority:450,compile:function(){return{pre:function(e,t,n){e.$eval(n.ngInit)}}}}),Wo=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(e,t,n,r){var i=n.ngList||", ",o="false"!==n.ngTrim,a=o?Pe(i):i;r.$parsers.push(function(e){if(!_e(e)){var t=[];return e&&ge(e.split(a),function(e){e&&t.push(o?Pe(e):e)}),t}}),r.$formatters.push(function(e){if(Ee(e))return e.join(i)}),r.$isEmpty=function(e){return!e||!e.length}}}},Ko="ng-valid",Jo="ng-invalid",Yo="ng-pristine",Qo="ng-dirty",Zo="ng-untouched",Xo="ng-touched",ea="ng-not-empty",ta=O("ngModel");function na(e,t,n,r,i,o,a,s,u){var c;this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=void 0,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=void 0,this.$name=u(n.name||"",!1)(e),this.$$parentForm=Gi,this.$options=ra,this.$$updateEvents="",this.$$updateEventHandler=this.$$updateEventHandler.bind(this),this.$$parsedNgModel=i(n.ngModel),this.$$parsedNgModelAssign=this.$$parsedNgModel.assign,this.$$ngModelGet=this.$$parsedNgModel,this.$$ngModelSet=this.$$parsedNgModelAssign,this.$$pendingDebounce=null,this.$$parserValid=void 0,this.$$parserName="parse",this.$$currentValidationRunId=0,this.$$scope=e,this.$$rootScope=e.$root,this.$$attr=n,this.$$element=r,this.$$animate=o,this.$$timeout=a,this.$$parse=i,this.$$q=s,this.$$exceptionHandler=t,Xi(this),(c=this).$$scope.$watch(function(e){var t=c.$$ngModelGet(e);return t===c.$modelValue||c.$modelValue!=c.$modelValue&&t!=t||c.$$setModelValue(t),t})}na.$inject=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$q","$interpolate"],na.prototype={$$initGetterSetters:function(){if(this.$options.getOption("getterSetter")){var n=this.$$parse(this.$$attr.ngModel+"()"),r=this.$$parse(this.$$attr.ngModel+"($$$p)");this.$$ngModelGet=function(e){var t=this.$$parsedNgModel(e);return ke(t)&&(t=n(e)),t},this.$$ngModelSet=function(e,t){ke(this.$$parsedNgModel(e))?r(e,{$$$p:t}):this.$$parsedNgModelAssign(e,t)}}else if(!this.$$parsedNgModel.assign)throw ta("nonassign","Expression '{0}' is non-assignable. Element: {1}",this.$$attr.ngModel,Ve(this.$$element))},$render:be,$isEmpty:function(e){return _e(e)||""===e||null===e||e!=e},$$updateEmptyClasses:function(e){this.$isEmpty(e)?(this.$$animate.removeClass(this.$$element,ea),this.$$animate.addClass(this.$$element,"ng-empty")):(this.$$animate.removeClass(this.$$element,"ng-empty"),this.$$animate.addClass(this.$$element,ea))},$setPristine:function(){this.$dirty=!1,this.$pristine=!0,this.$$animate.removeClass(this.$$element,Qo),this.$$animate.addClass(this.$$element,Yo)},$setDirty:function(){this.$dirty=!0,this.$pristine=!1,this.$$animate.removeClass(this.$$element,Yo),this.$$animate.addClass(this.$$element,Qo),this.$$parentForm.$setDirty()},$setUntouched:function(){this.$touched=!1,this.$untouched=!0,this.$$animate.setClass(this.$$element,Zo,Xo)},$setTouched:function(){this.$touched=!0,this.$untouched=!1,this.$$animate.setClass(this.$$element,Xo,Zo)},$rollbackViewValue:function(){this.$$timeout.cancel(this.$$pendingDebounce),this.$viewValue=this.$$lastCommittedViewValue,this.$render()},$validate:function(){if(!P(this.$modelValue)){var e=this.$$lastCommittedViewValue,t=this.$$rawModelValue,n=this.$valid,r=this.$modelValue,i=this.$options.getOption("allowInvalid"),o=this;this.$$runValidators(t,e,function(e){i||n===e||(o.$modelValue=e?t:void 0,o.$modelValue!==r&&o.$$writeModelToScope())})}},$$runValidators:function(r,i,t){this.$$currentValidationRunId++;var o,a,s,n=this.$$currentValidationRunId,u=this;(function(){var e=u.$$parserName;{if(!_e(u.$$parserValid))return u.$$parserValid||(ge(u.$validators,function(e,t){c(t,null)}),ge(u.$asyncValidators,function(e,t){c(t,null)})),c(e,u.$$parserValid),u.$$parserValid;c(e,null)}return!0})()?(o=!0,ge(u.$validators,function(e,t){var n=Boolean(e(r,i));o=o&&n,c(t,n)}),o||(ge(u.$asyncValidators,function(e,t){c(t,null)}),0)?(a=[],s=!0,ge(u.$asyncValidators,function(e,t){var n=e(r,i);if(!k(n))throw ta("nopromise","Expected asynchronous validator to return a promise but got '{0}' instead.",n);c(t,void 0),a.push(n.then(function(){c(t,!0)},function(){c(t,s=!1)}))}),a.length?u.$$q.all(a).then(function(){e(s)},be):e(!0)):e(!1)):e(!1);function c(e,t){n===u.$$currentValidationRunId&&u.$setValidity(e,t)}function e(e){n===u.$$currentValidationRunId&&t(e)}},$commitViewValue:function(){var e=this.$viewValue;this.$$timeout.cancel(this.$$pendingDebounce),(this.$$lastCommittedViewValue!==e||""===e&&this.$$hasNativeValidators)&&(this.$$updateEmptyClasses(e),this.$$lastCommittedViewValue=e,this.$pristine&&this.$setDirty(),this.$$parseAndValidate())},$$parseAndValidate:function(){var t=this.$$lastCommittedViewValue,n=this;if(this.$$parserValid=!_e(t)||void 0,this.$setValidity(this.$$parserName,null),this.$$parserName="parse",this.$$parserValid)for(var e=0;e<this.$parsers.length;e++)if(_e(t=this.$parsers[e](t))){this.$$parserValid=!1;break}P(this.$modelValue)&&(this.$modelValue=this.$$ngModelGet(this.$$scope));var r=this.$modelValue,i=this.$options.getOption("allowInvalid");function o(){n.$modelValue!==r&&n.$$writeModelToScope()}this.$$rawModelValue=t,i&&(this.$modelValue=t,o()),this.$$runValidators(t,this.$$lastCommittedViewValue,function(e){i||(n.$modelValue=e?t:void 0,o())})},$$writeModelToScope:function(){this.$$ngModelSet(this.$$scope,this.$modelValue),ge(this.$viewChangeListeners,function(e){try{e()}catch(e){this.$$exceptionHandler(e)}},this)},$setViewValue:function(e,t){this.$viewValue=e,this.$options.getOption("updateOnDefault")&&this.$$debounceViewValueCommit(t)},$$debounceViewValueCommit:function(e){var t=this.$options.getOption("debounce");S(t[e])?t=t[e]:S(t.default)&&-1===this.$options.getOption("updateOn").indexOf(e)?t=t.default:S(t["*"])&&(t=t["*"]),this.$$timeout.cancel(this.$$pendingDebounce);var n=this;0<t?this.$$pendingDebounce=this.$$timeout(function(){n.$commitViewValue()},t):this.$$rootScope.$$phase?this.$commitViewValue():this.$$scope.$apply(function(){n.$commitViewValue()})},$overrideModelOptions:function(e){this.$options=this.$options.createChild(e),this.$$setUpdateOnEvents()},$processModelValue:function(){var e=this.$$format();this.$viewValue!==e&&(this.$$updateEmptyClasses(e),this.$viewValue=this.$$lastCommittedViewValue=e,this.$render(),this.$$runValidators(this.$modelValue,this.$viewValue,be))},$$format:function(){for(var e=this.$formatters,t=e.length,n=this.$modelValue;t--;)n=e[t](n);return n},$$setModelValue:function(e){this.$modelValue=this.$$rawModelValue=e,this.$$parserValid=void 0,this.$processModelValue()},$$setUpdateOnEvents:function(){this.$$updateEvents&&this.$$element.off(this.$$updateEvents,this.$$updateEventHandler),this.$$updateEvents=this.$options.getOption("updateOn"),this.$$updateEvents&&this.$$element.on(this.$$updateEvents,this.$$updateEventHandler)},$$updateEventHandler:function(e){this.$$debounceViewValueCommit(e&&e.type)}},eo({clazz:na,set:function(e,t){e[t]=!0},unset:function(e,t){delete e[t]}});var ra,ia=["$rootScope",function(a){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:na,priority:1,compile:function(e){return e.addClass(Yo).addClass(Zo).addClass(Ko),{pre:function(e,t,n,r){var i=r[0],o=r[1]||i.$$parentForm,a=r[2];a&&(i.$options=a.$options),i.$$initGetterSetters(),o.$addControl(i),n.$observe("name",function(e){i.$name!==e&&i.$$parentForm.$$renameControl(i,e)}),e.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(e,t,n,r){var i=r[0];function o(){i.$setTouched()}i.$$setUpdateOnEvents(),t.on("blur",function(){i.$touched||(a.$$phase?e.$evalAsync(o):e.$apply(o))})}}}}}],oa=/(\s+|^)default(\s+|$)/;function aa(e){this.$$options=e}aa.prototype={getOption:function(e){return this.$$options[e]},createChild:function(n){var r=!1;return ge(n=$e({},n),function(e,t){"$inherit"===e?"*"===t?r=!0:(n[t]=this.$$options[t],"updateOn"===t&&(n.updateOnDefault=this.$$options.updateOnDefault)):"updateOn"===t&&(n.updateOnDefault=!1,n[t]=Pe(e.replace(oa,function(){return n.updateOnDefault=!0," "})))},this),r&&(delete n["*"],ua(n,this.$$options)),ua(n,ra.$$options),new aa(n)}},ra=new aa({updateOn:"",updateOnDefault:!0,debounce:0,getterSetter:!1,allowInvalid:!1,timezone:null});var sa=function(){function e(e,t){this.$$attrs=e,this.$$scope=t}return e.$inject=["$attrs","$scope"],e.prototype={$onInit:function(){var e=this.parentCtrl?this.parentCtrl.$options:ra,t=this.$$scope.$eval(this.$$attrs.ngModelOptions);this.$options=e.createChild(t)}},{restrict:"A",priority:10,require:{parentCtrl:"?^^ngModelOptions"},bindToController:!0,controller:e}};function ua(n,e){ge(e,function(e,t){T(n[t])||(n[t]=e)})}var ca=Hi({terminal:!0,priority:1e3}),la=O("ngOptions"),fa=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,pa=["$compile","$document","$parse",function(v,g,x){var $=fe.document.createElement("option"),y=fe.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(e,t,n,r){r[0].registerOption=be},post:function(e,a,t,n){for(var s=n[0],u=n[1],c=t.multiple,r=0,i=a.children(),o=i.length;r<o;r++)if(""===i[r].value){s.hasEmptyOption=!0,s.emptyOption=i.eq(r);break}a.empty();var l,f=!!s.emptyOption;he($.cloneNode(!1)).val("?");var p=function(e,t,p){var f=e.match(fa);if(!f)throw la("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",e,Ve(t));var n=f[5]||f[7],r=f[6],i=/ as /.test(f[0])&&f[1],h=f[9],o=x(f[2]?f[1]:n),d=i&&x(i)||o,a=h&&x(h),m=h?function(e,t){return a(p,t)}:function(e){return It(e)},v=function(e,t){return m(e,w(e,t))},g=x(f[2]||f[1]),$=x(f[3]||""),y=x(f[4]||""),b=x(f[8]),s={},w=r?function(e,t){return s[r]=t,s[n]=e,s}:function(e){return s[n]=e,s};function _(e,t,n,r,i){this.selectValue=e,this.viewValue=t,this.label=n,this.group=r,this.disabled=i}function S(e){var t;if(!r&&N(e))t=e;else for(var n in t=[],e)e.hasOwnProperty(n)&&"$"!==n.charAt(0)&&t.push(n);return t}return{trackBy:h,getTrackByValue:v,getWatchables:x(b,function(e){for(var t=[],n=S(e=e||[]),r=n.length,i=0;i<r;i++){var o=e===n?i:n[i],a=e[o],s=w(a,o),u=m(a,s);if(t.push(u),f[2]||f[1]){var c=g(p,s);t.push(c)}if(f[4]){var l=y(p,s);t.push(l)}}return t}),getOptions:function(){for(var e=[],t={},n=b(p)||[],r=S(n),i=r.length,o=0;o<i;o++){var a=n===r?o:r[o],s=n[a],u=w(s,a),c=d(p,u),l=m(c,u),f=new _(l,c,g(p,u),$(p,u),y(p,u));e.push(f),t[l]=f}return{items:e,selectValueMap:t,getOptionFromViewValue:function(e){return t[v(e)]},getViewValueFromOption:function(e){return h?I(e.viewValue):e.viewValue}}}}}(t.ngOptions,a,e),h=g[0].createDocumentFragment();function d(e,t){var n,r,i=$.cloneNode(!1);t.appendChild(i),r=i,((n=e).element=r).disabled=n.disabled,n.label!==r.label&&(r.label=n.label,r.textContent=n.label),r.value=n.selectValue}function m(e){var t=l.getOptionFromViewValue(e),n=t&&t.element;return n&&!n.selected&&(n.selected=!0),t}s.generateUnknownOptionValue=function(e){return"?"},c?(s.writeValue=function(e){if(l){var t=e&&e.map(m)||[];l.items.forEach(function(e){e.element.selected&&!V(t,e)&&(e.element.selected=!1)})}},s.readValue=function(){var e=a.val()||[],n=[];return ge(e,function(e){var t=l.selectValueMap[e];t&&!t.disabled&&n.push(l.getViewValueFromOption(t))}),n},p.trackBy&&e.$watchCollection(function(){if(Ee(u.$viewValue))return u.$viewValue.map(function(e){return p.getTrackByValue(e)})},function(){u.$render()})):(s.writeValue=function(e){if(l){var t=a[0].options[a[0].selectedIndex],n=l.getOptionFromViewValue(e);t&&t.removeAttribute("selected"),n?(a[0].value!==n.selectValue&&(s.removeUnknownOption(),a[0].value=n.selectValue,n.element.selected=!0),n.element.setAttribute("selected","selected")):s.selectUnknownOrEmptyOption(e)}},s.readValue=function(){var e=l.selectValueMap[a.val()];return e&&!e.disabled?(s.unselectEmptyOption(),s.removeUnknownOption(),l.getViewValueFromOption(e)):null},p.trackBy&&e.$watch(function(){return p.getTrackByValue(u.$viewValue)},function(){u.$render()})),f&&(v(s.emptyOption)(e),a.prepend(s.emptyOption),s.emptyOption[0].nodeType===He?(s.hasEmptyOption=!1,s.registerOption=function(e,t){""===t.val()&&(s.hasEmptyOption=!0,s.emptyOption=t,s.emptyOption.removeClass("ng-scope"),u.$render(),t.on("$destroy",function(){var e=s.$isEmptyOptionSelected();s.hasEmptyOption=!1,s.emptyOption=void 0,e&&u.$render()}))}):s.emptyOption.removeClass("ng-scope")),e.$watchCollection(p.getWatchables,function(){var e=l&&s.readValue();if(l)for(var t=l.items.length-1;0<=t;t--){var n=l.items[t];T(n.group)?Ot(n.element.parentNode):Ot(n.element)}l=p.getOptions();var r={};if(l.items.forEach(function(e){var t;T(e.group)?((t=r[e.group])||(t=y.cloneNode(!1),h.appendChild(t),t.label=null===e.group?"null":e.group,r[e.group]=t),d(e,t)):d(e,h)}),a[0].appendChild(h),u.$render(),!u.$isEmpty(e)){var i=s.readValue(),o=p.trackBy||c;(o?Me(e,i):e===i)||(u.$setViewValue(i),u.$render())}})}}}}],ha=["$locale","$interpolate","$log",function(d,m,v){var g=/{}/g,$=/^when(Minus)?(.+)$/;return{link:function(i,o,a){var s,e=a.count,u=a.$attr.when&&o.attr(a.$attr.when),c=a.offset||0,l=i.$eval(u)||{},f={},t=m.startSymbol(),n=m.endSymbol(),r=t+e+"-"+c+n,p=y.noop;function h(e){o.text(e||"")}ge(a,function(e,t){var n=$.exec(t);if(n){var r=(n[1]?"-":"")+me(n[2]);l[r]=o.attr(a.$attr[t])}}),ge(l,function(e,t){f[t]=m(e.replace(g,r))}),i.$watch(e,function(e){var t=parseFloat(e),n=P(t);if(n||t in l||(t=d.pluralCat(t-c)),!(t===s||n&&P(s))){p();var r=f[t];_e(r)?(null!=e&&v.debug("ngPluralize: no rule defined for '"+t+"' in "+u),p=be,h()):p=i.$watch(r,h),s=t}})}}}],da=O("ngRef"),ma=["$parse",function(t){return{priority:-1,restrict:"A",compile:function(e,i){var o=wn(Re(e)),a=t(i.ngRef),s=a.assign||function(){throw da("nonassign",'Expression in ngRef="{0}" is non-assignable!',i.ngRef)};return function(e,t,n){var r;if(n.hasOwnProperty("ngRefRead")){if("$element"===n.ngRefRead)r=t;else if(!(r=t.data("$"+n.ngRefRead+"Controller")))throw da("noctrl",'The controller for ngRefRead="{0}" could not be found on ngRef="{1}"',n.ngRefRead,i.ngRef)}else r=t.data("$"+o+"Controller");s(e,r=r||t),t.on("$destroy",function(){a(e)===r&&s(e,null)})}}}}],va=["$parse","$animate","$compile",function(s,j,u){var P="$$NG_REMOVED",R=O("ngRepeat"),T=function(e,t,n,r,i,o,a){e[n]=r,i&&(e[i]=o),e.$index=t,e.$first=0===t,e.$last=t===a-1,e.$middle=!(e.$first||e.$last),e.$odd=!(e.$even=0==(1&t))},A=function(e,t,n){return It(n)},M=function(e,t){return t};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(e,t){var _=t.ngRepeat,S=u.$$createComment("end ngRepeat",_),n=_.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!n)throw R("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",_);var r=n[1],i=n[2],x=n[3],o=n[4];if(!(n=r.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/)))throw R("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",r);var E,C=n[3]||n[1],k=n[2];if(x&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(x)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(x)))throw R("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",x);if(o){var O={$id:It},a=s(o);E=function(e,t,n,r){return k&&(O[k]=t),O[C]=n,O.$index=r,a(e,O)}}return function($,y,e,t,b){var w=qe();$.$watchCollection(i,function(e){var r,t,n,i,o,a,s,u,c,l,f,p,h,d=y[0],m=qe();if(x&&($[x]=e),N(e))c=e,u=E||A;else for(var v in u=E||M,c=[],e)de.call(e,v)&&"$"!==v.charAt(0)&&c.push(v);for(i=c.length,f=new Array(i),r=0;r<i;r++)if(o=e===c?r:c[r],a=e[o],s=u($,o,a,r),w[s])l=w[s],delete w[s],m[s]=l,f[r]=l;else{if(m[s])throw ge(f,function(e){e&&e.scope&&(w[e.id]=e)}),R("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",_,s,a);f[r]={id:s,scope:void 0,clone:void 0},m[s]=!0}for(var g in O&&(O[C]=void 0),w){if(p=ce((l=w[g]).clone),j.leave(p),p[0].parentNode)for(r=0,t=p.length;r<t;r++)p[r][P]=!0;l.scope.$destroy()}for(r=0;r<i;r++)if(o=e===c?r:c[r],a=e[o],(l=f[r]).scope){for(n=d;(n=n.nextSibling)&&n[P];);l.clone[0]!==n&&j.move(ce(l.clone),null,d),d=(h=l).clone[h.clone.length-1],T(l.scope,r,C,a,k,o,i)}else b(function(e,t){l.scope=t;var n=S.cloneNode(!1);e[e.length++]=n,j.enter(e,null,d),d=n,l.clone=e,m[l.id]=l,T(l.scope,r,C,a,k,o,i)});w=m})}}}}],ga="ng-hide-animate",$a=["$animate",function(r){return{restrict:"A",multiElement:!0,link:function(e,t,n){e.$watch(n.ngShow,function(e){r[e?"removeClass":"addClass"](t,"ng-hide",{tempClasses:ga})})}}}],ya=["$animate",function(r){return{restrict:"A",multiElement:!0,link:function(e,t,n){e.$watch(n.ngHide,function(e){r[e?"addClass":"removeClass"](t,"ng-hide",{tempClasses:ga})})}}}],ba=Hi(function(e,t,n){e.$watchCollection(n.ngStyle,function(n,e){e&&n!==e&&(n||(n={}),ge(e,function(e,t){null==n[t]&&(n[t]="")})),n&&t.css(n)})}),wa=["$animate","$compile",function(l,f){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(e,t,n,i){var r=n.ngSwitch||n.on,o=[],a=[],s=[],u=[],c=function(t,n){return function(e){!1!==e&&t.splice(n,1)}};e.$watch(r,function(e){for(var t,n;s.length;)l.cancel(s.pop());for(t=0,n=u.length;t<n;++t){var r=ce(a[t].clone);u[t].$destroy(),(s[t]=l.leave(r)).done(c(s,t))}a.length=0,u.length=0,(o=i.cases["!"+e]||i.cases["?"])&&ge(o,function(i){i.transclude(function(e,t){u.push(t);var n=i.element;e[e.length++]=f.$$createComment("end ngSwitchWhen");var r={clone:e};a.push(r),l.enter(e,n.parent(),n)})})})}}}],_a=Hi({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){ge(n.ngSwitchWhen.split(n.ngSwitchWhenSeparator).sort().filter(function(e,t,n){return n[t-1]!==e}),function(e){r.cases["!"+e]=r.cases["!"+e]||[],r.cases["!"+e].push({transclude:i,element:t})})}}),Sa=Hi({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:t})}}),xa=O("ngTransclude"),Ea=["$compile",function(t){return{restrict:"EAC",compile:function(e){var s=t(e.contents());return e.empty(),function(e,n,t,r,i){if(!i)throw xa("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",Ve(n));t.ngTransclude===t.$attr.ngTransclude&&(t.ngTransclude="");var o=t.ngTransclude||t.ngTranscludeSlot;function a(){s(e,function(e){n.append(e)})}i(function(e,t){e.length&&function(e){for(var t=0,n=e.length;t<n;t++){var r=e[t];if(r.nodeType!==Fe||r.nodeValue.trim())return!0}}(e)?n.append(e):(a(),t.$destroy())},null,o),o&&!i.isSlotFilled(o)&&a()}}}}],Ca=["$templateCache",function(i){return{restrict:"E",terminal:!0,compile:function(e,t){if("text/ng-template"===t.type){var n=t.id,r=e[0].text;i.put(n,r)}}}}],ka={$setViewValue:be,$render:be};function Oa(e,t){e.prop("selected",t),e.attr("selected",t)}var ja=["$element","$scope",function(i,t){var s=this,r=new Ut;s.selectValueMap={},s.ngModelCtrl=ka,s.multiple=!1,s.unknownOption=he(fe.document.createElement("option")),s.hasEmptyOption=!1,s.emptyOption=void 0,s.renderUnknownOption=function(e){var t=s.generateUnknownOptionValue(e);s.unknownOption.val(t),i.prepend(s.unknownOption),Oa(s.unknownOption,!0),i.val(t)},s.updateUnknownOption=function(e){var t=s.generateUnknownOptionValue(e);s.unknownOption.val(t),Oa(s.unknownOption,!0),i.val(t)},s.generateUnknownOptionValue=function(e){return"? "+It(e)+" ?"},s.removeUnknownOption=function(){s.unknownOption.parent()&&s.unknownOption.remove()},s.selectEmptyOption=function(){s.emptyOption&&(i.val(""),Oa(s.emptyOption,!0))},s.unselectEmptyOption=function(){s.hasEmptyOption&&Oa(s.emptyOption,!1)},t.$on("$destroy",function(){s.renderUnknownOption=be}),s.readValue=function(){var e=i.val(),t=e in s.selectValueMap?s.selectValueMap[e]:e;return s.hasOption(t)?t:null},s.writeValue=function(e){var t=i[0].options[i[0].selectedIndex];if(t&&Oa(he(t),!1),s.hasOption(e)){s.removeUnknownOption();var n=It(e);i.val(n in s.selectValueMap?n:e);var r=i[0].options[i[0].selectedIndex];Oa(he(r),!0)}else s.selectUnknownOrEmptyOption(e)},s.addOption=function(e,t){if(t[0].nodeType!==He){ue(e,'"option value"'),""===e&&(s.hasEmptyOption=!0,s.emptyOption=t);var n=r.get(e)||0;r.set(e,n+1),u()}},s.removeOption=function(e){var t=r.get(e);t&&(1===t?(r.delete(e),""===e&&(s.hasEmptyOption=!1,s.emptyOption=void 0)):r.set(e,t-1))},s.hasOption=function(e){return!!r.get(e)},s.$hasEmptyOption=function(){return s.hasEmptyOption},s.$isUnknownOptionSelected=function(){return i[0].options[0]===s.unknownOption[0]},s.$isEmptyOptionSelected=function(){return s.hasEmptyOption&&i[0].options[i[0].selectedIndex]===s.emptyOption[0]};var e=!(s.selectUnknownOrEmptyOption=function(e){null==e&&s.emptyOption?(s.removeUnknownOption(),s.selectEmptyOption()):s.unknownOption.parent().length?s.updateUnknownOption(e):s.renderUnknownOption(e)});function u(){e||(e=!0,t.$$postDigest(function(){e=!1,s.ngModelCtrl.$render()}))}var n=!1;function c(e){n||(n=!0,t.$$postDigest(function(){t.$$destroyed||(n=!1,s.ngModelCtrl.$setViewValue(s.readValue()),e&&s.ngModelCtrl.$render())}))}s.registerOption=function(e,r,i,t,n){var o,a;i.$attr.ngValue?i.$observe("value",function(e){var t,n=r.prop("selected");T(a)&&(s.removeOption(o),delete s.selectValueMap[a],t=!0),a=It(e),o=e,s.selectValueMap[a]=e,s.addOption(e,r),r.attr("value",a),t&&n&&c()}):t?i.$observe("value",function(e){var t;s.readValue();var n=r.prop("selected");T(o)&&(s.removeOption(o),t=!0),o=e,s.addOption(e,r),t&&n&&c()}):n?e.$watch(n,function(e,t){i.$set("value",e);var n=r.prop("selected");t!==e&&s.removeOption(t),s.addOption(e,r),t&&n&&c()}):s.addOption(i.value,r);i.$observe("disabled",function(e){("true"===e||e&&r.prop("selected"))&&(s.multiple?c(!0):(s.ngModelCtrl.$setViewValue(null),s.ngModelCtrl.$render()))}),r.on("$destroy",function(){var e=s.readValue(),t=i.value;s.removeOption(t),u(),(s.multiple&&e&&-1!==e.indexOf(t)||e===t)&&c(!0)})}}],Pa=function(){return{restrict:"E",require:["select","?ngModel"],controller:ja,priority:1,link:{pre:function(e,t,n,r){var i=r[0],o=r[1];if(!o)return void(i.registerOption=be);if(i.ngModelCtrl=o,t.on("change",function(){i.removeUnknownOption(),e.$apply(function(){o.$setViewValue(i.readValue())})}),n.multiple){i.multiple=!0,i.readValue=function(){var n=[];return ge(t.find("option"),function(e){if(e.selected&&!e.disabled){var t=e.value;n.push(t in i.selectValueMap?i.selectValueMap[t]:t)}}),n},i.writeValue=function(r){ge(t.find("option"),function(e){var t=!!r&&(V(r,e.value)||V(r,i.selectValueMap[e.value])),n=e.selected;t!==n&&Oa(he(e),t)})};var a,s=NaN;e.$watch(function(){s!==o.$viewValue||Me(a,o.$viewValue)||(a=Ge(o.$viewValue),o.$render()),s=o.$viewValue}),o.$isEmpty=function(e){return!e||0===e.length}}},post:function(e,t,n,r){var i=r[1];if(!i)return;var o=r[0];i.$render=function(){o.writeValue(i.$viewValue)}}}}},Ra=["$interpolate",function(n){return{restrict:"E",priority:100,compile:function(e,t){var a,s;return T(t.ngValue)||(T(t.value)?a=n(t.value,!0):(s=n(e.text(),!0))||t.$set("value",e.text())),function(e,t,n){var r="$selectController",i=t.parent(),o=i.data(r)||i.parent().data(r);o&&o.registerOption(e,t,n,a,s)}}}}],Ta=["$parse",function(o){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=n.required||o(n.ngRequired)(e);n.required=!0,r.$validators.required=function(e,t){return!i||!r.$isEmpty(t)},n.$observe("required",function(e){i!==e&&(i=e,r.$validate())})}}}}],Aa=["$parse",function(n){return{restrict:"A",require:"?ngModel",compile:function(e,t){var a,s;return t.ngPattern&&(a=t.ngPattern,s="/"===t.ngPattern.charAt(0)&&o.test(t.ngPattern)?function(){return t.ngPattern}:n(t.ngPattern)),function(e,n,t,r){if(r){var i=t.pattern;t.ngPattern?i=s(e):a=t.pattern;var o=La(i,a,n);t.$observe("pattern",function(e){var t=o;o=La(e,a,n),(t&&t.toString())!==(o&&o.toString())&&r.$validate()}),r.$validators.pattern=function(e,t){return r.$isEmpty(t)||_e(o)||o.test(t)}}}}}}],Ma=["$parse",function(a){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=n.maxlength||a(n.ngMaxlength)(e),o=Va(i);n.$observe("maxlength",function(e){i!==e&&(o=Va(e),i=e,r.$validate())}),r.$validators.maxlength=function(e,t){return o<0||r.$isEmpty(t)||t.length<=o}}}}}],Na=["$parse",function(a){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=n.minlength||a(n.ngMinlength)(e),o=Va(i)||-1;n.$observe("minlength",function(e){i!==e&&(o=Va(e)||-1,i=e,r.$validate())}),r.$validators.minlength=function(e,t){return r.$isEmpty(t)||t.length>=o}}}}}];function La(e,t,n){if(e){if(xe(e)&&(e=new RegExp("^"+e+"$")),!e.test)throw O("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",t,e,Ve(n));return e}}function Va(e){var t=b(e);return P(t)?-1:t}fe.angular.bootstrap?fe.console&&console.log("WARNING: Tried to load AngularJS more than once."):(!function(){var i;if(!ae){var e=q();(t=_e(e)?fe.jQuery:e?fe[e]:void 0)&&t.fn.on?$e((he=t).fn,{scope:Pt.scope,isolateScope:Pt.isolateScope,controller:Pt.controller,injector:Pt.injector,inheritedData:Pt.inheritedData}):he=pt,i=he.cleanData,he.cleanData=function(e){for(var t,n,r=0;null!=(n=e[r]);r++)(t=(he._data(n)||{}).events)&&t.$destroy&&he(n).triggerHandler("$destroy");i(e)},y.element=he,ae=!0}}(),$e(y,{errorHandlingConfig:e,bootstrap:ne,copy:I,extend:$e,merge:$,equals:Me,element:he,forEach:ge,injector:Qt,noop:be,bind:Le,toJson:H,fromJson:z,identity:we,isUndefined:_e,isDefined:T,isString:xe,isFunction:ke,isObject:Se,isNumber:S,isElement:L,isArray:Ee,version:Ke,isDate:x,callbacks:{$$counter:0},getTestability:ie,reloadWithDebugInfo:re,$$minErr:O,$$csp:D,$$encodeUriSegment:Q,$$encodeUriQuery:Z,$$lowercase:me,$$stringify:le,$$uppercase:p}),(g=function(e){var f=O("$injector"),p=O("ng");function t(e,t,n){return e[t]||(e[t]=n())}var n=t(e,"angular",Object);return n.$$minErr=n.$$minErr||O,t(n,"module",function(){var e={};return function(s,u,c){var l={};return function(e,t){if("hasOwnProperty"===e)throw p("badname","hasOwnProperty is not a valid {0} name",t)}(s,"module"),u&&e.hasOwnProperty(s)&&(e[s]=null),t(e,s,function(){if(!u)throw f("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",s);var o=[],e=[],t=[],n=r("$injector","invoke","push",e),a={_invokeQueue:o,_configBlocks:e,_runBlocks:t,info:function(e){if(T(e)){if(!Se(e))throw p("aobj","Argument '{0}' must be an object","value");return l=e,this}return l},requires:u,name:s,provider:i("$provide","provider"),factory:i("$provide","factory"),service:i("$provide","service"),value:r("$provide","value"),constant:r("$provide","constant","unshift"),decorator:i("$provide","decorator",e),animation:i("$animateProvider","register"),filter:i("$filterProvider","register"),controller:i("$controllerProvider","register"),directive:i("$compileProvider","directive"),component:i("$compileProvider","component"),config:n,run:function(e){return t.push(e),this}};return c&&n(c),a;function r(e,t,n,r){return r||(r=o),function(){return r[n||"push"]([e,t,arguments]),a}}function i(n,r,i){return i||(i=o),function(e,t){return t&&ke(t)&&(t.$$moduleName=s),i.push([n,r,arguments]),a}}})}})}(fe))("ng",["ngLocale"],["$provide",function(e){e.provider({$$sanitizeUri:Gr}),e.provider("$compile",gn).directive({a:zi,input:Co,textarea:Co,form:Qi,script:Ca,select:Pa,option:Ra,ngBind:Po,ngBindHtml:To,ngBindTemplate:Ro,ngClass:No,ngClassEven:Vo,ngClassOdd:Lo,ngCloak:Io,ngController:Do,ngForm:Zi,ngHide:ya,ngIf:Ho,ngInclude:zo,ngInit:Go,ngNonBindable:ca,ngPluralize:ha,ngRef:ma,ngRepeat:va,ngShow:$a,ngStyle:ba,ngSwitch:wa,ngSwitchWhen:_a,ngSwitchDefault:Sa,ngOptions:pa,ngTransclude:Ea,ngModel:ia,ngList:Wo,ngChange:Ao,pattern:Aa,ngPattern:Aa,required:Ta,ngRequired:Ta,minlength:Na,ngMinlength:Na,maxlength:Ma,ngMaxlength:Ma,ngValue:jo,ngModelOptions:sa}).directive({ngInclude:Bo,input:ko}).directive(Bi).directive(qo),e.provider({$anchorScroll:Zt,$animate:sn,$animateCss:ln,$$animateJs:on,$$animateQueue:an,$$AnimateRunner:cn,$$animateAsyncRun:un,$browser:pn,$cacheFactory:hn,$controller:Cn,$document:kn,$$isDocumentHidden:On,$exceptionHandler:jn,$filter:gi,$$forceReflow:Pn,$interpolate:Jn,$interval:Qn,$$intervalFactory:Zn,$http:Bn,$httpParamSerializer:In,$httpParamSerializerJQLike:Dn,$httpBackend:Wn,$xhrFactory:Gn,$jsonpCallbacks:Xn,$location:vr,$log:gr,$parse:Vr,$rootScope:Br,$q:Ir,$$q:Dr,$sce:Xr,$sceDelegate:Zr,$sniffer:ei,$$taskTrackerFactory:ti,$templateCache:dn,$templateRequest:ii,$$testability:oi,$timeout:si,$window:di,$$rAF:zr,$$jqLite:Vt,$$Map:Ft,$$cookieReader:vi})}]).info({angularVersion:"1.7.7"}),y.module("ngLocale",[],["$provide",function(e){var i="one",o="other";e.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],SHORTDAY:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],SHORTMONTH:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],STANDALONEMONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a",short:"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-Â¤",negSuf:"",posPre:"Â¤",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(e,t){var n=0|e,r=function(e,t){var n,r,i=t;void 0===i&&(i=Math.min((n=e,-1==(r=(n+="").indexOf("."))?0:n.length-r-1),3));var o=Math.pow(10,i);return{v:i,f:(e*o|0)%o}}(e,t);return 1==n&&0==r.v?i:o}})}]),he(function(){te(fe.document,ne)}))}(window),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>')},{}],87:[function(e,t,n){e("./angular"),t.exports=angular},{"./angular":86}],88:[function(e,t,n){t.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},{}],89:[function(e,t,n){var r=e("./_wks")("unscopables"),i=Array.prototype;null==i[r]&&e("./_hide")(i,r,{}),t.exports=function(e){i[r][e]=!0}},{"./_hide":105,"./_wks":143}],90:[function(e,t,n){var r=e("./_is-object");t.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},{"./_is-object":110}],91:[function(e,t,n){var u=e("./_to-iobject"),c=e("./_to-length"),l=e("./_to-absolute-index");t.exports=function(s){return function(e,t,n){var r,i=u(e),o=c(i.length),a=l(n,o);if(s&&t!=t){for(;a<o;)if((r=i[a++])!=r)return!0}else for(;a<o;a++)if((s||a in i)&&i[a]===t)return s||a||0;return!s&&-1}}},{"./_to-absolute-index":134,"./_to-iobject":136,"./_to-length":137}],92:[function(e,t,n){var r={}.toString;t.exports=function(e){return r.call(e).slice(8,-1)}},{}],93:[function(e,t,n){var r=t.exports={version:"2.6.5"};"number"==typeof __e&&(__e=r)},{}],94:[function(e,t,n){var o=e("./_a-function");t.exports=function(r,i,e){if(o(r),void 0===i)return r;switch(e){case 1:return function(e){return r.call(i,e)};case 2:return function(e,t){return r.call(i,e,t)};case 3:return function(e,t,n){return r.call(i,e,t,n)}}return function(){return r.apply(i,arguments)}}},{"./_a-function":88}],95:[function(e,t,n){t.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},{}],96:[function(e,t,n){t.exports=!e("./_fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{"./_fails":101}],97:[function(e,t,n){var r=e("./_is-object"),i=e("./_global").document,o=r(i)&&r(i.createElement);t.exports=function(e){return o?i.createElement(e):{}}},{"./_global":103,"./_is-object":110}],98:[function(e,t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],99:[function(e,t,n){var s=e("./_object-keys"),u=e("./_object-gops"),c=e("./_object-pie");t.exports=function(e){var t=s(e),n=u.f;if(n)for(var r,i=n(e),o=c.f,a=0;i.length>a;)o.call(e,r=i[a++])&&t.push(r);return t}},{"./_object-gops":123,"./_object-keys":126,"./_object-pie":127}],100:[function(e,t,n){var m=e("./_global"),v=e("./_core"),g=e("./_hide"),$=e("./_redefine"),y=e("./_ctx"),b="prototype",w=function(e,t,n){var r,i,o,a,s=e&w.F,u=e&w.G,c=e&w.S,l=e&w.P,f=e&w.B,p=u?m:c?m[t]||(m[t]={}):(m[t]||{})[b],h=u?v:v[t]||(v[t]={}),d=h[b]||(h[b]={});for(r in u&&(n=t),n)o=((i=!s&&p&&void 0!==p[r])?p:n)[r],a=f&&i?y(o,m):l&&"function"==typeof o?y(Function.call,o):o,p&&$(p,r,o,e&w.U),h[r]!=o&&g(h,r,a),l&&d[r]!=o&&(d[r]=o)};m.core=v,w.F=1,w.G=2,w.S=4,w.P=8,w.B=16,w.W=32,w.U=64,w.R=128,t.exports=w},{"./_core":93,"./_ctx":94,"./_global":103,"./_hide":105,"./_redefine":130}],101:[function(e,t,n){t.exports=function(e){try{return!!e()}catch(e){return!0}}},{}],102:[function(e,t,n){t.exports=e("./_shared")("native-function-to-string",Function.toString)},{"./_shared":133}],103:[function(e,t,n){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},{}],104:[function(e,t,n){var r={}.hasOwnProperty;t.exports=function(e,t){return r.call(e,t)}},{}],105:[function(e,t,n){var r=e("./_object-dp"),i=e("./_property-desc");t.exports=e("./_descriptors")?function(e,t,n){return r.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},{"./_descriptors":96,"./_object-dp":118,"./_property-desc":129}],106:[function(e,t,n){var r=e("./_global").document;t.exports=r&&r.documentElement},{"./_global":103}],107:[function(e,t,n){t.exports=!e("./_descriptors")&&!e("./_fails")(function(){return 7!=Object.defineProperty(e("./_dom-create")("div"),"a",{get:function(){return 7}}).a})},{"./_descriptors":96,"./_dom-create":97,"./_fails":101}],108:[function(e,t,n){var r=e("./_cof");t.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},{"./_cof":92}],109:[function(e,t,n){var r=e("./_cof");t.exports=Array.isArray||function(e){return"Array"==r(e)}},{"./_cof":92}],110:[function(e,t,n){t.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},{}],111:[function(e,t,n){"use strict";var r=e("./_object-create"),i=e("./_property-desc"),o=e("./_set-to-string-tag"),a={};e("./_hide")(a,e("./_wks")("iterator"),function(){return this}),t.exports=function(e,t,n){e.prototype=r(a,{next:i(1,n)}),o(e,t+" Iterator")}},{"./_hide":105,"./_object-create":117,"./_property-desc":129,"./_set-to-string-tag":131,"./_wks":143}],112:[function(e,t,n){"use strict";var y=e("./_library"),b=e("./_export"),w=e("./_redefine"),_=e("./_hide"),S=e("./_iterators"),x=e("./_iter-create"),E=e("./_set-to-string-tag"),C=e("./_object-gpo"),k=e("./_wks")("iterator"),O=!([].keys&&"next"in[].keys()),j="values",P=function(){return this};t.exports=function(e,t,n,r,i,o,a){x(n,t,r);var s,u,c,l=function(e){if(!O&&e in d)return d[e];switch(e){case"keys":case j:return function(){return new n(this,e)}}return function(){return new n(this,e)}},f=t+" Iterator",p=i==j,h=!1,d=e.prototype,m=d[k]||d["@@iterator"]||i&&d[i],v=m||l(i),g=i?p?l("entries"):v:void 0,$="Array"==t&&d.entries||m;if($&&(c=C($.call(new e)))!==Object.prototype&&c.next&&(E(c,f,!0),y||"function"==typeof c[k]||_(c,k,P)),p&&m&&m.name!==j&&(h=!0,v=function(){return m.call(this)}),y&&!a||!O&&!h&&d[k]||_(d,k,v),S[t]=v,S[f]=P,i)if(s={values:p?v:l(j),keys:o?v:l("keys"),entries:g},a)for(u in s)u in d||w(d,u,s[u]);else b(b.P+b.F*(O||h),t,s);return s}},{"./_export":100,"./_hide":105,"./_iter-create":111,"./_iterators":114,"./_library":115,"./_object-gpo":124,"./_redefine":130,"./_set-to-string-tag":131,"./_wks":143}],113:[function(e,t,n){t.exports=function(e,t){return{value:t,done:!!e}}},{}],114:[function(e,t,n){t.exports={}},{}],115:[function(e,t,n){t.exports=!1},{}],116:[function(e,t,n){var r=e("./_uid")("meta"),i=e("./_is-object"),o=e("./_has"),a=e("./_object-dp").f,s=0,u=Object.isExtensible||function(){return!0},c=!e("./_fails")(function(){return u(Object.preventExtensions({}))}),l=function(e){a(e,r,{value:{i:"O"+ ++s,w:{}}})},f=t.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!i(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!o(e,r)){if(!u(e))return"F";if(!t)return"E";l(e)}return e[r].i},getWeak:function(e,t){if(!o(e,r)){if(!u(e))return!0;if(!t)return!1;l(e)}return e[r].w},onFreeze:function(e){return c&&f.NEED&&u(e)&&!o(e,r)&&l(e),e}}},{"./_fails":101,"./_has":104,"./_is-object":110,"./_object-dp":118,"./_uid":140}],117:[function(r,e,t){var i=r("./_an-object"),o=r("./_object-dps"),a=r("./_enum-bug-keys"),s=r("./_shared-key")("IE_PROTO"),u=function(){},c="prototype",l=function(){var e,t=r("./_dom-create")("iframe"),n=a.length;for(t.style.display="none",r("./_html").appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),l=e.F;n--;)delete l[c][a[n]];return l()};e.exports=Object.create||function(e,t){var n;return null!==e?(u[c]=i(e),n=new u,u[c]=null,n[s]=e):n=l(),void 0===t?n:o(n,t)}},{"./_an-object":90,"./_dom-create":97,"./_enum-bug-keys":98,"./_html":106,"./_object-dps":119,"./_shared-key":132}],118:[function(e,t,n){var r=e("./_an-object"),i=e("./_ie8-dom-define"),o=e("./_to-primitive"),a=Object.defineProperty;n.f=e("./_descriptors")?Object.defineProperty:function(e,t,n){if(r(e),t=o(t,!0),r(n),i)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},{"./_an-object":90,"./_descriptors":96,"./_ie8-dom-define":107,"./_to-primitive":139}],119:[function(e,t,n){var a=e("./_object-dp"),s=e("./_an-object"),u=e("./_object-keys");t.exports=e("./_descriptors")?Object.defineProperties:function(e,t){s(e);for(var n,r=u(t),i=r.length,o=0;o<i;)a.f(e,n=r[o++],t[n]);return e}},{"./_an-object":90,"./_descriptors":96,"./_object-dp":118,"./_object-keys":126}],120:[function(e,t,n){var r=e("./_object-pie"),i=e("./_property-desc"),o=e("./_to-iobject"),a=e("./_to-primitive"),s=e("./_has"),u=e("./_ie8-dom-define"),c=Object.getOwnPropertyDescriptor;n.f=e("./_descriptors")?c:function(e,t){if(e=o(e),t=a(t,!0),u)try{return c(e,t)}catch(e){}if(s(e,t))return i(!r.f.call(e,t),e[t])}},{"./_descriptors":96,"./_has":104,"./_ie8-dom-define":107,"./_object-pie":127,"./_property-desc":129,"./_to-iobject":136,"./_to-primitive":139}],121:[function(e,t,n){var r=e("./_to-iobject"),i=e("./_object-gopn").f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(e){return a&&"[object Window]"==o.call(e)?function(e){try{return i(e)}catch(e){return a.slice()}}(e):i(r(e))}},{"./_object-gopn":122,"./_to-iobject":136}],122:[function(e,t,n){var r=e("./_object-keys-internal"),i=e("./_enum-bug-keys").concat("length","prototype");n.f=Object.getOwnPropertyNames||function(e){return r(e,i)}},{"./_enum-bug-keys":98,"./_object-keys-internal":125}],123:[function(e,t,n){n.f=Object.getOwnPropertySymbols},{}],124:[function(e,t,n){var r=e("./_has"),i=e("./_to-object"),o=e("./_shared-key")("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(e){return e=i(e),r(e,o)?e[o]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},{"./_has":104,"./_shared-key":132,"./_to-object":138}],125:[function(e,t,n){var a=e("./_has"),s=e("./_to-iobject"),u=e("./_array-includes")(!1),c=e("./_shared-key")("IE_PROTO");t.exports=function(e,t){var n,r=s(e),i=0,o=[];for(n in r)n!=c&&a(r,n)&&o.push(n);for(;t.length>i;)a(r,n=t[i++])&&(~u(o,n)||o.push(n));return o}},{"./_array-includes":91,"./_has":104,"./_shared-key":132,"./_to-iobject":136}],126:[function(e,t,n){var r=e("./_object-keys-internal"),i=e("./_enum-bug-keys");t.exports=Object.keys||function(e){return r(e,i)}},{"./_enum-bug-keys":98,"./_object-keys-internal":125}],127:[function(e,t,n){n.f={}.propertyIsEnumerable},{}],128:[function(e,t,n){var i=e("./_export"),o=e("./_core"),a=e("./_fails");t.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],r={};r[e]=t(n),i(i.S+i.F*a(function(){n(1)}),"Object",r)}},{"./_core":93,"./_export":100,"./_fails":101}],129:[function(e,t,n){t.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},{}],130:[function(e,t,n){var o=e("./_global"),a=e("./_hide"),s=e("./_has"),u=e("./_uid")("src"),r=e("./_function-to-string"),c=(""+r).split("toString");e("./_core").inspectSource=function(e){return r.call(e)},(t.exports=function(e,t,n,r){var i="function"==typeof n;i&&(s(n,"name")||a(n,"name",t)),e[t]!==n&&(i&&(s(n,u)||a(n,u,e[t]?""+e[t]:c.join(String(t)))),e===o?e[t]=n:r?e[t]?e[t]=n:a(e,t,n):(delete e[t],a(e,t,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||r.call(this)})},{"./_core":93,"./_function-to-string":102,"./_global":103,"./_has":104,"./_hide":105,"./_uid":140}],131:[function(e,t,n){var r=e("./_object-dp").f,i=e("./_has"),o=e("./_wks")("toStringTag");t.exports=function(e,t,n){e&&!i(e=n?e:e.prototype,o)&&r(e,o,{configurable:!0,value:t})}},{"./_has":104,"./_object-dp":118,"./_wks":143}],132:[function(e,t,n){var r=e("./_shared")("keys"),i=e("./_uid");t.exports=function(e){return r[e]||(r[e]=i(e))}},{"./_shared":133,"./_uid":140}],133:[function(e,t,n){var r=e("./_core"),i=e("./_global"),o="__core-js_shared__",a=i[o]||(i[o]={});(t.exports=function(e,t){return a[e]||(a[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:e("./_library")?"pure":"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})},{"./_core":93,"./_global":103,"./_library":115}],134:[function(e,t,n){var r=e("./_to-integer"),i=Math.max,o=Math.min;t.exports=function(e,t){return(e=r(e))<0?i(e+t,0):o(e,t)}},{"./_to-integer":135}],135:[function(e,t,n){var r=Math.ceil,i=Math.floor;t.exports=function(e){return isNaN(e=+e)?0:(0<e?i:r)(e)}},{}],136:[function(e,t,n){var r=e("./_iobject"),i=e("./_defined");t.exports=function(e){return r(i(e))}},{"./_defined":95,"./_iobject":108}],137:[function(e,t,n){var r=e("./_to-integer"),i=Math.min;t.exports=function(e){return 0<e?i(r(e),9007199254740991):0}},{"./_to-integer":135}],138:[function(e,t,n){var r=e("./_defined");t.exports=function(e){return Object(r(e))}},{"./_defined":95}],139:[function(e,t,n){var i=e("./_is-object");t.exports=function(e,t){if(!i(e))return e;var n,r;if(t&&"function"==typeof(n=e.toString)&&!i(r=n.call(e)))return r;if("function"==typeof(n=e.valueOf)&&!i(r=n.call(e)))return r;if(!t&&"function"==typeof(n=e.toString)&&!i(r=n.call(e)))return r;throw TypeError("Can't convert object to primitive value")}},{"./_is-object":110}],140:[function(e,t,n){var r=0,i=Math.random();t.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++r+i).toString(36))}},{}],141:[function(e,t,n){var r=e("./_global"),i=e("./_core"),o=e("./_library"),a=e("./_wks-ext"),s=e("./_object-dp").f;t.exports=function(e){var t=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||s(t,e,{value:a.f(e)})}},{"./_core":93,"./_global":103,"./_library":115,"./_object-dp":118,"./_wks-ext":142}],142:[function(e,t,n){n.f=e("./_wks")},{"./_wks":143}],143:[function(e,t,n){var r=e("./_shared")("wks"),i=e("./_uid"),o=e("./_global").Symbol,a="function"==typeof o;(t.exports=function(e){return r[e]||(r[e]=a&&o[e]||(a?o:i)("Symbol."+e))}).store=r},{"./_global":103,"./_shared":133,"./_uid":140}],144:[function(e,t,n){"use strict";var r=e("./_add-to-unscopables"),i=e("./_iter-step"),o=e("./_iterators"),a=e("./_to-iobject");t.exports=e("./_iter-define")(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,i(1)):i(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},{"./_add-to-unscopables":89,"./_iter-define":112,"./_iter-step":113,"./_iterators":114,"./_to-iobject":136}],145:[function(e,t,n){var r=e("./_export");r(r.S,"Math",{trunc:function(e){return(0<e?Math.floor:Math.ceil)(e)}})},{"./_export":100}],146:[function(e,t,n){var r=e("./_to-object"),i=e("./_object-keys");e("./_object-sap")("keys",function(){return function(e){return i(r(e))}})},{"./_object-keys":126,"./_object-sap":128,"./_to-object":138}],147:[function(e,t,n){"use strict";var r=e("./_global"),a=e("./_has"),i=e("./_descriptors"),o=e("./_export"),s=e("./_redefine"),u=e("./_meta").KEY,c=e("./_fails"),l=e("./_shared"),f=e("./_set-to-string-tag"),p=e("./_uid"),h=e("./_wks"),d=e("./_wks-ext"),m=e("./_wks-define"),v=e("./_enum-keys"),g=e("./_is-array"),$=e("./_an-object"),y=e("./_is-object"),b=e("./_to-iobject"),w=e("./_to-primitive"),_=e("./_property-desc"),S=e("./_object-create"),x=e("./_object-gopn-ext"),E=e("./_object-gopd"),C=e("./_object-dp"),k=e("./_object-keys"),O=E.f,j=C.f,P=x.f,R=r.Symbol,T=r.JSON,A=T&&T.stringify,M="prototype",N=h("_hidden"),L=h("toPrimitive"),V={}.propertyIsEnumerable,I=l("symbol-registry"),D=l("symbols"),q=l("op-symbols"),U=Object[M],F="function"==typeof R,H=r.QObject,z=!H||!H[M]||!H[M].findChild,B=i&&c(function(){return 7!=S(j({},"a",{get:function(){return j(this,"a",{value:7}).a}})).a})?function(e,t,n){var r=O(U,t);r&&delete U[t],j(e,t,n),r&&e!==U&&j(U,t,r)}:j,G=function(e){var t=D[e]=S(R[M]);return t._k=e,t},W=F&&"symbol"==typeof R.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof R},K=function(e,t,n){return e===U&&K(q,t,n),$(e),t=w(t,!0),$(n),a(D,t)?(n.enumerable?(a(e,N)&&e[N][t]&&(e[N][t]=!1),n=S(n,{enumerable:_(0,!1)})):(a(e,N)||j(e,N,_(1,{})),e[N][t]=!0),B(e,t,n)):j(e,t,n)},J=function(e,t){$(e);for(var n,r=v(t=b(t)),i=0,o=r.length;i<o;)K(e,n=r[i++],t[n]);return e},Y=function(e){var t=V.call(this,e=w(e,!0));return!(this===U&&a(D,e)&&!a(q,e))&&(!(t||!a(this,e)||!a(D,e)||a(this,N)&&this[N][e])||t)},Q=function(e,t){if(e=b(e),t=w(t,!0),e!==U||!a(D,t)||a(q,t)){var n=O(e,t);return!n||!a(D,t)||a(e,N)&&e[N][t]||(n.enumerable=!0),n}},Z=function(e){for(var t,n=P(b(e)),r=[],i=0;n.length>i;)a(D,t=n[i++])||t==N||t==u||r.push(t);return r},X=function(e){for(var t,n=e===U,r=P(n?q:b(e)),i=[],o=0;r.length>o;)!a(D,t=r[o++])||n&&!a(U,t)||i.push(D[t]);return i};F||(s((R=function(){if(this instanceof R)throw TypeError("Symbol is not a constructor!");var t=p(0<arguments.length?arguments[0]:void 0),n=function(e){this===U&&n.call(q,e),a(this,N)&&a(this[N],t)&&(this[N][t]=!1),B(this,t,_(1,e))};return i&&z&&B(U,t,{configurable:!0,set:n}),G(t)})[M],"toString",function(){return this._k}),E.f=Q,C.f=K,e("./_object-gopn").f=x.f=Z,e("./_object-pie").f=Y,e("./_object-gops").f=X,i&&!e("./_library")&&s(U,"propertyIsEnumerable",Y,!0),d.f=function(e){return G(h(e))}),o(o.G+o.W+o.F*!F,{Symbol:R});for(var ee="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),te=0;ee.length>te;)h(ee[te++]);for(var ne=k(h.store),re=0;ne.length>re;)m(ne[re++]);o(o.S+o.F*!F,"Symbol",{for:function(e){return a(I,e+="")?I[e]:I[e]=R(e)},keyFor:function(e){if(!W(e))throw TypeError(e+" is not a symbol!");for(var t in I)if(I[t]===e)return t},useSetter:function(){z=!0},useSimple:function(){z=!1}}),o(o.S+o.F*!F,"Object",{create:function(e,t){return void 0===t?S(e):J(S(e),t)},defineProperty:K,defineProperties:J,getOwnPropertyDescriptor:Q,getOwnPropertyNames:Z,getOwnPropertySymbols:X}),T&&o(o.S+o.F*(!F||c(function(){var e=R();return"[null]"!=A([e])||"{}"!=A({a:e})||"{}"!=A(Object(e))})),"JSON",{stringify:function(e){for(var t,n,r=[e],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=t=r[1],(y(t)||void 0!==e)&&!W(e))return g(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!W(t))return t}),r[1]=t,A.apply(T,r)}}),R[M][L]||e("./_hide")(R[M],L,R[M].valueOf),f(R,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},{"./_an-object":90,"./_descriptors":96,"./_enum-keys":99,"./_export":100,"./_fails":101,"./_global":103,"./_has":104,"./_hide":105,"./_is-array":109,"./_is-object":110,"./_library":115,"./_meta":116,"./_object-create":117,"./_object-dp":118,"./_object-gopd":120,"./_object-gopn":122,"./_object-gopn-ext":121,"./_object-gops":123,"./_object-keys":126,"./_object-pie":127,"./_property-desc":129,"./_redefine":130,"./_set-to-string-tag":131,"./_shared":133,"./_to-iobject":136,"./_to-primitive":139,"./_uid":140,"./_wks":143,"./_wks-define":141,"./_wks-ext":142}],148:[function(e,t,n){e("./_wks-define")("asyncIterator")},{"./_wks-define":141}],149:[function(e,t,n){for(var r=e("./es6.array.iterator"),i=e("./_object-keys"),o=e("./_redefine"),a=e("./_global"),s=e("./_hide"),u=e("./_iterators"),c=e("./_wks"),l=c("iterator"),f=c("toStringTag"),p=u.Array,h={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(h),m=0;m<d.length;m++){var v,g=d[m],$=h[g],y=a[g],b=y&&y.prototype;if(b&&(b[l]||s(b,l,p),b[f]||s(b,f,g),u[g]=p,$))for(v in r)b[v]||o(b,v,r[v],!0)}},{"./_global":103,"./_hide":105,"./_iterators":114,"./_object-keys":126,"./_redefine":130,"./_wks":143,"./es6.array.iterator":144}],150:[function(e,t,n){"use strict";var r,i=(r=e("angular"))&&r.__esModule?r:{default:r};e("@uirouter/angularjs"),e("angular-translate"),e("angular-sanitize"),e("angular-translate-loader-static-files"),e("angular-translate-storage-local"),e("angular-translate-storage-cookie"),e("angular-cookies"),i.default.module("core",["templates","ui.router","searchPage","shared","home","ngCookies","pascalprecht.translate","translate","ngSanitize"]),i.default.module("home",[]),i.default.module("searchPage",[]),i.default.module("shared",[]),i.default.module("translate",[])},{"@uirouter/angularjs":2,angular:87,"angular-cookies":79,"angular-sanitize":81,"angular-translate":85,"angular-translate-loader-static-files":82,"angular-translate-storage-cookie":83,"angular-translate-storage-local":84}],151:[function(e,t,n){t.exports={BUTTON_LANG_EN:"Englisch",BUTTON_LANG_DE:"Deutsch",BUTTON_LANG_ES:"Spanisch",TOTAL_RESULTS:"Ergebnisse insgesamt"}},{}],152:[function(e,t,n){t.exports={BUTTON_LANG_EN:"English",BUTTON_LANG_DE:"German",BUTTON_LANG_ES:"Spanish",TOTAL_RESULTS:"Total results"}},{}],153:[function(e,t,n){t.exports={BUTTON_LANG_EN:"Ingles",BUTTON_LANG_DE:"Alemn",BUTTON_LANG_ES:"Espanol",TOTAL_RESULTS:"Resultados totales"}},{}],154:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.mockDocuments=void 0;n.mockDocuments=[{category:"Journals",value:{headline:"Journals happend",text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras ultricies ipsum vel tortor aliquam eleifend. Sed non velit rhoncus quam volutpat gravida tincidunt nec lectus. Nullam tristique erat a lacus sollicitudin, commodo tempus elit viverra. Vestibulum imperdiet neque nec tortor mollis, at scelerisque nisi varius. Vivamus ligula magna, porta et felis non, convallis facilisis est. Morbi ut nunc libero. Vivamus posuere auctor sem, quis molestie massa laoreet vitae. Donec nec libero vitae turpis aliquet scelerisque ac ac dui. Praesent metus turpis, elementum eu purus faucibus, imperdiet pellentesque nisi. Duis maximus libero dictum mi vulputate, in iaculis neque commodo.",views:90132}},{category:"Journals",value:{headline:"Where Journals I get some?",text:"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Qu vel eum iure reprehenderit qui in ea voluptate velit consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?",views:100}},{category:"News",value:{headline:"Something News",text:"Etiam sit amet malesuada dolor. Suspendisse eu dignissim mauris. Aliquam ut leo dignissim, posuere nunc non, ullamcorper neque. Interdum et malesuada fames ac ante ipsum primis in faucibus. Cras nec odio in massa fermentum pellentesque vehicula eget odio. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Mauris ligula turpis, vehicula id justo non, laoreet maximus augue. Nam vel ex ullamcorper, posuere magna eu, consequat orci. Suspendisse accumsan ligula augue, convallis posuere libero sodales ac. Vivamus eget ipsum in velit gravida faucibus consectetur id dolor. Etiam et dui sed leo congue tristique. Curabitur non lobortis nibh, sit amet fringilla nisl. Maecenas et sem ut lorem consequat aliquam in ut lectus. In gravida quam dolor, eget porta lorem vulputate at.",views:932}},{category:"Taxes",value:{headline:"Taxes happend",text:"Maecenas malesuada at ipsum ultrices elementum. Sed dolor odio, mollis nec ligula sodales, semper sollicitudin libero. Phasellus venenatis, nulla sed interdum auctor, orci metus congue dui, et feugiat ex enim sed nunc. Donec malesuada, leo quis consequat efficitur, nulla velit condimentum enim, sed tristique sapien nunc rutrum nunc. In quis odio ac ipsum feugiat viverra. Etiam odio est, tristique eget pharetra sed, tincidunt eget purus. Nullam non efficitur nulla. Suspendisse diam erat, semper sed rhoncus vitae, lacinia in odio.",views:32}},{category:"Journals",value:{headline:"Where Journals I get some?",text:"There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.",views:10}},{category:"Taxes",value:{headline:"Taxes happend",text:"Vestibulum ac malesuada neque, at porta nisi. Nam urna sapien, egestas vel eros nec, efficitur cursus quam. Duis sed mauris egestas, convallis felis sed, hendrerit ex. Nullam fringilla finibus mi, eget euismod felis euismod a. Nullam blandit eget justo nec cursus. Suspendisse orci tortor, gravida ac convallis nec, mollis eget dolor. Sed non leo eu nunc egestas fermentum a vel arcu. Sed volutpat a nibh eu vestibulum.",views:90}},{category:"News",value:{headline:"News happend",text:"Nullam condimentum ac risus quis vulputate. Fusce at lorem quis lectus malesuada semper eget sed massa. Duis ut est ante. In id turpis a mi fringilla convallis quis vel sapien. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aenean nibh sem, dictum et tempor vel, rhoncus ut ipsum. Vestibulum sit amet enim arcu. Cras sapien neque, pulvinar eu egestas at, molestie non enim.",views:132}},{category:"Topics",value:{headline:"Topics happend",text:"Pellentesque ac nisi ultricies, accumsan ipsum vel, volutpat metus. Pellentesque elementum velit quam, vitae semper magna venenatis a. Fusce nulla lorem, mollis sit amet iaculis et, mattis id mi. Morbi enim velit, dignissim semper dignissim nec, tincidunt vel justo. Maecenas bibendum efficitur eros, feugiat volutpat lacus sodales vitae. Proin faucibus nisl non nisl consectetur aliquam. Mauris placerat leo laoreet, tempor turpis scelerisque, iaculis leo. Vestibulum quis ipsum at tellus accumsan aliquet vitae eu leo. Proin rhoncus dolor faucibus, elementum justo nec, sodales diam. Integer eu velit condimentum, iaculis lorem sed, tristique quam. Nullam ultricies sagittis neque eleifend facilisis. Proin quis laoreet augue, nec molestie risus. Nam quis bibendum ipsum, quis sollicitudin massa.",views:701}},{category:"Topics",value:{headline:"Topics happend",text:"On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds",views:90132}},{category:"News",value:{headline:"News happend",text:"Aliquam consectetur augue turpis, vel tristique ipsum tincidunt ac. Ut a dignissim est. Aenean at posuere turpis. Duis quis luctus purus. Aenean efficitur vestibulum tortor vel hendrerit. Morbi sit amet pharetra ipsum, at eleifend erat. Sed lacinia metus sapien, vel consequat justo fringilla et. Suspendisse ac velit et quam facilisis volutpat. Cras at odio tellus. Mauris quam lectus, bibendum sed lacinia sed, ultrices nec dolor. Donec ut ex eget dolor lacinia lacinia quis eu nisl. Proin luctus maximus vestibulum. Quisque a felis nec nunc egestas pellentesque in non quam. Nam lacinia rhoncus velit sed interdum. Suspendisse nunc urna, tristique id sem a, condimentum laoreet risus.",views:132}},{category:"Topics",value:{headline:"Topics happend",text:"On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and aters to this principle of selection: he rejects pleasu",views:701}},{category:"Topics",value:{headline:"Something Topics",text:"Donec ut elementum erat, at ullamcorper est. Ut tristique, mauris in interdum consectetur, neque leo viverra leo, non sagittis enim leo vitae urna. Cras eros turpis, dignissim at scelerisque non, fringilla sed odio. Morbi tristique, justo sit amet sodales vestibulum, justo elit dapibus tellus, eget sagittis odio libero non arcu. Nunc convallis ipsum a maximus fermentum. Nam tincidunt cursus ultrices. In ac cursus risus.",views:90132}},{category:"News",value:{headline:"News happend",text:"Sed iaculis, lectus vitae mollis consectetur, nibh libero interdum ipsum, eu pulvinar arcu leo eu risus. Proin pulvinar eros scelerisque lorem dignissim, pretium blandit nisi volutpat. Etiam sit amet elit vitae lectus elementum laoreet. Morbi posuere ex eros, non ultrices purus condimentum sagittis. Duis eget auctor orci. Morbi ultrices lobortis neque et iaculis. In non felis aliquet, finibus mi vel, ultricies diam. Ut id hendrerit urna. Nam iaculis dolor non elit sodales sodales. Pellentesque convallis, lorem sit amet sagittis ultrices, risus eros blandit lacus, volutpat vestibulum felis nibh eget enim. Etiam porta maximus ligula sit amet euismod. Nullam aliquam bibendum leo. Pellentesque tempus arcu vel odio maximus rutrum. Etiam id convallis libero. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Donec nisl nulla, lacinia vel sagittis nec, pulvinar finibus augue.",views:132}},{category:"Topics",value:{headline:"Topics happend",text:"Ut nisl justo, sagittis ac urna non, convallis gravida tortor. Fusce in tristique libero. Sed porta commodo nisl, ac pellentesque metus pellentesque a. In vel urna velit. Donec faucibus molestie nulla, vel ultrices ipsum efficitur eu. Morbi varius turpis ac enim ullamcorper ultrices. Nam ornare arcu sed sollicitudin facilisis. Praesent velit enim, luctus ut semper a, ullamcorper sed justo. Cras ligula quam, aliquet sit amet bibendum a, fermentum eu ante. Donec suscipit eleifend metus, et luctus elit cursus ac. Aenean interdum nunc ac imperdiet molestie. Vivamus volutpat tortor cursus magna vestibulum tincidunt. Curabitur tincidunt, dui ut cursus malesuada, diam mi efficitur tortor, sit amet dictum augue dui vel mauris.",views:701}},{category:"Topics",value:{headline:"Something Topics",text:"Something really important happened somewhere today Something really important happened somewhere today Something really important happened somewhere today",views:90132}}]},{}],155:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("core").directive("swtApp",function(){return{templateUrl:"app.html",restrict:"E"}});n.default=i},{angular:87}],156:[function(e,t,n){"use strict";e("./routes"),e("./appDirective")},{"./appDirective":155,"./routes":157}],157:[function(e,t,n){"use strict";e("./routes")},{"./routes":158}],158:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("core").config(["$stateProvider","$locationProvider",function(e,t){e.state({name:"home",url:"/",templateUrl:"homeRoute.html"}).state({name:"search",url:"/search?query",templateUrl:"searchRoute.html"}),t.html5Mode(!0)}]);n.default=i},{angular:87}],159:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("home").directive("swtHome",function(){return{templateUrl:"home.html",restrict:"E"}});n.default=i},{angular:87}],160:[function(e,t,n){"use strict";e("./home.directive"),e("./popularDocuments")},{"./home.directive":159,"./popularDocuments":162}],161:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r,i=(r=e("angular"))&&r.__esModule?r:{default:r},o=e("../../assets/documents");var a=i.default.module("home").controller("PopularDocumentsController",function(){this.documents=o.mockDocuments});n.default=a},{"../../assets/documents":154,angular:87}],162:[function(e,t,n){"use strict";e("./popularDocuments.directive"),e("./PopularDocuments.controller")},{"./PopularDocuments.controller":161,"./popularDocuments.directive":163}],163:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("home").directive("swtPopularDocuments",function(){return{templateUrl:"popularDocuments.html",restrict:"E",controller:"PopularDocumentsController",controllerAs:"popular"}});n.default=i},{angular:87}],164:[function(e,t,n){"use strict";e("./app.module"),e("./core"),e("./shared"),e("./searchPage"),e("./home"),e("./translate")},{"./app.module":150,"./core":156,"./home":160,"./searchPage":168,"./shared":185,"./translate":192}],165:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("searchPage").controller("FilterPanelController",["filterPanelService",function(e){this.filteredArticles=e.getFilteredArticles()}]);n.default=i},{angular:87}],166:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("searchPage").directive("swtFilterPanel",function(){return{controller:"FilterPanelController",controllerAs:"filter",templateUrl:"filterPanel.html"}});n.default=i},{angular:87}],167:[function(e,t,n){"use strict";e("./filterPanelDirective"),e("./FilterPanelController")},{"./FilterPanelController":165,"./filterPanelDirective":166}],168:[function(e,t,n){"use strict";e("./searchResults"),e("./filterPanel"),e("./searchPageDirective"),e("./searchPageController")},{"./filterPanel":167,"./searchPageController":169,"./searchPageDirective":170,"./searchResults":172}],169:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("searchPage").controller("SearchPageController",["$translate",function(e){}]);n.default=i},{angular:87}],170:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("searchPage").directive("swtSearchPage",function(){return{templateUrl:"searchPage.html",restrict:"E",controller:"SearchPageController",controllerAs:"searchPageCtrl"}});n.default=i},{angular:87}],171:[function(e,t,n){"use strict";var r;function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0,e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.math.trunc");var o=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("searchPage").controller("SearchResultsController",["$state","documentService",function(e,t){var n=this,r=e.params.query;this.results=[];t.searchDocuments(r).then(function(e){n.paginatedDocuments=e.reduce(function(e,t,n){var r=Math.trunc(n/8);return e[r]||e.push([]),e[r].push(t),e},[]);var t=i(n.paginatedDocuments,1);n.results=t[0],n.changePage=function(e){n.results=n.paginatedDocuments[e]}})}]);n.default=o},{angular:87,"core-js/modules/es6.math.trunc":145,"core-js/modules/es6.symbol":147,"core-js/modules/es7.symbol.async-iterator":148,"core-js/modules/web.dom.iterable":149}],172:[function(e,t,n){"use strict";e("./searchResultsDirective"),e("./SearchResultsController")},{"./SearchResultsController":171,"./searchResultsDirective":173}],173:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("searchPage").directive("swtSearchResults",function(){return{controller:"SearchResultsController",controllerAs:"search",templateUrl:"searchResults.html"}});n.default=i},{angular:87}],174:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("shared").directive("swtDocument",function(){return{restrict:"E",templateUrl:"document.html",scope:{showHeadline:"@headline",document:"<"}}});n.default=i},{angular:87}],175:[function(e,t,n){"use strict";e("./documentDirective")},{"./documentDirective":174}],176:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("shared");i.controller("FooterController",function(){this.text="2019"});var o=i;n.default=o},{angular:87}],177:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("shared").directive("swtFooter",function(){return{restrict:"E",templateUrl:"footer.html"}});n.default=i},{angular:87}],178:[function(e,t,n){"use strict";e("./footer.controller"),e("./footer.directive")},{"./footer.controller":176,"./footer.directive":177}],179:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("shared").controller("HamburgerMenuController",function(){var e=this;this.isActive=!1,this.toggleMenu=function(){e.isActive=!e.isActive},this.navList=[{text:"Home",state:"home"}]});n.default=i},{angular:87}],180:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("shared").directive("swtHamburgerMenu",function(){return{restrict:"E",templateUrl:"hamburgerMenu.html",controller:"HamburgerMenuController",controllerAs:"hamburger",link:function(e,t){function n(){e.hamburger.isActive&&(e.hamburger.toggleMenu(),e.$digest())}function r(e){e.stopPropagation()}document.addEventListener("click",n),t.on("click",r),e.$on("$destroy",function(){document.removeEventListener("click",n),t.off("click",r)})}}});n.default=i},{angular:87}],181:[function(e,t,n){"use strict";e("./hamburgerMenuDirective"),e("./HamburgerMenuController")},{"./HamburgerMenuController":179,"./hamburgerMenuDirective":180}],182:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("shared");i.controller("HeaderController",function(){var e=this;this.menuActive=!1,this.toggleMenu=function(){e.menuActive=!e.menuActive}});var o=i;n.default=o},{angular:87}],183:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("shared").directive("swtHeader",function(){return{restrict:"E",templateUrl:"header.html",controller:"HeaderController",controllerAs:"header"}});n.default=i},{angular:87}],184:[function(e,t,n){"use strict";e("./header.controller"),e("./header.directive"),e("./hamburgerMenu")},{"./hamburgerMenu":181,"./header.controller":182,"./header.directive":183}],185:[function(e,t,n){"use strict";e("./document"),e("./services"),e("./header"),e("./footer"),e("./searchbar")},{"./document":175,"./footer":178,"./header":184,"./searchbar":186,"./services":191}],186:[function(e,t,n){"use strict";e("./searchbarController"),e("./searchbarDirective")},{"./searchbarController":187,"./searchbarDirective":188}],187:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("shared");i.controller("SearchbarController",["$state",function(t){var n=this;this.input=t.params.query||"",this.submitForm=function(e){e.preventDefault(),t.go("search",{query:n.input})}}]);var o=i;n.default=o},{angular:87}],188:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("shared").directive("swtSearchbar",function(){return{restrict:"E",templateUrl:"searchbar.html",controller:"SearchbarController",controllerAs:"searchbar"}});n.default=i},{angular:87}],189:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r,i=(r=e("angular"))&&r.__esModule?r:{default:r},o=e("../../assets/documents");var a=i.default.module("shared").service("documentService",["$q",function(t){return{documents:[],getDocuments:function(){return t.resolve(o.mockDocuments)},searchDocuments:function(e){return t.resolve(o.mockDocuments)}}}]);n.default=a},{"../../assets/documents":154,angular:87}],190:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0,e("core-js/modules/es6.array.iterator"),e("core-js/modules/es6.object.keys"),e("core-js/modules/web.dom.iterable");var r,i=(r=e("angular"))&&r.__esModule?r:{default:r},o=e("../../assets/documents");var a=i.default.module("searchPage");a.service("filterPanelService",function(){return{getFilteredArticles:function(){var t=[],n={};return o.mockDocuments.forEach(function(e){var t=e.category;n[t]?n[t].push(e.value):n[t]=[e.value]}),Object.keys(n).forEach(function(e){t.push({filteredCategoryName:e,filteredGroup:n[e]})}),t}}});var s=a;n.default=s},{"../../assets/documents":154,angular:87,"core-js/modules/es6.array.iterator":144,"core-js/modules/es6.object.keys":146,"core-js/modules/web.dom.iterable":149}],191:[function(e,t,n){"use strict";e("./documentService"),e("./filterPanelService")},{"./documentService":189,"./filterPanelService":190}],192:[function(e,t,n){"use strict";e("./translateConfig"),e("./translateController"),e("./translateDirective")},{"./translateConfig":193,"./translateController":194,"./translateDirective":195}],193:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=s(e("angular")),i=s(e("../assets/data/de.json")),o=s(e("../assets/data/en.json")),a=s(e("../assets/data/es.json"));function s(e){return e&&e.__esModule?e:{default:e}}var u=r.default.module("translate").config(["$translateProvider",function(e){e.translations("en",o.default),e.translations("de",i.default),e.translations("es",a.default),e.useCookieStorage(),e.useLocalStorage(),e.preferredLanguage("en"),e.registerAvailableLanguageKeys(["en","de","es"],{"en-*":"en","de-*":"de","es-*":"es"}),e.useStaticFilesLoader({prefix:"data/",suffix:".json"}),e.useSanitizeValueStrategy("sanitize")}]);n.default=u},{"../assets/data/de.json":151,"../assets/data/en.json":152,"../assets/data/es.json":153,angular:87}],194:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("translate").controller("TranslateController",["$translate",function(t){var n=this;this.selectedLanguage=t.use(),this.changeLanguage=function(e){t.use(e),n.selectedLanguage=e}}]);n.default=i},{angular:87}],195:[function(e,t,n){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e("angular"))&&r.__esModule?r:{default:r}).default.module("translate").directive("swtTranslate",function(){return{templateUrl:"translate.html",restrict:"E",controller:"TranslateController",controllerAs:"translateCtrl"}});n.default=i},{angular:87}]},{},[77,164,1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
